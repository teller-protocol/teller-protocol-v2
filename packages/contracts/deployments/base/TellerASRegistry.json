{
  "address": "0x6eB9b34913Bd96CA2695519eD0F8B8752d43FD2b",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "contract IASResolver",
          "name": "resolver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "attester",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        }
      ],
      "name": "getAS",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uuid",
              "type": "bytes32"
            },
            {
              "internalType": "contract IASResolver",
              "name": "resolver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "schema",
              "type": "bytes"
            }
          ],
          "internalType": "struct IASRegistry.ASRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getASCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "internalType": "contract IASResolver",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8c9f8b22c00b18f3f8412753897634bcf18e786057e63a076e484f112aab148",
  "receipt": {
    "to": null,
    "from": "0x65B38b3Cd7eFe502DB579c16ECB5B49235d0DAd0",
    "contractAddress": "0x6eB9b34913Bd96CA2695519eD0F8B8752d43FD2b",
    "transactionIndex": 12,
    "gasUsed": "415542",
    "logsBloom": "0x
    "blockHash": "0x8413d62a3468453e3180891a5b0048fe6eb71bff5b984aa00121d198a73d32f5",
    "transactionHash": "0xe8c9f8b22c00b18f3f8412753897634bcf18e786057e63a076e484f112aab148",
    "logs": [],
    "blockNumber": 2935386,
    "cumulativeGasUsed": "1499565",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "75b13bf87e3aa153366a5ea53a627180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"}],\"name\":\"getAS\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"}],\"internalType\":\"struct IASRegistry.ASRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getASCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"internalType\":\"contract IASResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAS(bytes32)\":{\"details\":\"Returns an existing AS by UUID\",\"params\":{\"uuid\":\"The UUID of the AS to retrieve.\"},\"returns\":{\"_0\":\"The AS data members.\"}},\"getASCount()\":{\"details\":\"Returns the global counter for the total number of attestations\",\"returns\":{\"_0\":\"The global counter for the total number of attestations.\"}},\"register(bytes,address)\":{\"details\":\"Submits and reserve a new AS\",\"params\":{\"resolver\":\"An optional AS schema resolver.\",\"schema\":\"The AS data schema.\"},\"returns\":{\"_0\":\"The UUID of the new AS.\"}}},\"title\":\"The global AS registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EAS/TellerASRegistry.sol\":\"TellerASRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EAS/TellerASRegistry.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../Types.sol\\\";\\nimport \\\"../interfaces/IASRegistry.sol\\\";\\nimport \\\"../interfaces/IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry.\\n */\\ncontract TellerASRegistry is IASRegistry {\\n    error AlreadyExists();\\n\\n    string public constant VERSION = \\\"0.8\\\";\\n\\n    // The global mapping between AS records and their IDs.\\n    mapping(bytes32 => ASRecord) private _registry;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _asCount;\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function register(bytes calldata schema, IASResolver resolver)\\n        external\\n        override\\n        returns (bytes32)\\n    {\\n        uint256 index = ++_asCount;\\n\\n        ASRecord memory asRecord = ASRecord({\\n            uuid: EMPTY_UUID,\\n            index: index,\\n            schema: schema,\\n            resolver: resolver\\n        });\\n\\n        bytes32 uuid = _getUUID(asRecord);\\n        if (_registry[uuid].uuid != EMPTY_UUID) {\\n            revert AlreadyExists();\\n        }\\n\\n        asRecord.uuid = uuid;\\n        _registry[uuid] = asRecord;\\n\\n        emit Registered(uuid, index, schema, resolver, msg.sender);\\n\\n        return uuid;\\n    }\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function getAS(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (ASRecord memory)\\n    {\\n        return _registry[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IASRegistry\\n     */\\n    function getASCount() external view override returns (uint256) {\\n        return _asCount;\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given AS.\\n     *\\n     * @param asRecord The input AS.\\n     *\\n     * @return AS UUID.\\n     */\\n    function _getUUID(ASRecord memory asRecord) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(asRecord.schema, asRecord.resolver));\\n    }\\n}\\n\",\"keccak256\":\"0x1d5782c3bb5ea52db95c8ce6d7ff6d20382bae8ca574614cfbaa45c05f93f13c\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0x2e4bcf4a965f840193af8729251386c1826cd050411ba4a9e85984a2551fd2ff\",\"license\":\"MIT\"},\"contracts/interfaces/IASRegistry.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @title A struct representing a record for a submitted AS (Attestation Schema).\\n     */\\n    struct ASRecord {\\n        // A unique identifier of the AS.\\n        bytes32 uuid;\\n        // Optional schema resolver.\\n        IASResolver resolver;\\n        // Auto-incrementing index for reference, assigned by the registry itself.\\n        uint256 index;\\n        // Custom specification of the AS (e.g., an ABI).\\n        bytes schema;\\n    }\\n\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(\\n        bytes32 indexed uuid,\\n        uint256 indexed index,\\n        bytes schema,\\n        IASResolver resolver,\\n        address attester\\n    );\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver)\\n        external\\n        returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74752921f592df45c8717d7084627e823b1dbc93bad7187cd3023c9690df7e60\",\"license\":\"MIT\"},\"contracts/interfaces/IASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xfce671ea099d9f997a69c3447eb4a9c9693d37c5b97e43ada376e614e1c7cb61\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061068e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806372487d5214610051578063a99e7e291461007a578063d96250641461009b578063ffa1ad74146100a3575b600080fd5b61006461005f36600461040f565b6100d2565b6040516100719190610484565b60405180910390f35b61008d6100883660046104cd565b6101d3565b604051908152602001610071565b60015461008d565b6100c5604051806040016040528060038152602001620605c760eb1b81525081565b604051610071919061055c565b60408051608081018252600080825260208201819052918101919091526060808201526000828152602081815260409182902082516080810184528154815260018201546001600160a01b03169281019290925260028101549282019290925260038201805491929160608401919061014a90610576565b80601f016020809104026020016040519081016040528092919081815260200182805461017690610576565b80156101c35780601f10610198576101008083540402835291602001916101c3565b820191906000526020600020905b8154815290600101906020018083116101a657829003601f168201915b5050505050815250509050919050565b6000806001600081546101e5906105b1565b9190508190559050600060405180608001604052806000801b8152602001856001600160a01b0316815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061025f90508261033c565b6000818152602081905260409020549091501561028f5760405163119b4fd360e11b815260040160405180910390fd5b8082526000818152602081815260409182902084518155818501516001820180546001600160a01b0319166001600160a01b03909216919091179055918401516002830155606084015180518593926102ef926003850192910190610376565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b8989893360405161032a94939291906105da565b60405180910390a39695505050505050565b600081606001518260200151604051602001610359929190610621565b604051602081830303815290604052805190602001209050919050565b82805461038290610576565b90600052602060002090601f0160209004810192826103a457600085556103ea565b82601f106103bd57805160ff19168380011785556103ea565b828001600101855582156103ea579182015b828111156103ea5782518255916020019190600101906103cf565b506103f69291506103fa565b5090565b5b808211156103f657600081556001016103fb565b60006020828403121561042157600080fd5b5035919050565b60005b8381101561044357818101518382015260200161042b565b83811115610452576000848401525b50505050565b60008151808452610470816020860160208601610428565b601f01601f19169290920160200192915050565b602081528151602082015260018060a01b03602083015116604082015260408201516060820152600060608301516080808401526104c560a0840182610458565b949350505050565b6000806000604084860312156104e257600080fd5b833567ffffffffffffffff808211156104fa57600080fd5b818601915086601f83011261050e57600080fd5b81358181111561051d57600080fd5b87602082850101111561052f57600080fd5b602092830195509350508401356001600160a01b038116811461055157600080fd5b809150509250925092565b60208152600061056f6020830184610458565b9392505050565b600181811c9082168061058a57607f821691505b602082108114156105ab57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156105d357634e487b7160e01b600052601160045260246000fd5b5060010190565b6060815283606082015283856080830137600060808583018101919091526001600160a01b039384166020830152919092166040830152601f909201601f19160101919050565b60008351610633818460208801610428565b60609390931b6bffffffffffffffffffffffff1916919092019081526014019291505056fea2646970667358221220d5a2ae236065d696cf08baaf5b64dfba64bb8bb07876f47a25a1a47906a5074864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806372487d5214610051578063a99e7e291461007a578063d96250641461009b578063ffa1ad74146100a3575b600080fd5b61006461005f36600461040f565b6100d2565b6040516100719190610484565b60405180910390f35b61008d6100883660046104cd565b6101d3565b604051908152602001610071565b60015461008d565b6100c5604051806040016040528060038152602001620605c760eb1b81525081565b604051610071919061055c565b60408051608081018252600080825260208201819052918101919091526060808201526000828152602081815260409182902082516080810184528154815260018201546001600160a01b03169281019290925260028101549282019290925260038201805491929160608401919061014a90610576565b80601f016020809104026020016040519081016040528092919081815260200182805461017690610576565b80156101c35780601f10610198576101008083540402835291602001916101c3565b820191906000526020600020905b8154815290600101906020018083116101a657829003601f168201915b5050505050815250509050919050565b6000806001600081546101e5906105b1565b9190508190559050600060405180608001604052806000801b8152602001856001600160a01b0316815260200183815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915061025f90508261033c565b6000818152602081905260409020549091501561028f5760405163119b4fd360e11b815260040160405180910390fd5b8082526000818152602081815260409182902084518155818501516001820180546001600160a01b0319166001600160a01b03909216919091179055918401516002830155606084015180518593926102ef926003850192910190610376565b5090505082817f51a1a037ef8a642f8b5528429785b5a54e6ee54fb2d2db4b4a44480b5302d55b8989893360405161032a94939291906105da565b60405180910390a39695505050505050565b600081606001518260200151604051602001610359929190610621565b604051602081830303815290604052805190602001209050919050565b82805461038290610576565b90600052602060002090601f0160209004810192826103a457600085556103ea565b82601f106103bd57805160ff19168380011785556103ea565b828001600101855582156103ea579182015b828111156103ea5782518255916020019190600101906103cf565b506103f69291506103fa565b5090565b5b808211156103f657600081556001016103fb565b60006020828403121561042157600080fd5b5035919050565b60005b8381101561044357818101518382015260200161042b565b83811115610452576000848401525b50505050565b60008151808452610470816020860160208601610428565b601f01601f19169290920160200192915050565b602081528151602082015260018060a01b03602083015116604082015260408201516060820152600060608301516080808401526104c560a0840182610458565b949350505050565b6000806000604084860312156104e257600080fd5b833567ffffffffffffffff808211156104fa57600080fd5b818601915086601f83011261050e57600080fd5b81358181111561051d57600080fd5b87602082850101111561052f57600080fd5b602092830195509350508401356001600160a01b038116811461055157600080fd5b809150509250925092565b60208152600061056f6020830184610458565b9392505050565b600181811c9082168061058a57607f821691505b602082108114156105ab57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156105d357634e487b7160e01b600052601160045260246000fd5b5060010190565b6060815283606082015283856080830137600060808583018101919091526001600160a01b039384166020830152919092166040830152601f909201601f19160101919050565b60008351610633818460208801610428565b60609390931b6bffffffffffffffffffffffff1916919092019081526014019291505056fea2646970667358221220d5a2ae236065d696cf08baaf5b64dfba64bb8bb07876f47a25a1a47906a5074864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAS(bytes32)": {
        "details": "Returns an existing AS by UUID",
        "params": {
          "uuid": "The UUID of the AS to retrieve."
        },
        "returns": {
          "_0": "The AS data members."
        }
      },
      "getASCount()": {
        "details": "Returns the global counter for the total number of attestations",
        "returns": {
          "_0": "The global counter for the total number of attestations."
        }
      },
      "register(bytes,address)": {
        "details": "Submits and reserve a new AS",
        "params": {
          "resolver": "An optional AS schema resolver.",
          "schema": "The AS data schema."
        },
        "returns": {
          "_0": "The UUID of the new AS."
        }
      }
    },
    "title": "The global AS registry.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15867,
        "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
        "label": "_registry",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(ASRecord)24743_storage)"
      },
      {
        "astId": 15869,
        "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
        "label": "_asCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IASResolver)24810": {
        "encoding": "inplace",
        "label": "contract IASResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(ASRecord)24743_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IASRegistry.ASRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ASRecord)24743_storage"
      },
      "t_struct(ASRecord)24743_storage": {
        "encoding": "inplace",
        "label": "struct IASRegistry.ASRecord",
        "members": [
          {
            "astId": 24735,
            "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
            "label": "uuid",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 24738,
            "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
            "label": "resolver",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IASResolver)24810"
          },
          {
            "astId": 24740,
            "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24742,
            "contract": "contracts/EAS/TellerASRegistry.sol:TellerASRegistry",
            "label": "schema",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}