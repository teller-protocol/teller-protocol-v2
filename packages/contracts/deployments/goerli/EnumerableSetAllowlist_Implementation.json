{
  "address": "0xb6b6f8f2DF59Ee047AD1649D781BA5bAD6aA9B90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_commitmentManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commitmentId",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAllowList",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitmentId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addressIsAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitmentManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitmentId",
          "type": "uint256"
        }
      ],
      "name": "getAllowedAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "borrowers_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_commitmentId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_addressList",
          "type": "address[]"
        }
      ],
      "name": "setAllowlist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9a557dbf82bdb3f97bd69a99d8bc874498d362bff31a56af48e77040c756ec43",
  "receipt": {
    "to": null,
    "from": "0x5a5B978142C8F08Dd013901b50892baC49f3b700",
    "contractAddress": "0xb6b6f8f2DF59Ee047AD1649D781BA5bAD6aA9B90",
    "transactionIndex": 10,
    "gasUsed": "387270",
    "logsBloom": "0x
    "blockHash": "0xadfc69d1d928b1f01fa2c0e82345627ca28e3f006367bf3931bdc5d5f2fad409",
    "transactionHash": "0x9a557dbf82bdb3f97bd69a99d8bc874498d362bff31a56af48e77040c756ec43",
    "logs": [],
    "blockNumber": 8689005,
    "cumulativeGasUsed": "807161",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEb73653c0a3B6BFb65b4DfE3cbc73A961919C8B6"
  ],
  "numDeployments": 1,
  "solcInputHash": "e0730cda169a6d13b8fda0f782338556",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_commitmentManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commitmentId\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllowList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitmentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addressIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitmentManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitmentId\",\"type\":\"uint256\"}],\"name\":\"getAllowedAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowers_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commitmentId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/allowlist/EnumerableSetAllowlist.sol\":\"EnumerableSetAllowlist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x4807db844a856813048b5af81a764fdd25a0ae8876a3132593e8d21ddc6b607c\",\"license\":\"MIT\"},\"contracts/allowlist/EnumerableSetAllowlist.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../interfaces/allowlist/IAllowlistManager.sol\\\";\\nimport \\\"../interfaces/allowlist/IEnumerableSetAllowlist.sol\\\";\\n\\nimport \\\"../interfaces/ILenderCommitmentForwarder.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\n\\ncontract EnumerableSetAllowlist is IAllowlistManager,IEnumerableSetAllowlist {\\n using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    event UpdatedAllowList(uint256 commitmentId);\\n \\n    address public immutable commitmentManager;\\n\\n    mapping(uint256 => EnumerableSetUpgradeable.AddressSet) internal allowList;\\n\\n    modifier onlyCommitmentOwner(uint256 _commitmentId){\\n        require(msg.sender == ILenderCommitmentForwarder(commitmentManager).getCommitmentLender(_commitmentId),\\\"Must be the lender of the commitment.\\\");\\n        _;\\n    }\\n\\n    constructor(address _commitmentManager){  \\n        commitmentManager = _commitmentManager;\\n    }\\n\\n\\n    function setAllowlist(\\n        uint256 _commitmentId,\\n        address[] calldata _addressList\\n    ) public\\n     onlyCommitmentOwner(_commitmentId) \\n    {\\n       \\n        delete allowList[_commitmentId];\\n        _addToAllowlist(_commitmentId, _addressList);\\n    }\\n\\n \\n    /**\\n     * @notice Adds a addresses to the allowlist for a commmitment.\\n     * @param _commitmentId The id of the commitment that will allow the new borrower\\n     * @param _addressList the address array that will be allowed to accept loans using the commitment\\n     */\\n    function _addToAllowlist(\\n        uint256 _commitmentId,\\n        address[] calldata _addressList\\n    ) internal virtual {\\n        \\n        for (uint256 i = 0; i < _addressList.length; i++) {\\n            allowList[_commitmentId].add(_addressList[i]);\\n        }\\n        emit UpdatedAllowList(_commitmentId);\\n    }\\n\\n\\n    function addressIsAllowed(uint256 _commitmentId, address _account) public virtual returns (bool) {\\n        return allowList[_commitmentId].contains(_account);\\n    }\\n\\n    function getAllowedAddresses(uint256 _commitmentId)\\n        public\\n        view\\n        returns (address[] memory borrowers_)\\n    {\\n        borrowers_ = allowList[_commitmentId].values();\\n    }\\n\\n}\",\"keccak256\":\"0x58c43cad15285312b196feb3a0c24a17892e77ef509ba62b50e0fc5cd456c4d2\",\"license\":\"MIT\"},\"contracts/interfaces/ILenderCommitmentForwarder.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n \\ninterface ILenderCommitmentForwarder {\\n\\n    function getCommitmentLender(uint256 _commitmentId) external returns (address lender_);\\n\\n}\\n\",\"keccak256\":\"0x9f9fad9535bd1750d3dad338aa8394f805fd1be13859b12a65a75fc1e8c36f76\"},\"contracts/interfaces/allowlist/IAllowlistManager.sol\":{\"content\":\"\\n\\n\\ninterface IAllowlistManager {\\n\\n \\n    function addressIsAllowed(uint256 _commitmentId,address _account) external returns (bool allowed_) ;\\n \\n}\",\"keccak256\":\"0x98b599ad422554ec62b370cad7c7c976a8698b4eb416229e07282f7fc0925ad5\"},\"contracts/interfaces/allowlist/IEnumerableSetAllowlist.sol\":{\"content\":\"\\n\\n\\ninterface IEnumerableSetAllowlist {\\n \\n  function setAllowlist(\\n        uint256 _commitmentId,\\n        address[] calldata _addressList\\n    ) external;\\n \\n}\",\"keccak256\":\"0x4958565de4c7816382725a8603ed7bbabe32c9e13150f16ae0fbafe7d8cd3027\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161069538038061069583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516106046100916000396000818160b3015261010501526106046000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80638a38539f14610051578063b0b5316d14610066578063ded7f4ae1461008e578063e3fcf037146100ae575b600080fd5b61006461005f36600461042b565b6100ed565b005b6100796100743660046104bf565b61022b565b60405190151581526020015b60405180910390f35b6100a161009c3660046104ef565b61024c565b6040516100859190610508565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610085565b60405163144408ad60e11b81526004810184905283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632888115a90602401602060405180830381600087803b15801561015157600080fd5b505af1158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610555565b6001600160a01b0316336001600160a01b0316146101fb5760405162461bcd60e51b815260206004820152602560248201527f4d75737420626520746865206c656e646572206f662074686520636f6d6d697460448201526436b2b73a1760d91b606482015260840160405180910390fd5b600084815260208190526040812090818161021682826103f1565b50505050610225848484610266565b50505050565b600082815260208190526040812061024390836102fb565b90505b92915050565b60008181526020819052604090206060906102469061031d565b60005b818110156102c2576102af83838381811061028657610286610572565b905060200201602081019061029b9190610588565b600086815260208190526040902090610331565b50806102ba816105a5565b915050610269565b506040518381527f5096b93f393221659700def65554097cdcc366b69bfe7685c47edf3e49b4bbc69060200160405180910390a1505050565b6001600160a01b03811660009081526001830160205260408120541515610243565b6060600061032a83610346565b9392505050565b6000610243836001600160a01b0384166103a2565b60608160000180548060200260200160405190810160405280929190818152602001828054801561039657602002820191906000526020600020905b815481526020019060010190808311610382575b50505050509050919050565b60008181526001830160205260408120546103e957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610246565b506000610246565b508054600082559060005260206000209081019061040f9190610412565b50565b5b808211156104275760008155600101610413565b5090565b60008060006040848603121561044057600080fd5b83359250602084013567ffffffffffffffff8082111561045f57600080fd5b818601915086601f83011261047357600080fd5b81358181111561048257600080fd5b8760208260051b850101111561049757600080fd5b6020830194508093505050509250925092565b6001600160a01b038116811461040f57600080fd5b600080604083850312156104d257600080fd5b8235915060208301356104e4816104aa565b809150509250929050565b60006020828403121561050157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156105495783516001600160a01b031683529284019291840191600101610524565b50909695505050505050565b60006020828403121561056757600080fd5b815161032a816104aa565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561059a57600080fd5b813561032a816104aa565b60006000198214156105c757634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122094333801a10f3550ed6062a7c60b03372cabe8da7735f86fa7dd3ed3b884e13364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80638a38539f14610051578063b0b5316d14610066578063ded7f4ae1461008e578063e3fcf037146100ae575b600080fd5b61006461005f36600461042b565b6100ed565b005b6100796100743660046104bf565b61022b565b60405190151581526020015b60405180910390f35b6100a161009c3660046104ef565b61024c565b6040516100859190610508565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610085565b60405163144408ad60e11b81526004810184905283907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632888115a90602401602060405180830381600087803b15801561015157600080fd5b505af1158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610555565b6001600160a01b0316336001600160a01b0316146101fb5760405162461bcd60e51b815260206004820152602560248201527f4d75737420626520746865206c656e646572206f662074686520636f6d6d697460448201526436b2b73a1760d91b606482015260840160405180910390fd5b600084815260208190526040812090818161021682826103f1565b50505050610225848484610266565b50505050565b600082815260208190526040812061024390836102fb565b90505b92915050565b60008181526020819052604090206060906102469061031d565b60005b818110156102c2576102af83838381811061028657610286610572565b905060200201602081019061029b9190610588565b600086815260208190526040902090610331565b50806102ba816105a5565b915050610269565b506040518381527f5096b93f393221659700def65554097cdcc366b69bfe7685c47edf3e49b4bbc69060200160405180910390a1505050565b6001600160a01b03811660009081526001830160205260408120541515610243565b6060600061032a83610346565b9392505050565b6000610243836001600160a01b0384166103a2565b60608160000180548060200260200160405190810160405280929190818152602001828054801561039657602002820191906000526020600020905b815481526020019060010190808311610382575b50505050509050919050565b60008181526001830160205260408120546103e957508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610246565b506000610246565b508054600082559060005260206000209081019061040f9190610412565b50565b5b808211156104275760008155600101610413565b5090565b60008060006040848603121561044057600080fd5b83359250602084013567ffffffffffffffff8082111561045f57600080fd5b818601915086601f83011261047357600080fd5b81358181111561048257600080fd5b8760208260051b850101111561049757600080fd5b6020830194508093505050509250925092565b6001600160a01b038116811461040f57600080fd5b600080604083850312156104d257600080fd5b8235915060208301356104e4816104aa565b809150509250929050565b60006020828403121561050157600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156105495783516001600160a01b031683529284019291840191600101610524565b50909695505050505050565b60006020828403121561056757600080fd5b815161032a816104aa565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561059a57600080fd5b813561032a816104aa565b60006000198214156105c757634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122094333801a10f3550ed6062a7c60b03372cabe8da7735f86fa7dd3ed3b884e13364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23141,
        "contract": "contracts/allowlist/EnumerableSetAllowlist.sol:EnumerableSetAllowlist",
        "label": "allowList",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(AddressSet)4547_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(AddressSet)4547_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4547_storage"
      },
      "t_struct(AddressSet)4547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 4546,
            "contract": "contracts/allowlist/EnumerableSetAllowlist.sol:EnumerableSetAllowlist",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4232_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4232_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4227,
            "contract": "contracts/allowlist/EnumerableSetAllowlist.sol:EnumerableSetAllowlist",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4231,
            "contract": "contracts/allowlist/EnumerableSetAllowlist.sol:EnumerableSetAllowlist",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}