{
  "address": "0xf2b061a749EF7f983DD95Aa00C698815dBfde414",
  "abi": [
    {
      "inputs": [],
      "name": "NotPayable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerExitMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "BorrowerRevocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderExitMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderRevocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "MarketClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetBidExpirationTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "required",
          "type": "bool"
        }
      ],
      "name": "SetMarketBorrowerAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "feePct",
          "type": "uint16"
        }
      ],
      "name": "SetMarketFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRecipient",
          "type": "address"
        }
      ],
      "name": "SetMarketFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "required",
          "type": "bool"
        }
      ],
      "name": "SetMarketLenderAttestation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "SetMarketOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PaymentType",
          "name": "paymentType",
          "type": "uint8"
        }
      ],
      "name": "SetMarketPaymentType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "SetMarketURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum PaymentCycleType",
          "name": "paymentCycleType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "value",
          "type": "uint32"
        }
      ],
      "name": "SetPaymentCycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetPaymentCycleDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "duration",
          "type": "uint32"
        }
      ],
      "name": "SetPaymentDefaultDuration",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CURRENT_CODE_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "attestBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "attestBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "attestLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_expirationTime",
          "type": "uint256"
        }
      ],
      "name": "attestLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowerAttestationSchemaId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "borrowerExitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "closeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_requireLenderAttestation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_requireBorrowerAttestation",
          "type": "bool"
        },
        {
          "internalType": "enum PaymentType",
          "name": "_paymentType",
          "type": "uint8"
        },
        {
          "internalType": "enum PaymentCycleType",
          "name": "_paymentCycleType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_requireLenderAttestation",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_requireBorrowerAttestation",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marketId_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        }
      ],
      "name": "getAllVerifiedBorrowersForMarket",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        }
      ],
      "name": "getAllVerifiedLendersForMarket",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getBidExpirationTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketAttestationRequirements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "lenderAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "borrowerAttestationRequired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketData",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "loanExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "marketplaceFeePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "lenderAttestationRequired",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketplaceFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentCycle",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "enum PaymentCycleType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentDefaultDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPaymentType",
      "outputs": [
        {
          "internalType": "enum PaymentType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TellerAS",
          "name": "_tellerAS",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "isMarketClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPayable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedBorrower",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified_",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        }
      ],
      "name": "isVerifiedLender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isVerified_",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lenderAttestationSchemaId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "lenderExitMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "schema",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "attestor",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        }
      ],
      "name": "revokeBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_borrowerAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "revokeBorrower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "revokeLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lenderAddress",
          "type": "address"
        }
      ],
      "name": "revokeLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setBidExpirationTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_required",
          "type": "bool"
        }
      ],
      "name": "setBorrowerAttestationRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_required",
          "type": "bool"
        }
      ],
      "name": "setLenderAttestationRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_newPercent",
          "type": "uint16"
        }
      ],
      "name": "setMarketFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "setMarketFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "enum PaymentType",
          "name": "_newPaymentType",
          "type": "uint8"
        }
      ],
      "name": "setMarketPaymentType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setMarketURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "enum PaymentCycleType",
          "name": "_paymentCycleType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setPaymentCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_duration",
          "type": "uint32"
        }
      ],
      "name": "setPaymentDefaultDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tellerAS",
      "outputs": [
        {
          "internalType": "contract TellerAS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferMarketOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycleDuration",
          "type": "uint32"
        },
        {
          "internalType": "enum PaymentType",
          "name": "_newPaymentType",
          "type": "uint8"
        },
        {
          "internalType": "enum PaymentCycleType",
          "name": "_paymentCycleType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_paymentDefaultDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_bidExpirationTime",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_feePercent",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_borrowerAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_lenderAttestationRequired",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "_metadataURI",
          "type": "string"
        }
      ],
      "name": "updateMarketSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1e96ea7954d2c5f88fde3d8e8baa5e471a072c15ee5e8979f79308de169ad527",
  "receipt": {
    "to": null,
    "from": "0x5a5B978142C8F08Dd013901b50892baC49f3b700",
    "contractAddress": "0xf2b061a749EF7f983DD95Aa00C698815dBfde414",
    "transactionIndex": 13,
    "gasUsed": "2861892",
    "logsBloom": "0x
    "blockHash": "0xc1b88d15b29def1a8a25adf38e28889895cdc471cf00562ee197c81699c9e107",
    "transactionHash": "0x1e96ea7954d2c5f88fde3d8e8baa5e471a072c15ee5e8979f79308de169ad527",
    "logs": [],
    "blockNumber": 8688910,
    "cumulativeGasUsed": "3134892",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e0730cda169a6d13b8fda0f782338556",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NotPayable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"BorrowerRevocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderExitMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderRevocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"MarketClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetBidExpirationTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"SetMarketBorrowerAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"feePct\",\"type\":\"uint16\"}],\"name\":\"SetMarketFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"SetMarketFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"name\":\"SetMarketLenderAttestation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"SetMarketOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PaymentType\",\"name\":\"paymentType\",\"type\":\"uint8\"}],\"name\":\"SetMarketPaymentType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"SetMarketURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PaymentCycleType\",\"name\":\"paymentCycleType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"SetPaymentCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetPaymentCycleDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"}],\"name\":\"SetPaymentDefaultDuration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CURRENT_CODE_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"attestBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"attestBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"attestLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expirationTime\",\"type\":\"uint256\"}],\"name\":\"attestLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerAttestationSchemaId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"borrowerExitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"closeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_requireLenderAttestation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_requireBorrowerAttestation\",\"type\":\"bool\"},{\"internalType\":\"enum PaymentType\",\"name\":\"_paymentType\",\"type\":\"uint8\"},{\"internalType\":\"enum PaymentCycleType\",\"name\":\"_paymentCycleType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_requireLenderAttestation\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_requireBorrowerAttestation\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getAllVerifiedBorrowersForMarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"}],\"name\":\"getAllVerifiedLendersForMarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getBidExpirationTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketAttestationRequirements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"lenderAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowerAttestationRequired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"loanExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"marketplaceFeePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"lenderAttestationRequired\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarketplaceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentCycle\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"enum PaymentCycleType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentDefaultDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPaymentType\",\"outputs\":[{\"internalType\":\"enum PaymentType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TellerAS\",\"name\":\"_tellerAS\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"isMarketClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedBorrower\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified_\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"}],\"name\":\"isVerifiedLender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isVerified_\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lenderAttestationSchemaId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"lenderExitMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"schema\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"attestor\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"}],\"name\":\"revokeBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_borrowerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"revokeBorrower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"revokeLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lenderAddress\",\"type\":\"address\"}],\"name\":\"revokeLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setBidExpirationTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"setBorrowerAttestationRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_required\",\"type\":\"bool\"}],\"name\":\"setLenderAttestationRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_newPercent\",\"type\":\"uint16\"}],\"name\":\"setMarketFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"setMarketFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentType\",\"name\":\"_newPaymentType\",\"type\":\"uint8\"}],\"name\":\"setMarketPaymentType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setMarketURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"enum PaymentCycleType\",\"name\":\"_paymentCycleType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setPaymentCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"setPaymentDefaultDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tellerAS\",\"outputs\":[{\"internalType\":\"contract TellerAS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferMarketOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycleDuration\",\"type\":\"uint32\"},{\"internalType\":\"enum PaymentType\",\"name\":\"_newPaymentType\",\"type\":\"uint8\"},{\"internalType\":\"enum PaymentCycleType\",\"name\":\"_paymentCycleType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_paymentDefaultDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_bidExpirationTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_feePercent\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_borrowerAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lenderAttestationRequired\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_metadataURI\",\"type\":\"string\"}],\"name\":\"updateMarketSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attestBorrower(uint256,address,uint256)\":{\"details\":\"See {_attestStakeholder}.\"},\"attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {_attestStakeholderViaDelegation}.\"},\"attestLender(uint256,address,uint256)\":{\"details\":\"See {_attestStakeholder}.\"},\"attestLender(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {_attestStakeholderViaDelegation}.\"},\"borrowerExitMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID to leave.\"}},\"closeMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID for the market to close.\"}},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"details\":\"Uses the default EMI payment type.\",\"params\":{\"_bidExpirationTime\":\"Length of time in seconds before pending bids expire.\",\"_initialOwner\":\"Address who will initially own the market.\",\"_paymentCycleDuration\":\"Length of time in seconds before a bid's next payment is required to be made.\",\"_paymentDefaultDuration\":\"Length of time in seconds before a loan is considered in default for non-payment.\",\"_requireBorrowerAttestation\":\"Boolean that indicates if borrowers require attestation to join market.\",\"_requireLenderAttestation\":\"Boolean that indicates if lenders require attestation to join market.\",\"_uri\":\"URI string to get metadata details about the market.\"},\"returns\":{\"marketId_\":\"The market ID of the newly created market.\"}},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,uint8,string)\":{\"params\":{\"_bidExpirationTime\":\"Length of time in seconds before pending bids expire.\",\"_initialOwner\":\"Address who will initially own the market.\",\"_paymentCycleDuration\":\"Length of time in seconds before a bid's next payment is required to be made.\",\"_paymentCycleType\":\"The payment cycle type for loans in the market - Seconds or Monthly\",\"_paymentDefaultDuration\":\"Length of time in seconds before a loan is considered in default for non-payment.\",\"_paymentType\":\"The payment type for loans in the market.\",\"_requireBorrowerAttestation\":\"Boolean that indicates if borrowers require attestation to join market.\",\"_requireLenderAttestation\":\"Boolean that indicates if lenders require attestation to join market.\",\"_uri\":\"URI string to get metadata details about the market.\"},\"returns\":{\"marketId_\":\"The market ID of the newly created market.\"}},\"getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)\":{\"params\":{\"_marketId\":\"The ID of the market.\",\"_page\":\"Page index to start from.\",\"_perPage\":\"Number of items in a page to return.\"},\"returns\":{\"_0\":\"Array of addresses that have been added to a market.\"}},\"getAllVerifiedLendersForMarket(uint256,uint256,uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_page\":\"Page index to start from.\",\"_perPage\":\"Number of items in a page to return.\"},\"returns\":{\"_0\":\"Array of addresses that have been added to a market.\"}},\"getMarketAttestationRequirements(uint256)\":{\"params\":{\"_marketId\":\"The ID of the market.\"}},\"getMarketData(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"}},\"getMarketFeeRecipient(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"The address of a market's fee recipient.\"}},\"getMarketOwner(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"The address of a market's owner.\"}},\"getMarketURI(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"URI of a market's metadata.\"}},\"getMarketplaceFee(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"fee\":\"in basis points\"}},\"getPaymentCycle(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"Duration of a loan until it is delinquent.\",\"_1\":\"The type of payment cycle for loans in the market.\"}},\"getPaymentDefaultDuration(uint256)\":{\"params\":{\"_marketId\":\"The ID of a market.\"},\"returns\":{\"_0\":\"Duration of a loan repayment interval until it is default.\"}},\"getPaymentType(uint256)\":{\"params\":{\"_marketId\":\"the ID of the market.\"},\"returns\":{\"_0\":\"The type of payment for loans in the market.\"}},\"isMarketClosed(uint256)\":{\"params\":{\"_marketId\":\"The market ID for the market to check.\"}},\"isPayable()\":{\"details\":\"Returns whether the resolver supports ETH transfers\"},\"isVerifiedBorrower(uint256,address)\":{\"params\":{\"_borrowerAddress\":\"Address of the borrower to check.\",\"_marketId\":\"The ID of a market.\"},\"returns\":{\"isVerified_\":\"Boolean indicating if a borrower has been added to a market.\",\"uuid_\":\"Bytes32 representing the UUID of the borrower.\"}},\"isVerifiedLender(uint256,address)\":{\"params\":{\"_lenderAddress\":\"Address to check.\",\"_marketId\":\"The ID of a market.\"},\"returns\":{\"isVerified_\":\"Boolean indicating if a lender has been added to a market.\",\"uuid_\":\"Bytes32 representing the UUID of the lender.\"}},\"lenderExitMarket(uint256)\":{\"params\":{\"_marketId\":\"The market ID to leave.\"}},\"resolve(address,bytes,bytes,uint256,address)\":{\"details\":\"This function must only be called by the `attestLender` function above.\",\"params\":{\"\":\"@param attestor Market owner's address who signed the attestation.\",\"data\":\"Data the must include the market ID and lender's address\",\"recipient\":\"Lender's address who is being attested.\",\"schema\":\"The schema used for the attestation.\"},\"returns\":{\"_0\":\"Boolean indicating the attestation was successful.\"}},\"revokeBorrower(uint256,address)\":{\"details\":\"See {_revokeStakeholder}.\"},\"revokeBorrower(uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"See {_revokeStakeholderViaDelegation}.\"},\"revokeLender(uint256,address)\":{\"details\":\"See {_revokeStakeholder}.\"},\"revokeLender(uint256,address,uint8,bytes32,bytes32)\":{\"details\":\"See {_revokeStakeholderViaDelegation}.\"},\"setBorrowerAttestationRequired(uint256,bool)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_required\":\"Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner.\"}},\"setLenderAttestationRequired(uint256,bool)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_required\":\"Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner.\"}},\"setMarketFeePercent(uint256,uint16)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_newPercent\":\"The percentage fee in basis points. Requirements: - The caller must be the current owner.\"}},\"setMarketFeeRecipient(uint256,address)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_recipient\":\"Address of the new fee recipient. Requirements: - The caller must be the current owner.\"}},\"setMarketPaymentType(uint256,uint8)\":{\"params\":{\"_marketId\":\"The ID of the market.\",\"_newPaymentType\":\"The payment type for the market.\"}},\"setMarketURI(uint256,string)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_uri\":\"A URI that points to a market's metadata. Requirements: - The caller must be the current owner.\"}},\"setPaymentCycle(uint256,uint8,uint32)\":{\"params\":{\"_duration\":\"Delinquency duration for new loans\",\"_marketId\":\"The ID of a market.\",\"_paymentCycleType\":\"Cycle type (seconds or monthly)\"}},\"setPaymentDefaultDuration(uint256,uint32)\":{\"params\":{\"_duration\":\"Default duration for new loans\",\"_marketId\":\"The ID of a market.\"}},\"transferMarketOwnership(uint256,address)\":{\"params\":{\"_marketId\":\"The ID of a market.\",\"_newOwner\":\"Address of the new market owner. Requirements: - The caller must be the current owner.\"}},\"updateMarketSettings(uint256,uint32,uint8,uint8,uint32,uint32,uint16,bool,bool,string)\":{\"params\":{\"_bidExpirationTime\":\"Duration of time before a bid is considered out of date\",\"_marketId\":\"The ID of a market.\",\"_metadataURI\":\"A URI that points to a market's metadata. Requirements: - The caller must be the current owner.\",\"_newPaymentType\":\"The payment type for the market.\",\"_paymentCycleDuration\":\"Delinquency duration for new loans\",\"_paymentCycleType\":\"The payment cycle type for loans in the market - Seconds or Monthly\",\"_paymentDefaultDuration\":\"Default duration for new loans\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CURRENT_CODE_VERSION()\":{\"notice\":\"Constant Variables *\"},\"attestBorrower(uint256,address,uint256)\":{\"notice\":\"Adds a borrower to a market.\"},\"attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Adds a borrower to a market via delegated attestation.\"},\"attestLender(uint256,address,uint256)\":{\"notice\":\"Adds a lender to a market.\"},\"attestLender(uint256,address,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Adds a lender to a market via delegated attestation.\"},\"borrowerExitMarket(uint256)\":{\"notice\":\"Allows a borrower to voluntarily leave a market.\"},\"closeMarket(uint256)\":{\"notice\":\"Closes a market so new bids cannot be added.\"},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)\":{\"notice\":\"Creates a new market.\"},\"createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,uint8,string)\":{\"notice\":\"Creates a new market.\"},\"getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)\":{\"notice\":\"Gets addresses of all attested borrowers.\"},\"getAllVerifiedLendersForMarket(uint256,uint256,uint256)\":{\"notice\":\"Gets addresses of all attested lenders.\"},\"getMarketAttestationRequirements(uint256)\":{\"notice\":\"Gets the attestation requirements for a given market.\"},\"getMarketData(uint256)\":{\"notice\":\"Gets the data associated with a market.\"},\"getMarketFeeRecipient(uint256)\":{\"notice\":\"Gets the fee recipient of a market.\"},\"getMarketOwner(uint256)\":{\"notice\":\"Gets the address of a market's owner.\"},\"getMarketURI(uint256)\":{\"notice\":\"Gets the metadata URI of a market.\"},\"getMarketplaceFee(uint256)\":{\"notice\":\"Gets the marketplace fee in basis points\"},\"getPaymentCycle(uint256)\":{\"notice\":\"Gets the loan delinquent duration of a market.\"},\"getPaymentDefaultDuration(uint256)\":{\"notice\":\"Gets the loan default duration of a market.\"},\"getPaymentType(uint256)\":{\"notice\":\"Get the payment type of a market.\"},\"isMarketClosed(uint256)\":{\"notice\":\"Returns the status of a market being open or closed for new bids.\"},\"isVerifiedBorrower(uint256,address)\":{\"notice\":\"Checks if a borrower has been attested and added to a market.\"},\"isVerifiedLender(uint256,address)\":{\"notice\":\"Checks if a lender has been attested and added to a market.\"},\"lenderExitMarket(uint256)\":{\"notice\":\"Allows a lender to voluntarily leave a market.\"},\"resolve(address,bytes,bytes,uint256,address)\":{\"notice\":\"Verifies an attestation is valid.\"},\"revokeBorrower(uint256,address)\":{\"notice\":\"Removes a borrower from an market.\"},\"revokeBorrower(uint256,address,uint8,bytes32,bytes32)\":{\"notice\":\"Removes a borrower from a market via delegated revocation.\"},\"revokeLender(uint256,address)\":{\"notice\":\"Removes a lender from an market.\"},\"revokeLender(uint256,address,uint8,bytes32,bytes32)\":{\"notice\":\"Removes a borrower from a market via delegated revocation.\"},\"setBorrowerAttestationRequired(uint256,bool)\":{\"notice\":\"Enable/disables market whitelist for borrowers.\"},\"setLenderAttestationRequired(uint256,bool)\":{\"notice\":\"Enable/disables market whitelist for lenders.\"},\"setMarketFeePercent(uint256,uint16)\":{\"notice\":\"Sets the fee for the market.\"},\"setMarketFeeRecipient(uint256,address)\":{\"notice\":\"Sets the fee recipient address for a market.\"},\"setMarketPaymentType(uint256,uint8)\":{\"notice\":\"Set the payment type for the market.\"},\"setMarketURI(uint256,string)\":{\"notice\":\"Sets the metadata URI for a market.\"},\"setPaymentCycle(uint256,uint8,uint32)\":{\"notice\":\"Sets the duration of new loans for this market before they turn delinquent.Changing this value does not change the terms of existing loans for this market.\"},\"setPaymentDefaultDuration(uint256,uint32)\":{\"notice\":\"Sets the duration of new loans for this market before they turn defaulted.Changing this value does not change the terms of existing loans for this market.\"},\"transferMarketOwnership(uint256,address)\":{\"notice\":\"Transfers ownership of a marketplace.\"},\"updateMarketSettings(uint256,uint32,uint8,uint8,uint32,uint32,uint16,bool,bool,string)\":{\"notice\":\"Updates multiple market settings for a given market.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketRegistry.sol\":\"MarketRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/EAS/TellerAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../Types.sol\\\";\\nimport \\\"../interfaces/IEAS.sol\\\";\\nimport \\\"../interfaces/IASRegistry.sol\\\";\\n\\n/**\\n * @title TellerAS - Teller Attestation Service - based on EAS - Ethereum Attestation Service\\n */\\ncontract TellerAS is IEAS {\\n    error AccessDenied();\\n    error AlreadyRevoked();\\n    error InvalidAttestation();\\n    error InvalidExpirationTime();\\n    error InvalidOffset();\\n    error InvalidRegistry();\\n    error InvalidSchema();\\n    error InvalidVerifier();\\n    error NotFound();\\n    error NotPayable();\\n\\n    string public constant VERSION = \\\"0.8\\\";\\n\\n    // A terminator used when concatenating and hashing multiple fields.\\n    string private constant HASH_TERMINATOR = \\\"@\\\";\\n\\n    // The AS global registry.\\n    IASRegistry private immutable _asRegistry;\\n\\n    // The EIP712 verifier used to verify signed attestations.\\n    IEASEIP712Verifier private immutable _eip712Verifier;\\n\\n    // A mapping between attestations and their related attestations.\\n    mapping(bytes32 => bytes32[]) private _relatedAttestations;\\n\\n    // A mapping between an account and its received attestations.\\n    mapping(address => mapping(bytes32 => bytes32[]))\\n        private _receivedAttestations;\\n\\n    // A mapping between an account and its sent attestations.\\n    mapping(address => mapping(bytes32 => bytes32[])) private _sentAttestations;\\n\\n    // A mapping between a schema and its attestations.\\n    mapping(bytes32 => bytes32[]) private _schemaAttestations;\\n\\n    // The global mapping between attestations and their UUIDs.\\n    mapping(bytes32 => Attestation) private _db;\\n\\n    // The global counter for the total number of attestations.\\n    uint256 private _attestationsCount;\\n\\n    bytes32 private _lastUUID;\\n\\n    /**\\n     * @dev Creates a new EAS instance.\\n     *\\n     * @param registry The address of the global AS registry.\\n     * @param verifier The address of the EIP712 verifier.\\n     */\\n    constructor(IASRegistry registry, IEASEIP712Verifier verifier) {\\n        if (address(registry) == address(0x0)) {\\n            revert InvalidRegistry();\\n        }\\n\\n        if (address(verifier) == address(0x0)) {\\n            revert InvalidVerifier();\\n        }\\n\\n        _asRegistry = registry;\\n        _eip712Verifier = verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getASRegistry() external view override returns (IASRegistry) {\\n        return _asRegistry;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getEIP712Verifier()\\n        external\\n        view\\n        override\\n        returns (IEASEIP712Verifier)\\n    {\\n        return _eip712Verifier;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestationsCount() external view override returns (uint256) {\\n        return _attestationsCount;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) public payable virtual override returns (bytes32) {\\n        return\\n            _attest(\\n                recipient,\\n                schema,\\n                expirationTime,\\n                refUUID,\\n                data,\\n                msg.sender\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual override returns (bytes32) {\\n        _eip712Verifier.attest(\\n            recipient,\\n            schema,\\n            expirationTime,\\n            refUUID,\\n            data,\\n            attester,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        return\\n            _attest(recipient, schema, expirationTime, refUUID, data, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revoke(bytes32 uuid) public virtual override {\\n        return _revoke(uuid, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        _eip712Verifier.revoke(uuid, attester, v, r, s);\\n\\n        _revoke(uuid, attester);\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (Attestation memory)\\n    {\\n        return _db[uuid];\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationValid(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _db[uuid].uuid != 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function isAttestationActive(bytes32 uuid)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            isAttestationValid(uuid) &&\\n            _db[uuid].expirationTime >= block.timestamp &&\\n            _db[uuid].revocationTime == 0;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _receivedAttestations[recipient][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _receivedAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _sentAttestations[attester][schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _sentAttestations[recipient][schema].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _relatedAttestations[uuid],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _relatedAttestations[uuid].length;\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view override returns (bytes32[] memory) {\\n        return\\n            _sliceUUIDs(\\n                _schemaAttestations[schema],\\n                start,\\n                length,\\n                reverseOrder\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IEAS\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _schemaAttestations[schema].length;\\n    }\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function _attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester\\n    ) private returns (bytes32) {\\n        if (expirationTime <= block.timestamp) {\\n            revert InvalidExpirationTime();\\n        }\\n\\n        IASRegistry.ASRecord memory asRecord = _asRegistry.getAS(schema);\\n        if (asRecord.uuid == EMPTY_UUID) {\\n            revert InvalidSchema();\\n        }\\n\\n        IASResolver resolver = asRecord.resolver;\\n        if (address(resolver) != address(0x0)) {\\n            if (msg.value != 0 && !resolver.isPayable()) {\\n                revert NotPayable();\\n            }\\n\\n            if (\\n                !resolver.resolve{ value: msg.value }(\\n                    recipient,\\n                    asRecord.schema,\\n                    data,\\n                    expirationTime,\\n                    attester\\n                )\\n            ) {\\n                revert InvalidAttestation();\\n            }\\n        }\\n\\n        Attestation memory attestation = Attestation({\\n            uuid: EMPTY_UUID,\\n            schema: schema,\\n            recipient: recipient,\\n            attester: attester,\\n            time: block.timestamp,\\n            expirationTime: expirationTime,\\n            revocationTime: 0,\\n            refUUID: refUUID,\\n            data: data\\n        });\\n\\n        _lastUUID = _getUUID(attestation);\\n        attestation.uuid = _lastUUID;\\n\\n        _receivedAttestations[recipient][schema].push(_lastUUID);\\n        _sentAttestations[attester][schema].push(_lastUUID);\\n        _schemaAttestations[schema].push(_lastUUID);\\n\\n        _db[_lastUUID] = attestation;\\n        _attestationsCount++;\\n\\n        if (refUUID != 0) {\\n            if (!isAttestationValid(refUUID)) {\\n                revert NotFound();\\n            }\\n\\n            _relatedAttestations[refUUID].push(_lastUUID);\\n        }\\n\\n        emit Attested(recipient, attester, _lastUUID, schema);\\n\\n        return _lastUUID;\\n    }\\n\\n    function getLastUUID() external view returns (bytes32) {\\n        return _lastUUID;\\n    }\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     */\\n    function _revoke(bytes32 uuid, address attester) private {\\n        Attestation storage attestation = _db[uuid];\\n        if (attestation.uuid == EMPTY_UUID) {\\n            revert NotFound();\\n        }\\n\\n        if (attestation.attester != attester) {\\n            revert AccessDenied();\\n        }\\n\\n        if (attestation.revocationTime != 0) {\\n            revert AlreadyRevoked();\\n        }\\n\\n        attestation.revocationTime = block.timestamp;\\n\\n        emit Revoked(attestation.recipient, attester, uuid, attestation.schema);\\n    }\\n\\n    /**\\n     * @dev Calculates a UUID for a given attestation.\\n     *\\n     * @param attestation The input attestation.\\n     *\\n     * @return Attestation UUID.\\n     */\\n    function _getUUID(Attestation memory attestation)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    attestation.schema,\\n                    attestation.recipient,\\n                    attestation.attester,\\n                    attestation.time,\\n                    attestation.expirationTime,\\n                    attestation.data,\\n                    HASH_TERMINATOR,\\n                    _attestationsCount\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns a slice in an array of attestation UUIDs.\\n     *\\n     * @param uuids The array of attestation UUIDs.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function _sliceUUIDs(\\n        bytes32[] memory uuids,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) private pure returns (bytes32[] memory) {\\n        uint256 attestationsLength = uuids.length;\\n        if (attestationsLength == 0) {\\n            return new bytes32[](0);\\n        }\\n\\n        if (start >= attestationsLength) {\\n            revert InvalidOffset();\\n        }\\n\\n        uint256 len = length;\\n        if (attestationsLength < start + length) {\\n            len = attestationsLength - start;\\n        }\\n\\n        bytes32[] memory res = new bytes32[](len);\\n\\n        for (uint256 i = 0; i < len; ++i) {\\n            res[i] = uuids[\\n                reverseOrder ? attestationsLength - (start + i + 1) : start + i\\n            ];\\n        }\\n\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x01848d2b9b7815144137d3ad654ac3246dd740f03e9e951ecf70374d71f8e354\",\"license\":\"MIT\"},\"contracts/EAS/TellerASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../interfaces/IASResolver.sol\\\";\\n\\n/**\\n * @title A base resolver contract\\n */\\nabstract contract TellerASResolver is IASResolver {\\n    error NotPayable();\\n\\n    function isPayable() public pure virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    receive() external payable virtual {\\n        if (!isPayable()) {\\n            revert NotPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8002d1725fd711dacd001e06d98fe2afc4814d2939d06df70c5b3ffcf5ec7f15\",\"license\":\"MIT\"},\"contracts/MarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Contracts\\nimport \\\"./EAS/TellerAS.sol\\\";\\nimport \\\"./EAS/TellerASResolver.sol\\\";\\n\\n//must continue to use this so storage slots are not broken\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n// Interfaces\\nimport \\\"./interfaces/IMarketRegistry.sol\\\";\\n\\n// Libraries\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { PaymentType } from \\\"./libraries/V2Calculations.sol\\\";\\n\\ncontract MarketRegistry is\\n    IMarketRegistry,\\n    Initializable,\\n    Context,\\n    TellerASResolver\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /** Constant Variables **/\\n\\n    uint256 public constant CURRENT_CODE_VERSION = 8;\\n\\n    /* Storage Variables */\\n\\n    struct Marketplace {\\n        address owner;\\n        string metadataURI;\\n        uint16 marketplaceFeePercent; // 10000 is 100%\\n        bool lenderAttestationRequired;\\n        EnumerableSet.AddressSet verifiedLendersForMarket;\\n        mapping(address => bytes32) lenderAttestationIds;\\n        uint32 paymentCycleDuration; // unix time (seconds)\\n        uint32 paymentDefaultDuration; //unix time\\n        uint32 bidExpirationTime; //unix time\\n        bool borrowerAttestationRequired;\\n        EnumerableSet.AddressSet verifiedBorrowersForMarket;\\n        mapping(address => bytes32) borrowerAttestationIds;\\n        address feeRecipient;\\n        PaymentType paymentType;\\n        PaymentCycleType paymentCycleType;\\n    }\\n\\n    bytes32 public lenderAttestationSchemaId;\\n\\n    mapping(uint256 => Marketplace) internal markets;\\n    mapping(bytes32 => uint256) internal __uriToId; //DEPRECATED\\n    uint256 public marketCount;\\n    bytes32 private _attestingSchemaId;\\n    bytes32 public borrowerAttestationSchemaId;\\n\\n    uint256 public version;\\n\\n    mapping(uint256 => bool) private marketIsClosed;\\n\\n    TellerAS public tellerAS;\\n\\n    /* Modifiers */\\n\\n    modifier ownsMarket(uint256 _marketId) {\\n        require(markets[_marketId].owner == _msgSender(), \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier withAttestingSchema(bytes32 schemaId) {\\n        _attestingSchemaId = schemaId;\\n        _;\\n        _attestingSchemaId = bytes32(0);\\n    }\\n\\n    /* Events */\\n\\n    event MarketCreated(address indexed owner, uint256 marketId);\\n    event SetMarketURI(uint256 marketId, string uri);\\n    event SetPaymentCycleDuration(uint256 marketId, uint32 duration); // DEPRECATED - used for subgraph reference\\n    event SetPaymentCycle(\\n        uint256 marketId,\\n        PaymentCycleType paymentCycleType,\\n        uint32 value\\n    );\\n    event SetPaymentDefaultDuration(uint256 marketId, uint32 duration);\\n    event SetBidExpirationTime(uint256 marketId, uint32 duration);\\n    event SetMarketFee(uint256 marketId, uint16 feePct);\\n    event LenderAttestation(uint256 marketId, address lender);\\n    event BorrowerAttestation(uint256 marketId, address borrower);\\n    event LenderRevocation(uint256 marketId, address lender);\\n    event BorrowerRevocation(uint256 marketId, address borrower);\\n    event MarketClosed(uint256 marketId);\\n    event LenderExitMarket(uint256 marketId, address lender);\\n    event BorrowerExitMarket(uint256 marketId, address borrower);\\n    event SetMarketOwner(uint256 marketId, address newOwner);\\n    event SetMarketFeeRecipient(uint256 marketId, address newRecipient);\\n    event SetMarketLenderAttestation(uint256 marketId, bool required);\\n    event SetMarketBorrowerAttestation(uint256 marketId, bool required);\\n    event SetMarketPaymentType(uint256 marketId, PaymentType paymentType);\\n\\n    /* External Functions */\\n\\n    function initialize(TellerAS _tellerAS) external initializer {\\n        tellerAS = _tellerAS;\\n\\n        lenderAttestationSchemaId = tellerAS.getASRegistry().register(\\n            \\\"(uint256 marketId, address lenderAddress)\\\",\\n            this\\n        );\\n        borrowerAttestationSchemaId = tellerAS.getASRegistry().register(\\n            \\\"(uint256 marketId, address borrowerAddress)\\\",\\n            this\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _paymentType The payment type for loans in the market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @param _paymentCycleType The payment cycle type for loans in the market - Seconds or Monthly\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        PaymentType _paymentType,\\n        PaymentCycleType _paymentCycleType,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_) {\\n        marketId_ = _createMarket(\\n            _initialOwner,\\n            _paymentCycleDuration,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _requireLenderAttestation,\\n            _requireBorrowerAttestation,\\n            _paymentType,\\n            _paymentCycleType,\\n            _uri\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @dev Uses the default EMI payment type.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_) {\\n        marketId_ = _createMarket(\\n            _initialOwner,\\n            _paymentCycleDuration,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _requireLenderAttestation,\\n            _requireBorrowerAttestation,\\n            PaymentType.EMI,\\n            PaymentCycleType.Seconds,\\n            _uri\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new market.\\n     * @param _initialOwner Address who will initially own the market.\\n     * @param _paymentCycleDuration Length of time in seconds before a bid's next payment is required to be made.\\n     * @param _paymentDefaultDuration Length of time in seconds before a loan is considered in default for non-payment.\\n     * @param _bidExpirationTime Length of time in seconds before pending bids expire.\\n     * @param _requireLenderAttestation Boolean that indicates if lenders require attestation to join market.\\n     * @param _requireBorrowerAttestation Boolean that indicates if borrowers require attestation to join market.\\n     * @param _paymentType The payment type for loans in the market.\\n     * @param _uri URI string to get metadata details about the market.\\n     * @param _paymentCycleType The payment cycle type for loans in the market - Seconds or Monthly\\n     * @return marketId_ The market ID of the newly created market.\\n     */\\n    function _createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        PaymentType _paymentType,\\n        PaymentCycleType _paymentCycleType,\\n        string calldata _uri\\n    ) internal returns (uint256 marketId_) {\\n        require(_initialOwner != address(0), \\\"Invalid owner address\\\");\\n        // Increment market ID counter\\n        marketId_ = ++marketCount;\\n\\n        // Set the market owner\\n        markets[marketId_].owner = _initialOwner;\\n\\n        // Initialize market settings\\n        _setMarketSettings(\\n            marketId_,\\n            _paymentCycleDuration,\\n            _paymentType,\\n            _paymentCycleType,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _requireBorrowerAttestation,\\n            _requireLenderAttestation,\\n            _uri\\n        );\\n\\n        emit MarketCreated(_initialOwner, marketId_);\\n    }\\n\\n    /**\\n     * @notice Closes a market so new bids cannot be added.\\n     * @param _marketId The market ID for the market to close.\\n     */\\n\\n    function closeMarket(uint256 _marketId) public ownsMarket(_marketId) {\\n        if (!marketIsClosed[_marketId]) {\\n            marketIsClosed[_marketId] = true;\\n\\n            emit MarketClosed(_marketId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the status of a market being open or closed for new bids.\\n     * @param _marketId The market ID for the market to check.\\n     */\\n    function isMarketClosed(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return marketIsClosed[_marketId];\\n    }\\n\\n    /**\\n     * @notice Adds a lender to a market.\\n     * @dev See {_attestStakeholder}.\\n     */\\n    function attestLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint256 _expirationTime\\n    ) external {\\n        _attestStakeholder(_marketId, _lenderAddress, _expirationTime, true);\\n    }\\n\\n    /**\\n     * @notice Adds a lender to a market via delegated attestation.\\n     * @dev See {_attestStakeholderViaDelegation}.\\n     */\\n    function attestLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint256 _expirationTime,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _attestStakeholderViaDelegation(\\n            _marketId,\\n            _lenderAddress,\\n            _expirationTime,\\n            true,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes a lender from an market.\\n     * @dev See {_revokeStakeholder}.\\n     */\\n    function revokeLender(uint256 _marketId, address _lenderAddress) external {\\n        _revokeStakeholder(_marketId, _lenderAddress, true);\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from a market via delegated revocation.\\n     * @dev See {_revokeStakeholderViaDelegation}.\\n     */\\n    function revokeLender(\\n        uint256 _marketId,\\n        address _lenderAddress,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _revokeStakeholderViaDelegation(\\n            _marketId,\\n            _lenderAddress,\\n            true,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows a lender to voluntarily leave a market.\\n     * @param _marketId The market ID to leave.\\n     */\\n    function lenderExitMarket(uint256 _marketId) external {\\n        // Remove lender address from market set\\n        bool response = markets[_marketId].verifiedLendersForMarket.remove(\\n            _msgSender()\\n        );\\n        if (response) {\\n            emit LenderExitMarket(_marketId, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a borrower to a market.\\n     * @dev See {_attestStakeholder}.\\n     */\\n    function attestBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint256 _expirationTime\\n    ) external {\\n        _attestStakeholder(_marketId, _borrowerAddress, _expirationTime, false);\\n    }\\n\\n    /**\\n     * @notice Adds a borrower to a market via delegated attestation.\\n     * @dev See {_attestStakeholderViaDelegation}.\\n     */\\n    function attestBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint256 _expirationTime,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _attestStakeholderViaDelegation(\\n            _marketId,\\n            _borrowerAddress,\\n            _expirationTime,\\n            false,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from an market.\\n     * @dev See {_revokeStakeholder}.\\n     */\\n    function revokeBorrower(uint256 _marketId, address _borrowerAddress)\\n        external\\n    {\\n        _revokeStakeholder(_marketId, _borrowerAddress, false);\\n    }\\n\\n    /**\\n     * @notice Removes a borrower from a market via delegated revocation.\\n     * @dev See {_revokeStakeholderViaDelegation}.\\n     */\\n    function revokeBorrower(\\n        uint256 _marketId,\\n        address _borrowerAddress,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        _revokeStakeholderViaDelegation(\\n            _marketId,\\n            _borrowerAddress,\\n            false,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    /**\\n     * @notice Allows a borrower to voluntarily leave a market.\\n     * @param _marketId The market ID to leave.\\n     */\\n    function borrowerExitMarket(uint256 _marketId) external {\\n        // Remove borrower address from market set\\n        bool response = markets[_marketId].verifiedBorrowersForMarket.remove(\\n            _msgSender()\\n        );\\n        if (response) {\\n            emit BorrowerExitMarket(_marketId, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @notice Verifies an attestation is valid.\\n     * @dev This function must only be called by the `attestLender` function above.\\n     * @param recipient Lender's address who is being attested.\\n     * @param schema The schema used for the attestation.\\n     * @param data Data the must include the market ID and lender's address\\n     * @param\\n     * @param attestor Market owner's address who signed the attestation.\\n     * @return Boolean indicating the attestation was successful.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256 /* expirationTime */,\\n        address attestor\\n    ) external payable override returns (bool) {\\n        bytes32 attestationSchemaId = keccak256(\\n            abi.encodePacked(schema, address(this))\\n        );\\n        (uint256 marketId, address lenderAddress) = abi.decode(\\n            data,\\n            (uint256, address)\\n        );\\n        return\\n            (_attestingSchemaId == attestationSchemaId &&\\n                recipient == lenderAddress &&\\n                attestor == markets[marketId].owner) ||\\n            attestor == address(this);\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of a marketplace.\\n     * @param _marketId The ID of a market.\\n     * @param _newOwner Address of the new market owner.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function transferMarketOwnership(uint256 _marketId, address _newOwner)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        markets[_marketId].owner = _newOwner;\\n        emit SetMarketOwner(_marketId, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Updates multiple market settings for a given market.\\n     * @param _marketId The ID of a market.\\n     * @param _paymentCycleDuration Delinquency duration for new loans\\n     * @param _newPaymentType The payment type for the market.\\n     * @param _paymentCycleType The payment cycle type for loans in the market - Seconds or Monthly\\n     * @param _paymentDefaultDuration Default duration for new loans\\n     * @param _bidExpirationTime Duration of time before a bid is considered out of date\\n     * @param _metadataURI A URI that points to a market's metadata.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function updateMarketSettings(\\n        uint256 _marketId,\\n        uint32 _paymentCycleDuration,\\n        PaymentType _newPaymentType,\\n        PaymentCycleType _paymentCycleType,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _borrowerAttestationRequired,\\n        bool _lenderAttestationRequired,\\n        string calldata _metadataURI\\n    ) public ownsMarket(_marketId) {\\n        _setMarketSettings(\\n            _marketId,\\n            _paymentCycleDuration,\\n            _newPaymentType,\\n            _paymentCycleType,\\n            _paymentDefaultDuration,\\n            _bidExpirationTime,\\n            _feePercent,\\n            _borrowerAttestationRequired,\\n            _lenderAttestationRequired,\\n            _metadataURI\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets the fee recipient address for a market.\\n     * @param _marketId The ID of a market.\\n     * @param _recipient Address of the new fee recipient.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketFeeRecipient(uint256 _marketId, address _recipient)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        markets[_marketId].feeRecipient = _recipient;\\n        emit SetMarketFeeRecipient(_marketId, _recipient);\\n    }\\n\\n    /**\\n     * @notice Sets the metadata URI for a market.\\n     * @param _marketId The ID of a market.\\n     * @param _uri A URI that points to a market's metadata.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketURI(uint256 _marketId, string calldata _uri)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        //We do string comparison by checking the hashes of the strings against one another\\n        if (\\n            keccak256(abi.encodePacked(_uri)) !=\\n            keccak256(abi.encodePacked(markets[_marketId].metadataURI))\\n        ) {\\n            markets[_marketId].metadataURI = _uri;\\n\\n            emit SetMarketURI(_marketId, _uri);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the duration of new loans for this market before they turn delinquent.\\n     * @notice Changing this value does not change the terms of existing loans for this market.\\n     * @param _marketId The ID of a market.\\n     * @param _paymentCycleType Cycle type (seconds or monthly)\\n     * @param _duration Delinquency duration for new loans\\n     */\\n    function setPaymentCycle(\\n        uint256 _marketId,\\n        PaymentCycleType _paymentCycleType,\\n        uint32 _duration\\n    ) public ownsMarket(_marketId) {\\n        require(\\n            (_paymentCycleType == PaymentCycleType.Seconds) ||\\n                (_paymentCycleType == PaymentCycleType.Monthly &&\\n                    _duration == 0),\\n            \\\"monthly payment cycle duration cannot be set\\\"\\n        );\\n        Marketplace storage market = markets[_marketId];\\n        uint32 duration = _paymentCycleType == PaymentCycleType.Seconds\\n            ? _duration\\n            : 30 days;\\n        if (\\n            _paymentCycleType != market.paymentCycleType ||\\n            duration != market.paymentCycleDuration\\n        ) {\\n            markets[_marketId].paymentCycleType = _paymentCycleType;\\n            markets[_marketId].paymentCycleDuration = duration;\\n\\n            emit SetPaymentCycle(_marketId, _paymentCycleType, duration);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the duration of new loans for this market before they turn defaulted.\\n     * @notice Changing this value does not change the terms of existing loans for this market.\\n     * @param _marketId The ID of a market.\\n     * @param _duration Default duration for new loans\\n     */\\n    function setPaymentDefaultDuration(uint256 _marketId, uint32 _duration)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_duration != markets[_marketId].paymentDefaultDuration) {\\n            markets[_marketId].paymentDefaultDuration = _duration;\\n\\n            emit SetPaymentDefaultDuration(_marketId, _duration);\\n        }\\n    }\\n\\n    function setBidExpirationTime(uint256 _marketId, uint32 _duration)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_duration != markets[_marketId].bidExpirationTime) {\\n            markets[_marketId].bidExpirationTime = _duration;\\n\\n            emit SetBidExpirationTime(_marketId, _duration);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the fee for the market.\\n     * @param _marketId The ID of a market.\\n     * @param _newPercent The percentage fee in basis points.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setMarketFeePercent(uint256 _marketId, uint16 _newPercent)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        require(_newPercent >= 0 && _newPercent <= 10000, \\\"invalid percent\\\");\\n        if (_newPercent != markets[_marketId].marketplaceFeePercent) {\\n            markets[_marketId].marketplaceFeePercent = _newPercent;\\n            emit SetMarketFee(_marketId, _newPercent);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the payment type for the market.\\n     * @param _marketId The ID of the market.\\n     * @param _newPaymentType The payment type for the market.\\n     */\\n    function setMarketPaymentType(\\n        uint256 _marketId,\\n        PaymentType _newPaymentType\\n    ) public ownsMarket(_marketId) {\\n        if (_newPaymentType != markets[_marketId].paymentType) {\\n            markets[_marketId].paymentType = _newPaymentType;\\n            emit SetMarketPaymentType(_marketId, _newPaymentType);\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable/disables market whitelist for lenders.\\n     * @param _marketId The ID of a market.\\n     * @param _required Boolean indicating if the market requires whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setLenderAttestationRequired(uint256 _marketId, bool _required)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_required != markets[_marketId].lenderAttestationRequired) {\\n            markets[_marketId].lenderAttestationRequired = _required;\\n            emit SetMarketLenderAttestation(_marketId, _required);\\n        }\\n    }\\n\\n    /**\\n     * @notice Enable/disables market whitelist for borrowers.\\n     * @param _marketId The ID of a market.\\n     * @param _required Boolean indicating if the market requires whitelist.\\n     *\\n     * Requirements:\\n     * - The caller must be the current owner.\\n     */\\n    function setBorrowerAttestationRequired(uint256 _marketId, bool _required)\\n        public\\n        ownsMarket(_marketId)\\n    {\\n        if (_required != markets[_marketId].borrowerAttestationRequired) {\\n            markets[_marketId].borrowerAttestationRequired = _required;\\n            emit SetMarketBorrowerAttestation(_marketId, _required);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the data associated with a market.\\n     * @param _marketId The ID of a market.\\n     */\\n    function getMarketData(uint256 _marketId)\\n        public\\n        view\\n        returns (\\n            address owner,\\n            uint32 paymentCycleDuration,\\n            uint32 paymentDefaultDuration,\\n            uint32 loanExpirationTime,\\n            string memory metadataURI,\\n            uint16 marketplaceFeePercent,\\n            bool lenderAttestationRequired\\n        )\\n    {\\n        return (\\n            markets[_marketId].owner,\\n            markets[_marketId].paymentCycleDuration,\\n            markets[_marketId].paymentDefaultDuration,\\n            markets[_marketId].bidExpirationTime,\\n            markets[_marketId].metadataURI,\\n            markets[_marketId].marketplaceFeePercent,\\n            markets[_marketId].lenderAttestationRequired\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the attestation requirements for a given market.\\n     * @param _marketId The ID of the market.\\n     */\\n    function getMarketAttestationRequirements(uint256 _marketId)\\n        public\\n        view\\n        returns (\\n            bool lenderAttestationRequired,\\n            bool borrowerAttestationRequired\\n        )\\n    {\\n        return (\\n            markets[_marketId].lenderAttestationRequired,\\n            markets[_marketId].borrowerAttestationRequired\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the address of a market's owner.\\n     * @param _marketId The ID of a market.\\n     * @return The address of a market's owner.\\n     */\\n    function getMarketOwner(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return markets[_marketId].owner;\\n    }\\n\\n    /**\\n     * @notice Gets the fee recipient of a market.\\n     * @param _marketId The ID of a market.\\n     * @return The address of a market's fee recipient.\\n     */\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address recipient = markets[_marketId].feeRecipient;\\n\\n        if (recipient == address(0)) {\\n            return markets[_marketId].owner;\\n        }\\n\\n        return recipient;\\n    }\\n\\n    /**\\n     * @notice Gets the metadata URI of a market.\\n     * @param _marketId The ID of a market.\\n     * @return URI of a market's metadata.\\n     */\\n    function getMarketURI(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return markets[_marketId].metadataURI;\\n    }\\n\\n    /**\\n     * @notice Gets the loan delinquent duration of a market.\\n     * @param _marketId The ID of a market.\\n     * @return Duration of a loan until it is delinquent.\\n     * @return The type of payment cycle for loans in the market.\\n     */\\n    function getPaymentCycle(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint32, PaymentCycleType)\\n    {\\n        return (\\n            markets[_marketId].paymentCycleDuration,\\n            markets[_marketId].paymentCycleType\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the loan default duration of a market.\\n     * @param _marketId The ID of a market.\\n     * @return Duration of a loan repayment interval until it is default.\\n     */\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return markets[_marketId].paymentDefaultDuration;\\n    }\\n\\n    /**\\n     * @notice Get the payment type of a market.\\n     * @param _marketId the ID of the market.\\n     * @return The type of payment for loans in the market.\\n     */\\n    function getPaymentType(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (PaymentType)\\n    {\\n        return markets[_marketId].paymentType;\\n    }\\n\\n    function getBidExpirationTime(uint256 marketId)\\n        public\\n        view\\n        override\\n        returns (uint32)\\n    {\\n        return markets[marketId].bidExpirationTime;\\n    }\\n\\n    /**\\n     * @notice Gets the marketplace fee in basis points\\n     * @param _marketId The ID of a market.\\n     * @return fee in basis points\\n     */\\n    function getMarketplaceFee(uint256 _marketId)\\n        public\\n        view\\n        override\\n        returns (uint16 fee)\\n    {\\n        return markets[_marketId].marketplaceFeePercent;\\n    }\\n\\n    /**\\n     * @notice Checks if a lender has been attested and added to a market.\\n     * @param _marketId The ID of a market.\\n     * @param _lenderAddress Address to check.\\n     * @return isVerified_ Boolean indicating if a lender has been added to a market.\\n     * @return uuid_ Bytes32 representing the UUID of the lender.\\n     */\\n    function isVerifiedLender(uint256 _marketId, address _lenderAddress)\\n        public\\n        view\\n        override\\n        returns (bool isVerified_, bytes32 uuid_)\\n    {\\n        return\\n            _isVerified(\\n                _lenderAddress,\\n                markets[_marketId].lenderAttestationRequired,\\n                markets[_marketId].lenderAttestationIds,\\n                markets[_marketId].verifiedLendersForMarket\\n            );\\n    }\\n\\n    /**\\n     * @notice Checks if a borrower has been attested and added to a market.\\n     * @param _marketId The ID of a market.\\n     * @param _borrowerAddress Address of the borrower to check.\\n     * @return isVerified_ Boolean indicating if a borrower has been added to a market.\\n     * @return uuid_ Bytes32 representing the UUID of the borrower.\\n     */\\n    function isVerifiedBorrower(uint256 _marketId, address _borrowerAddress)\\n        public\\n        view\\n        override\\n        returns (bool isVerified_, bytes32 uuid_)\\n    {\\n        return\\n            _isVerified(\\n                _borrowerAddress,\\n                markets[_marketId].borrowerAttestationRequired,\\n                markets[_marketId].borrowerAttestationIds,\\n                markets[_marketId].verifiedBorrowersForMarket\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested lenders.\\n     * @param _marketId The ID of a market.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return Array of addresses that have been added to a market.\\n     */\\n    function getAllVerifiedLendersForMarket(\\n        uint256 _marketId,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) public view returns (address[] memory) {\\n        EnumerableSet.AddressSet storage set = markets[_marketId]\\n            .verifiedLendersForMarket;\\n\\n        return _getStakeholdersForMarket(set, _page, _perPage);\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested borrowers.\\n     * @param _marketId The ID of the market.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return Array of addresses that have been added to a market.\\n     */\\n    function getAllVerifiedBorrowersForMarket(\\n        uint256 _marketId,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) public view returns (address[] memory) {\\n        EnumerableSet.AddressSet storage set = markets[_marketId]\\n            .verifiedBorrowersForMarket;\\n        return _getStakeholdersForMarket(set, _page, _perPage);\\n    }\\n\\n    /**\\n     * @notice Sets multiple market settings for a given market.\\n     * @param _marketId The ID of a market.\\n     * @param _paymentCycleDuration Delinquency duration for new loans\\n     * @param _newPaymentType The payment type for the market.\\n     * @param _paymentCycleType The payment cycle type for loans in the market - Seconds or Monthly\\n     * @param _paymentDefaultDuration Default duration for new loans\\n     * @param _bidExpirationTime Duration of time before a bid is considered out of date\\n     * @param _metadataURI A URI that points to a market's metadata.\\n     */\\n    function _setMarketSettings(\\n        uint256 _marketId,\\n        uint32 _paymentCycleDuration,\\n        PaymentType _newPaymentType,\\n        PaymentCycleType _paymentCycleType,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _borrowerAttestationRequired,\\n        bool _lenderAttestationRequired,\\n        string calldata _metadataURI\\n    ) internal {\\n        setMarketURI(_marketId, _metadataURI);\\n        setPaymentDefaultDuration(_marketId, _paymentDefaultDuration);\\n        setBidExpirationTime(_marketId, _bidExpirationTime);\\n        setMarketFeePercent(_marketId, _feePercent);\\n        setLenderAttestationRequired(_marketId, _lenderAttestationRequired);\\n        setBorrowerAttestationRequired(_marketId, _borrowerAttestationRequired);\\n        setMarketPaymentType(_marketId, _newPaymentType);\\n        setPaymentCycle(_marketId, _paymentCycleType, _paymentCycleDuration);\\n    }\\n\\n    /**\\n     * @notice Gets addresses of all attested relevant stakeholders.\\n     * @param _set The stored set of stakeholders to index from.\\n     * @param _page Page index to start from.\\n     * @param _perPage Number of items in a page to return.\\n     * @return stakeholders_ Array of addresses that have been added to a market.\\n     */\\n    function _getStakeholdersForMarket(\\n        EnumerableSet.AddressSet storage _set,\\n        uint256 _page,\\n        uint256 _perPage\\n    ) internal view returns (address[] memory stakeholders_) {\\n        uint256 len = _set.length();\\n\\n        uint256 start = _page * _perPage;\\n        if (start <= len) {\\n            uint256 end = start + _perPage;\\n            // Ensure we do not go out of bounds\\n            if (end > len) {\\n                end = len;\\n            }\\n\\n            stakeholders_ = new address[](end - start);\\n            for (uint256 i = start; i < end; i++) {\\n                stakeholders_[i] = _set.at(i);\\n            }\\n        }\\n    }\\n\\n    /* Internal Functions */\\n\\n    /**\\n     * @notice Adds a stakeholder (lender or borrower) to a market.\\n     * @param _marketId The market ID to add a borrower to.\\n     * @param _stakeholderAddress The address of the stakeholder to add to the market.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _attestStakeholder(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        uint256 _expirationTime,\\n        bool _isLender\\n    )\\n        internal\\n        withAttestingSchema(\\n            _isLender ? lenderAttestationSchemaId : borrowerAttestationSchemaId\\n        )\\n    {\\n        require(\\n            _msgSender() == markets[_marketId].owner,\\n            \\\"Not the market owner\\\"\\n        );\\n\\n        // Submit attestation for borrower to join a market\\n        bytes32 uuid = tellerAS.attest(\\n            _stakeholderAddress,\\n            _attestingSchemaId, // set by the modifier\\n            _expirationTime,\\n            0,\\n            abi.encode(_marketId, _stakeholderAddress)\\n        );\\n        _attestStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            uuid,\\n            _isLender\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds a stakeholder (lender or borrower) to a market via delegated attestation.\\n     * @dev The signature must match that of the market owner.\\n     * @param _marketId The market ID to add a lender to.\\n     * @param _stakeholderAddress The address of the lender to add to the market.\\n     * @param _expirationTime The expiration time of the attestation.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @param _v Signature value\\n     * @param _r Signature value\\n     * @param _s Signature value\\n     */\\n    function _attestStakeholderViaDelegation(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        uint256 _expirationTime,\\n        bool _isLender,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    )\\n        internal\\n        withAttestingSchema(\\n            _isLender ? lenderAttestationSchemaId : borrowerAttestationSchemaId\\n        )\\n    {\\n        // NOTE: block scope to prevent stack too deep!\\n        bytes32 uuid;\\n        {\\n            bytes memory data = abi.encode(_marketId, _stakeholderAddress);\\n            address attestor = markets[_marketId].owner;\\n            // Submit attestation for stakeholder to join a market (attestation must be signed by market owner)\\n            uuid = tellerAS.attestByDelegation(\\n                _stakeholderAddress,\\n                _attestingSchemaId, // set by the modifier\\n                _expirationTime,\\n                0,\\n                data,\\n                attestor,\\n                _v,\\n                _r,\\n                _s\\n            );\\n        }\\n        _attestStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            uuid,\\n            _isLender\\n        );\\n    }\\n\\n    /**\\n     * @notice Adds a stakeholder (borrower/lender) to a market.\\n     * @param _marketId The market ID to add a stakeholder to.\\n     * @param _stakeholderAddress The address of the stakeholder to add to the market.\\n     * @param _uuid The UUID of the attestation created.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _attestStakeholderVerification(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bytes32 _uuid,\\n        bool _isLender\\n    ) internal {\\n        if (_isLender) {\\n            // Store the lender attestation ID for the market ID\\n            markets[_marketId].lenderAttestationIds[\\n                _stakeholderAddress\\n            ] = _uuid;\\n            // Add lender address to market set\\n            markets[_marketId].verifiedLendersForMarket.add(\\n                _stakeholderAddress\\n            );\\n\\n            emit LenderAttestation(_marketId, _stakeholderAddress);\\n        } else {\\n            // Store the lender attestation ID for the market ID\\n            markets[_marketId].borrowerAttestationIds[\\n                _stakeholderAddress\\n            ] = _uuid;\\n            // Add lender address to market set\\n            markets[_marketId].verifiedBorrowersForMarket.add(\\n                _stakeholderAddress\\n            );\\n\\n            emit BorrowerAttestation(_marketId, _stakeholderAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder from an market.\\n     * @dev The caller must be the market owner.\\n     * @param _marketId The market ID to remove the borrower from.\\n     * @param _stakeholderAddress The address of the borrower to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     */\\n    function _revokeStakeholder(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender\\n    ) internal {\\n        require(\\n            _msgSender() == markets[_marketId].owner,\\n            \\\"Not the market owner\\\"\\n        );\\n\\n        bytes32 uuid = _revokeStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            _isLender\\n        );\\n        // NOTE: Disabling the call to revoke the attestation on EAS contracts\\n        //        tellerAS.revoke(uuid);\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder from an market via delegated revocation.\\n     * @param _marketId The market ID to remove the borrower from.\\n     * @param _stakeholderAddress The address of the borrower to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @param _v Signature value\\n     * @param _r Signature value\\n     * @param _s Signature value\\n     */\\n    function _revokeStakeholderViaDelegation(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        bytes32 uuid = _revokeStakeholderVerification(\\n            _marketId,\\n            _stakeholderAddress,\\n            _isLender\\n        );\\n        // NOTE: Disabling the call to revoke the attestation on EAS contracts\\n        //        address attestor = markets[_marketId].owner;\\n        //        tellerAS.revokeByDelegation(uuid, attestor, _v, _r, _s);\\n    }\\n\\n    /**\\n     * @notice Removes a stakeholder (borrower/lender) from a market.\\n     * @param _marketId The market ID to remove the lender from.\\n     * @param _stakeholderAddress The address of the stakeholder to remove from the market.\\n     * @param _isLender Boolean indicating if the stakeholder is a lender. Otherwise it is a borrower.\\n     * @return uuid_ The ID of the previously verified attestation.\\n     */\\n    function _revokeStakeholderVerification(\\n        uint256 _marketId,\\n        address _stakeholderAddress,\\n        bool _isLender\\n    ) internal returns (bytes32 uuid_) {\\n        if (_isLender) {\\n            uuid_ = markets[_marketId].lenderAttestationIds[\\n                _stakeholderAddress\\n            ];\\n            // Remove lender address from market set\\n            markets[_marketId].verifiedLendersForMarket.remove(\\n                _stakeholderAddress\\n            );\\n\\n            emit LenderRevocation(_marketId, _stakeholderAddress);\\n        } else {\\n            uuid_ = markets[_marketId].borrowerAttestationIds[\\n                _stakeholderAddress\\n            ];\\n            // Remove borrower address from market set\\n            markets[_marketId].verifiedBorrowersForMarket.remove(\\n                _stakeholderAddress\\n            );\\n\\n            emit BorrowerRevocation(_marketId, _stakeholderAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a stakeholder has been attested and added to a market.\\n     * @param _stakeholderAddress Address of the stakeholder to check.\\n     * @param _attestationRequired Stored boolean indicating if attestation is required for the stakeholder class.\\n     * @param _stakeholderAttestationIds Mapping of attested Ids for the stakeholder class.\\n     */\\n    function _isVerified(\\n        address _stakeholderAddress,\\n        bool _attestationRequired,\\n        mapping(address => bytes32) storage _stakeholderAttestationIds,\\n        EnumerableSet.AddressSet storage _verifiedStakeholderForMarket\\n    ) internal view returns (bool isVerified_, bytes32 uuid_) {\\n        if (_attestationRequired) {\\n            isVerified_ =\\n                _verifiedStakeholderForMarket.contains(_stakeholderAddress) &&\\n                tellerAS.isAttestationActive(\\n                    _stakeholderAttestationIds[_stakeholderAddress]\\n                );\\n            uuid_ = _stakeholderAttestationIds[_stakeholderAddress];\\n        } else {\\n            isVerified_ = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81b5568ae3770dadab527bed63a37b5c1029047daf3bbeae01d07e44176edf68\",\"license\":\"MIT\"},\"contracts/TellerV2Storage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport { IMarketRegistry } from \\\"./interfaces/IMarketRegistry.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/ICollateralManager.sol\\\";\\nimport { PaymentType, PaymentCycleType } from \\\"./libraries/V2Calculations.sol\\\";\\nimport \\\"./interfaces/ILenderManager.sol\\\";\\n\\nenum BidState {\\n    NONEXISTENT,\\n    PENDING,\\n    CANCELLED,\\n    ACCEPTED,\\n    PAID,\\n    LIQUIDATED\\n}\\n\\n/**\\n * @notice Represents a total amount for a payment.\\n * @param principal Amount that counts towards the principal.\\n * @param interest  Amount that counts toward interest.\\n */\\nstruct Payment {\\n    uint256 principal;\\n    uint256 interest;\\n}\\n\\n/**\\n * @notice Details about a loan request.\\n * @param borrower Account address who is requesting a loan.\\n * @param receiver Account address who will receive the loan amount.\\n * @param lender Account address who accepted and funded the loan request.\\n * @param marketplaceId ID of the marketplace the bid was submitted to.\\n * @param metadataURI ID of off chain metadata to find additional information of the loan request.\\n * @param loanDetails Struct of the specific loan details.\\n * @param terms Struct of the loan request terms.\\n * @param state Represents the current state of the loan.\\n */\\nstruct Bid {\\n    address borrower;\\n    address receiver;\\n    address lender; // if this is the LenderManager address, we use that .owner() as source of truth\\n    uint256 marketplaceId;\\n    bytes32 _metadataURI; // DEPRECATED\\n    LoanDetails loanDetails;\\n    Terms terms;\\n    BidState state;\\n    PaymentType paymentType;\\n}\\n\\n/**\\n * @notice Details about the loan.\\n * @param lendingToken The token address for the loan.\\n * @param principal The amount of tokens initially lent out.\\n * @param totalRepaid Payment struct that represents the total principal and interest amount repaid.\\n * @param timestamp Timestamp, in seconds, of when the bid was submitted by the borrower.\\n * @param acceptedTimestamp Timestamp, in seconds, of when the bid was accepted by the lender.\\n * @param lastRepaidTimestamp Timestamp, in seconds, of when the last payment was made\\n * @param loanDuration The duration of the loan.\\n */\\nstruct LoanDetails {\\n    ERC20 lendingToken;\\n    uint256 principal;\\n    Payment totalRepaid;\\n    uint32 timestamp;\\n    uint32 acceptedTimestamp;\\n    uint32 lastRepaidTimestamp;\\n    uint32 loanDuration;\\n}\\n\\n/**\\n * @notice Information on the terms of a loan request\\n * @param paymentCycleAmount Value of tokens expected to be repaid every payment cycle.\\n * @param paymentCycle Duration, in seconds, of how often a payment must be made.\\n * @param APR Annual percentage rating to be applied on repayments. (10000 == 100%)\\n */\\nstruct Terms {\\n    uint256 paymentCycleAmount;\\n    uint32 paymentCycle;\\n    uint16 APR;\\n}\\n\\nabstract contract TellerV2Storage_G0 {\\n    /** Storage Variables */\\n\\n    // Current number of bids.\\n    uint256 public bidId = 0;\\n\\n    // Mapping of bidId to bid information.\\n    mapping(uint256 => Bid) public bids;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => uint256[]) public borrowerBids;\\n\\n    // Mapping of volume filled by lenders.\\n    mapping(address => uint256) public __lenderVolumeFilled; // DEPRECIATED\\n\\n    // Volume filled by all lenders.\\n    uint256 public __totalVolumeFilled; // DEPRECIATED\\n\\n    // List of allowed lending tokens\\n    EnumerableSet.AddressSet internal __lendingTokensSet; // DEPRECATED\\n\\n    IMarketRegistry public marketRegistry;\\n    IReputationManager public reputationManager;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => EnumerableSet.UintSet) internal _borrowerBidsActive;\\n\\n    mapping(uint256 => uint32) public bidDefaultDuration;\\n    mapping(uint256 => uint32) public bidExpirationTime;\\n\\n    // Mapping of volume filled by lenders.\\n    // Asset address => Lender address => Volume amount\\n    mapping(address => mapping(address => uint256)) public lenderVolumeFilled;\\n\\n    // Volume filled by all lenders.\\n    // Asset address => Volume amount\\n    mapping(address => uint256) public totalVolumeFilled;\\n\\n    uint256 public version;\\n\\n    // Mapping of metadataURIs by bidIds.\\n    // Bid Id => metadataURI string\\n    mapping(uint256 => string) public uris;\\n}\\n\\nabstract contract TellerV2Storage_G1 is TellerV2Storage_G0 {\\n    // market ID => trusted forwarder\\n    mapping(uint256 => address) internal _trustedMarketForwarders;\\n    // trusted forwarder => set of pre-approved senders\\n    mapping(address => EnumerableSet.AddressSet)\\n        internal _approvedForwarderSenders;\\n}\\n\\nabstract contract TellerV2Storage_G2 is TellerV2Storage_G1 {\\n    address public lenderCommitmentForwarder;\\n}\\n\\nabstract contract TellerV2Storage_G3 is TellerV2Storage_G2 {\\n    ICollateralManager public collateralManager;\\n}\\n\\nabstract contract TellerV2Storage_G4 is TellerV2Storage_G3 {\\n    // Address of the lender manager contract\\n    ILenderManager public lenderManager;\\n    // BidId to payment cycle type (custom or monthly)\\n    mapping(uint256 => PaymentCycleType) public bidPaymentCycleType;\\n}\\n\\nabstract contract TellerV2Storage is TellerV2Storage_G4 {}\\n\",\"keccak256\":\"0x45d89012d8fefcf203ae434d2780bc92f1d51f7a816b3c768a4591101644a1da\",\"license\":\"MIT\"},\"contracts/Types.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\n// A representation of an empty/uninitialized UUID.\\nbytes32 constant EMPTY_UUID = 0;\\n\",\"keccak256\":\"0x2e4bcf4a965f840193af8729251386c1826cd050411ba4a9e85984a2551fd2ff\",\"license\":\"MIT\"},\"contracts/interfaces/IASRegistry.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASResolver.sol\\\";\\n\\n/**\\n * @title The global AS registry interface.\\n */\\ninterface IASRegistry {\\n    /**\\n     * @title A struct representing a record for a submitted AS (Attestation Schema).\\n     */\\n    struct ASRecord {\\n        // A unique identifier of the AS.\\n        bytes32 uuid;\\n        // Optional schema resolver.\\n        IASResolver resolver;\\n        // Auto-incrementing index for reference, assigned by the registry itself.\\n        uint256 index;\\n        // Custom specification of the AS (e.g., an ABI).\\n        bytes schema;\\n    }\\n\\n    /**\\n     * @dev Triggered when a new AS has been registered\\n     *\\n     * @param uuid The AS UUID.\\n     * @param index The AS index.\\n     * @param schema The AS schema.\\n     * @param resolver An optional AS schema resolver.\\n     * @param attester The address of the account used to register the AS.\\n     */\\n    event Registered(\\n        bytes32 indexed uuid,\\n        uint256 indexed index,\\n        bytes schema,\\n        IASResolver resolver,\\n        address attester\\n    );\\n\\n    /**\\n     * @dev Submits and reserve a new AS\\n     *\\n     * @param schema The AS data schema.\\n     * @param resolver An optional AS schema resolver.\\n     *\\n     * @return The UUID of the new AS.\\n     */\\n    function register(bytes calldata schema, IASResolver resolver)\\n        external\\n        returns (bytes32);\\n\\n    /**\\n     * @dev Returns an existing AS by UUID\\n     *\\n     * @param uuid The UUID of the AS to retrieve.\\n     *\\n     * @return The AS data members.\\n     */\\n    function getAS(bytes32 uuid) external view returns (ASRecord memory);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getASCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x74752921f592df45c8717d7084627e823b1dbc93bad7187cd3023c9690df7e60\",\"license\":\"MIT\"},\"contracts/interfaces/IASResolver.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title The interface of an optional AS resolver.\\n */\\ninterface IASResolver {\\n    /**\\n     * @dev Returns whether the resolver supports ETH transfers\\n     */\\n    function isPayable() external pure returns (bool);\\n\\n    /**\\n     * @dev Resolves an attestation and verifier whether its data conforms to the spec.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The AS data schema.\\n     * @param data The actual attestation data.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param msgSender The sender of the original attestation message.\\n     *\\n     * @return Whether the data is valid according to the scheme.\\n     */\\n    function resolve(\\n        address recipient,\\n        bytes calldata schema,\\n        bytes calldata data,\\n        uint256 expirationTime,\\n        address msgSender\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0xfce671ea099d9f997a69c3447eb4a9c9693d37c5b97e43ada376e614e1c7cb61\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralManager.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Collateral } from \\\"./escrow/ICollateralEscrowV1.sol\\\";\\n\\ninterface ICollateralManager {\\n    /**\\n     * @notice Checks the validity of a borrower's collateral balance.\\n     * @param _bidId The id of the associated bid.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function commitCollateral(\\n        uint256 _bidId,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validation_);\\n\\n    /**\\n     * @notice Checks the validity of a borrower's collateral balance and commits it to a bid.\\n     * @param _bidId The id of the associated bid.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function commitCollateral(\\n        uint256 _bidId,\\n        Collateral calldata _collateralInfo\\n    ) external returns (bool validation_);\\n\\n    function checkBalances(\\n        address _borrowerAddress,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validated_, bool[] memory checks_);\\n\\n    /**\\n     * @notice Deploys a new collateral escrow.\\n     * @param _bidId The associated bidId of the collateral escrow.\\n     */\\n    function deployAndDeposit(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Gets the address of a deployed escrow.\\n     * @notice _bidId The bidId to return the escrow for.\\n     * @return The address of the escrow.\\n     */\\n    function getEscrow(uint256 _bidId) external view returns (address);\\n\\n    /**\\n     * @notice Gets the collateral info for a given bid id.\\n     * @param _bidId The bidId to return the collateral info for.\\n     * @return The stored collateral info.\\n     */\\n    function getCollateralInfo(uint256 _bidId)\\n        external\\n        view\\n        returns (Collateral[] memory);\\n\\n    function getCollateralAmount(uint256 _bidId, address collateralAssetAddress)\\n        external\\n        view\\n        returns (uint256 _amount);\\n\\n    /**\\n     * @notice Withdraws deposited collateral from the created escrow of a bid.\\n     * @param _bidId The id of the bid to withdraw collateral for.\\n     */\\n    function withdraw(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Re-checks the validity of a borrower's collateral balance committed to a bid.\\n     * @param _bidId The id of the associated bid.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function revalidateCollateral(uint256 _bidId) external returns (bool);\\n\\n    /**\\n     * @notice Sends the deposited collateral to a liquidator of a bid.\\n     * @notice Can only be called by the protocol.\\n     * @param _bidId The id of the liquidated bid.\\n     * @param _liquidatorAddress The address of the liquidator to send the collateral to.\\n     */\\n    function liquidateCollateral(uint256 _bidId, address _liquidatorAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0x27778a3446cdbfed6356d5047f9926231261b37def2712a3cc63e3779350e5e4\"},\"contracts/interfaces/IEAS.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"./IASRegistry.sol\\\";\\nimport \\\"./IEASEIP712Verifier.sol\\\";\\n\\n/**\\n * @title EAS - Ethereum Attestation Service interface\\n */\\ninterface IEAS {\\n    /**\\n     * @dev A struct representing a single attestation.\\n     */\\n    struct Attestation {\\n        // A unique identifier of the attestation.\\n        bytes32 uuid;\\n        // A unique identifier of the AS.\\n        bytes32 schema;\\n        // The recipient of the attestation.\\n        address recipient;\\n        // The attester/sender of the attestation.\\n        address attester;\\n        // The time when the attestation was created (Unix timestamp).\\n        uint256 time;\\n        // The time when the attestation expires (Unix timestamp).\\n        uint256 expirationTime;\\n        // The time when the attestation was revoked (Unix timestamp).\\n        uint256 revocationTime;\\n        // The UUID of the related attestation.\\n        bytes32 refUUID;\\n        // Custom attestation data.\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Triggered when an attestation has been made.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param uuid The UUID the revoked attestation.\\n     * @param schema The UUID of the AS.\\n     */\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Triggered when an attestation has been revoked.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param uuid The UUID the revoked attestation.\\n     */\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uuid,\\n        bytes32 indexed schema\\n    );\\n\\n    /**\\n     * @dev Returns the address of the AS global registry.\\n     *\\n     * @return The address of the AS global registry.\\n     */\\n    function getASRegistry() external view returns (IASRegistry);\\n\\n    /**\\n     * @dev Returns the address of the EIP712 verifier used to verify signed attestations.\\n     *\\n     * @return The address of the EIP712 verifier used to verify signed attestations.\\n     */\\n    function getEIP712Verifier() external view returns (IEASEIP712Verifier);\\n\\n    /**\\n     * @dev Returns the global counter for the total number of attestations.\\n     *\\n     * @return The global counter for the total number of attestations.\\n     */\\n    function getAttestationsCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Attests to a specific AS.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     *\\n     * @return The UUID of the new attestation.\\n     */\\n    function attestByDelegation(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable returns (bytes32);\\n\\n    /**\\n     * @dev Revokes an existing attestation to a specific AS.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     */\\n    function revoke(bytes32 uuid) external;\\n\\n    /**\\n     * @dev Attests to a specific AS using a provided EIP712 signature.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revokeByDelegation(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns an existing attestation by UUID.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The attestation data members.\\n     */\\n    function getAttestation(bytes32 uuid)\\n        external\\n        view\\n        returns (Attestation memory);\\n\\n    /**\\n     * @dev Checks whether an attestation exists.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation exists.\\n     */\\n    function isAttestationValid(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Checks whether an attestation is active.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return Whether an attestation is active.\\n     */\\n    function isAttestationActive(bytes32 uuid) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getReceivedAttestationUUIDs(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of received attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getReceivedAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all sent attestation UUIDs.\\n     *\\n     * @param attester The attesting account.\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSentAttestationUUIDs(\\n        address attester,\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of sent attestation UUIDs.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSentAttestationUUIDsCount(address recipient, bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all attestations related to a specific attestation.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getRelatedAttestationUUIDs(\\n        bytes32 uuid,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of related attestation UUIDs.\\n     *\\n     * @param uuid The UUID of the attestation to retrieve.\\n     *\\n     * @return The number of related attestations.\\n     */\\n    function getRelatedAttestationUUIDsCount(bytes32 uuid)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns all per-schema attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     * @param start The offset to start from.\\n     * @param length The number of total members to retrieve.\\n     * @param reverseOrder Whether the offset starts from the end and the data is returned in reverse.\\n     *\\n     * @return An array of attestation UUIDs.\\n     */\\n    function getSchemaAttestationUUIDs(\\n        bytes32 schema,\\n        uint256 start,\\n        uint256 length,\\n        bool reverseOrder\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns the number of per-schema  attestation UUIDs.\\n     *\\n     * @param schema The UUID of the AS.\\n     *\\n     * @return The number of attestations.\\n     */\\n    function getSchemaAttestationUUIDsCount(bytes32 schema)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5db90829269f806ed14a6c638f38d4aac1fa0f85829b34a2fcddd5200261c148\",\"license\":\"MIT\"},\"contracts/interfaces/IEASEIP712Verifier.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations interface.\\n */\\ninterface IEASEIP712Verifier {\\n    /**\\n     * @dev Returns the current nonce per-account.\\n     *\\n     * @param account The requested accunt.\\n     *\\n     * @return The current nonce.\\n     */\\n    function getNonce(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Verifies signed attestation.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Verifies signed revocations.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeca3ac3bacec52af15b2c86c5bf1a1be315aade51fa86f95da2b426b28486b1e\",\"license\":\"MIT\"},\"contracts/interfaces/ILenderManager.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nabstract contract ILenderManager is IERC721Upgradeable {\\n    /**\\n     * @notice Registers a new active lender for a loan, minting the nft.\\n     * @param _bidId The id for the loan to set.\\n     * @param _newLender The address of the new active lender.\\n     */\\n    function registerLoan(uint256 _bidId, address _newLender) external virtual;\\n}\\n\",\"keccak256\":\"0xceb1ea2ef4c6e2ad7986db84de49c959e8d59844563d27daca5b8d78b732a8f7\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../EAS/TellerAS.sol\\\";\\nimport { PaymentType, PaymentCycleType } from \\\"../libraries/V2Calculations.sol\\\";\\n\\ninterface IMarketRegistry {\\n    function initialize(TellerAS tellerAs) external;\\n\\n    function isVerifiedLender(uint256 _marketId, address _lender)\\n        external\\n        view\\n        returns (bool, bytes32);\\n\\n    function isMarketClosed(uint256 _marketId) external view returns (bool);\\n\\n    function isVerifiedBorrower(uint256 _marketId, address _borrower)\\n        external\\n        view\\n        returns (bool, bytes32);\\n\\n    function getMarketOwner(uint256 _marketId) external view returns (address);\\n\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getMarketURI(uint256 _marketId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getPaymentCycle(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32, PaymentCycleType);\\n\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getBidExpirationTime(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getMarketplaceFee(uint256 _marketId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function getPaymentType(uint256 _marketId)\\n        external\\n        view\\n        returns (PaymentType);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        PaymentType _paymentType,\\n        PaymentCycleType _paymentCycleType,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        uint32 _paymentCycleDuration,\\n        uint32 _paymentDefaultDuration,\\n        uint32 _bidExpirationTime,\\n        uint16 _feePercent,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri\\n    ) external returns (uint256 marketId_);\\n}\\n\",\"keccak256\":\"0x7209557aa8e3ddd81d0b863a8c063520a0011d96e1b3690a322f3371468f6dc6\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RepMark {\\n    Good,\\n    Delinquent,\\n    Default\\n}\\n\\ninterface IReputationManager {\\n    function initialize(address protocolAddress) external;\\n\\n    function getDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getDefaultedLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function updateAccountReputation(address _account) external;\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        external\\n        returns (RepMark);\\n}\\n\",\"keccak256\":\"0x8d6e50fd460912231e53135b4459aa2f6f16007ae8deb32bc2cee1e88311a8d8\",\"license\":\"MIT\"},\"contracts/interfaces/escrow/ICollateralEscrowV1.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum CollateralType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct Collateral {\\n    CollateralType _collateralType;\\n    uint256 _amount;\\n    uint256 _tokenId;\\n    address _collateralAddress;\\n}\\n\\ninterface ICollateralEscrowV1 {\\n    /**\\n     * @notice Deposits a collateral ERC20 token into the escrow.\\n     * @param _collateralAddress The address of the collateral token.\\n     * @param _amount The amount to deposit.\\n     */\\n    function depositToken(address _collateralAddress, uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposits a collateral asset into the escrow.\\n     * @param _collateralType The type of collateral asset to deposit (ERC721, ERC1155).\\n     * @param _collateralAddress The address of the collateral token.\\n     * @param _amount The amount to deposit.\\n     */\\n    function depositAsset(\\n        CollateralType _collateralType,\\n        address _collateralAddress,\\n        uint256 _amount,\\n        uint256 _tokenId\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws a collateral asset from the escrow.\\n     * @param _collateralAddress The address of the collateral contract.\\n     * @param _amount The amount to withdraw.\\n     * @param _recipient The address to send the assets to.\\n     */\\n    function withdraw(\\n        address _collateralAddress,\\n        uint256 _amount,\\n        address _recipient\\n    ) external;\\n\\n    function getBid() external view returns (uint256);\\n\\n    function initialize(uint256 _bidId) external;\\n}\\n\",\"keccak256\":\"0xefb7928c982f328c8df17f736b2c542df12f6c5b326933076faaae970ae49fa8\"},\"contracts/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using WadRayMath for uint256;\\n\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint16 internal constant PCT_100 = 10000;\\n\\n    function percentFactor(uint256 decimals) internal pure returns (uint256) {\\n        return 100 * (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return percent(self, percentage, 2);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with.\\n     * @param decimals The number of decimals the percentage value is in.\\n     */\\n    function percent(uint256 self, uint256 percentage, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * percentage) / percentFactor(decimals);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @dev Returned value is type uint16.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return SafeCast.toUint16(ratioOf(num1, num2, 2));\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @param decimals The number of decimals the percentage value is returned in.\\n     * @return Ratio percentage value.\\n     */\\n    function ratioOf(uint256 num1, uint256 num2, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (num2 == 0) return 0;\\n        return (num1 * percentFactor(decimals)) / num2;\\n    }\\n\\n    /**\\n     * @notice Calculates the payment amount for a cycle duration.\\n     *  The formula is calculated based on the standard Estimated Monthly Installment (https://en.wikipedia.org/wiki/Equated_monthly_installment)\\n     *  EMI = [P x R x (1+R)^N]/[(1+R)^N-1]\\n     * @param principal The starting amount that is owed on the loan.\\n     * @param loanDuration The length of the loan.\\n     * @param cycleDuration The length of the loan's payment cycle.\\n     * @param apr The annual percentage rate of the loan.\\n     */\\n    function pmt(\\n        uint256 principal,\\n        uint32 loanDuration,\\n        uint32 cycleDuration,\\n        uint16 apr,\\n        uint256 daysInYear\\n    ) internal pure returns (uint256) {\\n        require(\\n            loanDuration >= cycleDuration,\\n            \\\"PMT: cycle duration < loan duration\\\"\\n        );\\n        if (apr == 0)\\n            return\\n                Math.mulDiv(\\n                    principal,\\n                    cycleDuration,\\n                    loanDuration,\\n                    Math.Rounding.Up\\n                );\\n\\n        // Number of payment cycles for the duration of the loan\\n        uint256 n = Math.ceilDiv(loanDuration, cycleDuration);\\n\\n        uint256 one = WadRayMath.wad();\\n        uint256 r = WadRayMath.pctToWad(apr).wadMul(cycleDuration).wadDiv(\\n            daysInYear\\n        );\\n        uint256 exp = (one + r).wadPow(n);\\n        uint256 numerator = principal.wadMul(r).wadMul(exp);\\n        uint256 denominator = exp - one;\\n\\n        return numerator.wadDiv(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x78009ffb3737ab7615a1e38a26635d6c06b65b7b7959af46d6ef840d220e70cf\",\"license\":\"MIT\"},\"contracts/libraries/V2Calculations.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n// Libraries\\nimport \\\"./NumbersLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Bid } from \\\"../TellerV2Storage.sol\\\";\\n\\nenum PaymentType {\\n    EMI,\\n    Bullet\\n}\\n\\nenum PaymentCycleType {\\n    Seconds,\\n    Monthly\\n}\\n\\nlibrary V2Calculations {\\n    using NumbersLib for uint256;\\n\\n    /**\\n     * @notice Returns the timestamp of the last payment made for a loan.\\n     * @param _bid The loan bid struct to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(Bid storage _bid)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        return\\n            _bid.loanDetails.lastRepaidTimestamp == 0\\n                ? _bid.loanDetails.acceptedTimestamp\\n                : _bid.loanDetails.lastRepaidTimestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan.\\n     * @param _bid The loan bid struct to get the owed amount for.\\n     * @param _timestamp The timestamp at which to get the owed amount at.\\n     * @param _paymentCycleType The payment cycle type of the loan (Seconds or Monthly).\\n     */\\n    function calculateAmountOwed(\\n        Bid storage _bid,\\n        uint256 _timestamp,\\n        PaymentCycleType _paymentCycleType\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        // Total principal left to pay\\n        return\\n            calculateAmountOwed(\\n                _bid,\\n                lastRepaidTimestamp(_bid),\\n                _timestamp,\\n                _paymentCycleType\\n            );\\n    }\\n\\n    function calculateAmountOwed(\\n        Bid storage _bid,\\n        uint256 _lastRepaidTimestamp,\\n        uint256 _timestamp,\\n        PaymentCycleType _paymentCycleType\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        owedPrincipal_ =\\n            _bid.loanDetails.principal -\\n            _bid.loanDetails.totalRepaid.principal;\\n\\n        uint256 daysInYear = _paymentCycleType == PaymentCycleType.Monthly\\n            ? 360 days\\n            : 365 days;\\n\\n        uint256 interestOwedInAYear = owedPrincipal_.percent(_bid.terms.APR);\\n        uint256 owedTime = _timestamp - uint256(_lastRepaidTimestamp);\\n        interest_ = (interestOwedInAYear * owedTime) / daysInYear;\\n\\n        // Cast to int265 to avoid underflow errors (negative means loan duration has passed)\\n        int256 durationLeftOnLoan = int256(\\n            uint256(_bid.loanDetails.loanDuration)\\n        ) -\\n            (int256(_timestamp) -\\n                int256(uint256(_bid.loanDetails.acceptedTimestamp)));\\n        bool isLastPaymentCycle = durationLeftOnLoan <\\n            int256(uint256(_bid.terms.paymentCycle)) || // Check if current payment cycle is within or beyond the last one\\n            owedPrincipal_ + interest_ <= _bid.terms.paymentCycleAmount; // Check if what is left to pay is less than the payment cycle amount\\n\\n        if (_bid.paymentType == PaymentType.Bullet) {\\n            if (isLastPaymentCycle) {\\n                duePrincipal_ = owedPrincipal_;\\n            }\\n        } else {\\n            // Default to PaymentType.EMI\\n            // Max payable amount in a cycle\\n            // NOTE: the last cycle could have less than the calculated payment amount\\n            uint256 maxCycleOwed = isLastPaymentCycle\\n                ? owedPrincipal_ + interest_\\n                : _bid.terms.paymentCycleAmount;\\n\\n            // Calculate accrued amount due since last repayment\\n            uint256 owedAmount = (maxCycleOwed * owedTime) /\\n                _bid.terms.paymentCycle;\\n            duePrincipal_ = Math.min(owedAmount - interest_, owedPrincipal_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan for the next payment cycle.\\n     * @param _type The payment type of the loan.\\n     * @param _cycleType The cycle type set for the loan. (Seconds or Monthly)\\n     * @param _principal The starting amount that is owed on the loan.\\n     * @param _duration The length of the loan.\\n     * @param _paymentCycle The length of the loan's payment cycle.\\n     * @param _apr The annual percentage rate of the loan.\\n     */\\n    function calculatePaymentCycleAmount(\\n        PaymentType _type,\\n        PaymentCycleType _cycleType,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint32 _paymentCycle,\\n        uint16 _apr\\n    ) internal returns (uint256) {\\n        uint256 daysInYear = _cycleType == PaymentCycleType.Monthly\\n            ? 360 days\\n            : 365 days;\\n        if (_type == PaymentType.Bullet) {\\n            return\\n                _principal.percent(_apr).percent(\\n                    uint256(_paymentCycle).ratioOf(daysInYear, 10),\\n                    10\\n                );\\n        }\\n        // Default to PaymentType.EMI\\n        return\\n            NumbersLib.pmt(\\n                _principal,\\n                _duration,\\n                _paymentCycle,\\n                _apr,\\n                daysInYear\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcb9f3cb8f8800aa321690418467da8dc40ff115b7697374e5c4364e4c7b2d759\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Multiplier Finance\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n    uint256 internal constant PCT_WAD_RATIO = 1e14;\\n    uint256 internal constant PCT_RAY_RATIO = 1e23;\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function rayToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_RAY_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_RAY_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_WAD_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_WAD_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    function pctToRay(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(RAY).div(1e4);\\n    }\\n\\n    function pctToWad(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(WAD).div(1e4);\\n    }\\n\\n    /**\\n     * @dev calculates base^duration. The code uses the ModExp precompile\\n     * @return z base^duration, in ray\\n     */\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, RAY, rayMul);\\n    }\\n\\n    function wadPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, WAD, wadMul);\\n    }\\n\\n    function _pow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 p,\\n        function(uint256, uint256) internal pure returns (uint256) mul\\n    ) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : p;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = mul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2781319be7a96f56966c601c061849fa94dbf9af5ad80a20c40b879a8d03f14a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506132cf806100206000396000f3fe6080604052600436106102975760003560e01c80637f027a1a1161015a578063bd536e6e116100c1578063d6e794dd1161007a578063d6e794dd14610956578063ddfafef61461099d578063e4050e29146109bd578063e690e84e146109dd578063ec979082146109fd578063f9fa934514610a1357600080fd5b8063bd536e6e1461088f578063be99279b146108af578063bfacba3d146108cf578063c4d66de814610902578063c995cddc14610922578063ce46e0461461094257600080fd5b806397eb575b1161011357806397eb575b14610796578063a5630f19146107b6578063aa542fa51461080f578063ae4180951461082f578063b6b6d77f1461084f578063bc4c34951461086f57600080fd5b80637f027a1a1461069d5780638b636632146106bd5780638b975cda146106dd5780638eff9ea4146106fd578063947a75b41461076357806394e8e97e1461077657600080fd5b80633ef19a9b116101fe578063583b16ae116101b7578063583b16ae146105e75780636054b175146106075780636441379614610627578063679700d9146106475780637694d2ec1461065d5780637cfc18181461067d57600080fd5b80633ef19a9b1461053c5780633fa7f6881461055c5780634148f94c1461057c578063455154e514610591578063532f5694146105b157806354fd4d50146105d157600080fd5b80631db2b0d9116102505780631db2b0d91461043d5780631ebc7da81461046a5780632f1be8f91461048a578063344e553d146104aa5780633c0db788146104d85780633d369029146104ee57600080fd5b8063066e7513146102bc578063082fc54d146102f85780630a2e98e41461034a57806311bed5bb146103925780631a4808d2146103d05780631cc672df146103fd57600080fd5b366102b757604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b3480156102c857600080fd5b506102dc6102d73660046127b5565b610a33565b6040805192151583526020830191909152015b60405180910390f35b34801561030457600080fd5b506103356103133660046127e5565b600090815260026020526040902060060154600160401b900463ffffffff1690565b60405163ffffffff90911681526020016102ef565b34801561035657600080fd5b5061037f6103653660046127e5565b6000908152600260208190526040909120015461ffff1690565b60405161ffff90911681526020016102ef565b34801561039e57600080fd5b506103356103ad3660046127e5565b600090815260026020526040902060060154640100000000900463ffffffff1690565b3480156103dc57600080fd5b506103f06103eb3660046127e5565b610a73565b6040516102ef919061284b565b34801561040957600080fd5b5061042d6104183660046127e5565b60009081526008602052604090205460ff1690565b60405190151581526020016102ef565b34801561044957600080fd5b5061045d61045836600461285e565b610b18565b6040516102ef919061288a565b34801561047657600080fd5b506102b56104853660046127b5565b610b42565b34801561049657600080fd5b506102b56104a53660046128f0565b610bee565b3480156104b657600080fd5b506104ca6104c536600461298b565b610cbe565b6040519081526020016102ef565b3480156104e457600080fd5b506104ca60015481565b3480156104fa57600080fd5b506105246105093660046127e5565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102ef565b34801561054857600080fd5b506102dc6105573660046127b5565b610ce3565b34801561056857600080fd5b506102b5610577366004612a85565b610d17565b34801561058857600080fd5b506104ca600881565b34801561059d57600080fd5b506102b56105ac3660046127b5565b610d2f565b3480156105bd57600080fd5b506102b56105cc366004612adf565b610d3f565b3480156105dd57600080fd5b506104ca60075481565b3480156105f357600080fd5b506102b5610602366004612a85565b610e3c565b34801561061357600080fd5b506102b5610622366004612b2b565b610e4c565b34801561063357600080fd5b506105246106423660046127e5565b610e62565b34801561065357600080fd5b506104ca60065481565b34801561066957600080fd5b5061045d61067836600461285e565b610ea5565b34801561068957600080fd5b506102b56106983660046127b5565b610ec4565b3480156106a957600080fd5b506102b56106b83660046127e5565b610f5b565b3480156106c957600080fd5b506102b56106d83660046127b5565b610fc7565b3480156106e957600080fd5b506102b56106f8366004612b7b565b610fd3565b34801561070957600080fd5b5061074c6107183660046127e5565b6000908152600260208190526040909120908101546006909101546201000090910460ff90811692600160601b9092041690565b6040805192151583529015156020830152016102ef565b61042d610771366004612c18565b61102c565b34801561078257600080fd5b506102b5610791366004612cb8565b6110da565b3480156107a257600080fd5b506102b56107b1366004612cdd565b611197565b3480156107c257600080fd5b506108016107d13660046127e5565b60009081526002602052604090206006810154600a9091015463ffffffff90911691600160a81b90910460ff1690565b6040516102ef929190612d49565b34801561081b57600080fd5b506102b561082a366004612d6c565b6111a4565b34801561083b57600080fd5b506102b561084a3660046127e5565b61128a565b34801561085b57600080fd5b506102b561086a366004612d91565b611323565b34801561087b57600080fd5b506102b561088a366004612b2b565b61141b565b34801561089b57600080fd5b506102b56108aa3660046128f0565b61142a565b3480156108bb57600080fd5b506102b56108ca366004612cb8565b6114f7565b3480156108db57600080fd5b506108ef6108ea3660046127e5565b6115b6565b6040516102ef9796959493929190612db4565b34801561090e57600080fd5b506102b561091d366004612e13565b6116c8565b34801561092e57600080fd5b506102b561093d3660046127e5565b611a61565b34801561094e57600080fd5b50600061042d565b34801561096257600080fd5b506109906109713660046127e5565b6000908152600260205260409020600a0154600160a01b900460ff1690565b6040516102ef9190612e30565b3480156109a957600080fd5b50600954610524906001600160a01b031681565b3480156109c957600080fd5b506102b56109d8366004612cdd565b611aac565b3480156109e957600080fd5b506102b56109f8366004612e43565b611ab9565b348015610a0957600080fd5b506104ca60045481565b348015610a1f57600080fd5b506104ca610a2e366004612e81565b611cb9565b600082815260026020526040812060068101548291610a67918591600160601b90910460ff16906009810190600701611cdd565b915091505b9250929050565b6000818152600260205260409020600101805460609190610a9390612f42565b80601f0160208091040260200160405190810160405280929190818152602001828054610abf90612f42565b8015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505050509050919050565b6000838152600260205260409020606090600301610b37818585611db7565b9150505b9392505050565b60008281526002602052604090205482906001600160a01b03163314610b835760405162461bcd60e51b8152600401610b7a90612f7d565b60405180910390fd5b600083815260026020908152604091829020600a0180546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ffc7e26c4fffcd77fc52c81b32a6a6b7838b5592ced8c14c1a46e2b4a322c568a91015b60405180910390a1505050565b60008281526002602052604090205482906001600160a01b03163314610c265760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602052604090206006015463ffffffff8381166401000000009092041614610cb957600083815260026020908152604091829020600601805467ffffffff00000000191664010000000063ffffffff8716908102919091179091558251868152918201527f3e49e2efeacab7e8344acd4e7940449bf62039aa3734c34fa6d3525654be81019101610be1565b505050565b6000610cd38c8c8c8c8c8c8c8c8c8c8c611e9e565b9c9b505050505050505050505050565b60008281526002602081905260408220908101548291610a679185916201000090910460ff16906005810190600301611cdd565b610d278686866001878787611f90565b505050505050565b610d3b828260006120d5565b5050565b60008381526002602052604090205483906001600160a01b03163314610d775760405162461bcd60e51b8152600401610b7a90612f7d565b6000848152600260209081526040918290209151610d99926001019101612fa4565b604051602081830303815290604052805190602001208383604051602001610dc2929190613040565b6040516020818303038152906040528051906020012014610e36576000848152600260205260409020610df9906001018484612704565b507f6218b53065a32d32b3f52d9ad728c1b826a2aae15fc1ee92f83836debbcc1029848484604051610e2d93929190613050565b60405180910390a15b50505050565b610d278686866000878787611f90565b610e5b85856001868686612148565b5050505050565b6000818152600260205260408120600a01546001600160a01b031680610e9f5750506000908152600260205260409020546001600160a01b031690565b92915050565b6000838152600260205260409020606090600701610b37818585611db7565b60008281526002602052604090205482906001600160a01b03163314610efc5760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ff68f2d4b68e0d54a81a3b8e53403ddec34a1e288cf6a6f6b3621c0a47b6e36f99101610be1565b6000818152600260205260408120610f76906003013361215f565b90508015610d3b577f55e867ccc9ac324e2c193ce4ed25397fb890213c704685f2c9fbe5bd7507298682335b604080519283526001600160a01b039091166020830152015b60405180910390a15050565b610d3b828260016120d5565b60008b8152600260205260409020548b906001600160a01b0316331461100b5760405162461bcd60e51b8152600401610b7a90612f7d565b61101e8c8c8c8c8c8c8c8c8c8c8c612174565b505050505050505050505050565b60008087873060405160200161104493929190613086565b60408051601f198184030181529190528051602090910120905060008061106d878901896127b5565b91509150826005541480156110935750806001600160a01b03168b6001600160a01b0316145b80156110b857506000828152600260205260409020546001600160a01b038681169116145b806110cb57506001600160a01b03851630145b9b9a5050505050505050505050565b60008281526002602052604090205482906001600160a01b031633146111125760405162461bcd60e51b8152600401610b7a90612f7d565b6000838152600260208190526040909120015462010000900460ff16151582151514610cb957600083815260026020818152604092839020909101805462ff0000191662010000861515908102919091179091558251868152918201527f4666a8529dea37114f2ecc11706d613f7a59a7967f8467da6877820b83d405a19101610be1565b610cb983838360016121d3565b60008281526002602052604090205482906001600160a01b031633146111dc5760405162461bcd60e51b8152600401610b7a90612f7d565b6000838152600260205260409020600a0154600160a01b900460ff16600181111561120957611209612d15565b82600181111561121b5761121b612d15565b14610cb9576000838152600260205260409020600a01805483919060ff60a01b1916600160a01b83600181111561125457611254612d15565b02179055507ff81d9cc918f72edfc74e6b61d4e19ef9a739e94a0e9715b108e6af62275142ef8383604051610be19291906130ac565b60008181526002602052604090205481906001600160a01b031633146112c25760405162461bcd60e51b8152600401610b7a90612f7d565b60008281526008602052604090205460ff16610d3b5760008281526008602052604090819020805460ff19166001179055517f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa615590610fbb9084815260200190565b60008281526002602052604090205482906001600160a01b0316331461135b5760405162461bcd60e51b8152600401610b7a90612f7d565b6127108261ffff1611156113a35760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081c195c98d95b9d608a1b6044820152606401610b7a565b6000838152600260208190526040909120015461ffff838116911614610cb957600083815260026020818152604092839020909101805461ffff191661ffff86169081179091558251868152918201527f9c6f3e426c05d512408d4ecf517e5155756288155088ad45a81c0e111e3d18549101610be1565b610e5b85856000868686612148565b60008281526002602052604090205482906001600160a01b031633146114625760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602052604090206006015463ffffffff838116600160401b9092041614610cb95760008381526002602090815260409182902060060180546bffffffff00000000000000001916600160401b63ffffffff8716908102919091179091558251868152918201527ff0275a50e761f3b1635fa59ce199b1f2268b3fcb7fbdfb18c21aa3d2d78aa7b79101610be1565b60008281526002602052604090205482906001600160a01b0316331461152f5760405162461bcd60e51b8152600401610b7a90612f7d565b600083815260026020526040902060060154600160601b900460ff16151582151514610cb957600083815260026020908152604091829020600601805460ff60601b1916600160601b861515908102919091179091558251868152918201527fc906280af595fe94779bb9a972f24fe4e0ed7f76bebb4ee0eb9a5f30d6dd4c879101610be1565b60008181526002602081905260408220805460068201549282015460019092018054859485948594606094869485946001600160a01b039093169363ffffffff808516946401000000008104821694600160401b90910490911692909161ffff8116916201000090910460ff1690839061162f90612f42565b80601f016020809104026020016040519081016040528092919081815260200182805461165b90612f42565b80156116a85780601f1061167d576101008083540402835291602001916116a8565b820191906000526020600020905b81548152906001019060200180831161168b57829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600054610100900460ff16158080156116e85750600054600160ff909116105b806117025750303b158015611702575060005460ff166001145b6117655760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b7a565b6000805460ff191660011790558015611788576000805461ff0019166101001790555b600980546001600160a01b0319166001600160a01b038416908117909155604080516381fa6cd360e01b815290516381fa6cd391600480820192602092909190829003018186803b1580156117dc57600080fd5b505afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906130bc565b6040805163a99e7e2960e01b81526004810191909152602960448201527f2875696e74323536206d61726b657449642c2061646472657373206c656e646560648201526872416464726573732960b81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b15801561189f57600080fd5b505af11580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d791906130d9565b600155600954604080516381fa6cd360e01b815290516001600160a01b03909216916381fa6cd391600480820192602092909190829003018186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195791906130bc565b6040805163a99e7e2960e01b81526004810191909152602b60448201527f2875696e74323536206d61726b657449642c206164647265737320626f72726f60648201526a776572416464726573732960a81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b1580156119e457600080fd5b505af11580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c91906130d9565b6006558015610d3b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610fbb565b6000818152600260205260408120611a7c906007013361215f565b90508015610d3b577f914ccbaf2f5c9c2f4b7c6be3497b6b2ceb6ce2d050aec6eb2e0e31b8f9f67f0c8233610fa2565b610cb983838360006121d3565b60008381526002602052604090205483906001600160a01b03163314611af15760405162461bcd60e51b8152600401610b7a90612f7d565b6000836001811115611b0557611b05612d15565b1480611b3157506001836001811115611b2057611b20612d15565b148015611b31575063ffffffff8216155b611b925760405162461bcd60e51b815260206004820152602c60248201527f6d6f6e74686c79207061796d656e74206379636c65206475726174696f6e206360448201526b185b9b9bdd081899481cd95d60a21b6064820152608401610b7a565b60008481526002602052604081209080856001811115611bb457611bb4612d15565b14611bc25762278d00611bc4565b835b600a830154909150600160a81b900460ff166001811115611be757611be7612d15565b856001811115611bf957611bf9612d15565b141580611c135750600682015463ffffffff828116911614155b15610d27576000868152600260205260409020600a01805486919060ff60a81b1916600160a81b836001811115611c4c57611c4c612d15565b021790555060008681526002602052604090819020600601805463ffffffff191663ffffffff8416179055517fbb20033c58b125e31641bfd5e2f4bd906d684e27472fab0648527cc39cb2918c90611ca9908890889085906130f2565b60405180910390a1505050505050565b6000611ccf8a8a8a8a8a8a8a6000808c8c611e9e565b9a9950505050505050505050565b6000808415611da957611cf08387612330565b8015611d8657506009546001600160a01b03878116600090815260208790526040908190205490516330cd251f60e21b8152600481019190915291169063c334947c9060240160206040518083038186803b158015611d4e57600080fd5b505afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d86919061311c565b6001600160a01b0387166000908152602086905260409020549092509050611dae565b600191505b94509492505050565b60606000611dc485612352565b90506000611dd2848661314f565b9050818111611e95576000611de7858361316e565b905082811115611df45750815b611dfe8282613186565b67ffffffffffffffff811115611e1657611e1661319d565b604051908082528060200260200182016040528015611e3f578160200160208202803683370190505b509350815b81811015611e9257611e56888261235c565b858281518110611e6857611e686131b3565b6001600160a01b039092166020928302919091019091015280611e8a816131c9565b915050611e44565b50505b50509392505050565b60006001600160a01b038c16611eee5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610b7a565b600460008154611efd906131c9565b9182905550600081815260026020526040902080546001600160a01b0319166001600160a01b038f161790559050611f3e818c87878e8e8e8d8f8c8c612174565b8b6001600160a01b03167fa69fa77c6a90b171cf4e3d9a9dd6c4e56fbd1fbbdcf3925eaf600ccaa917feab82604051611f7991815260200190565b60405180910390a29b9a5050505050505050505050565b83611f9d57600654611fa1565b6001545b806005819055506000808989604051602001611fd09291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405290506000600260008c815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600960009054906101000a90046001600160a01b03166001600160a01b031663930ed0138b6005548c600087878e8e8e6040518a63ffffffff1660e01b8152600401612063999897969594939291906131e4565b602060405180830381600087803b15801561207d57600080fd5b505af1158015612091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b591906130d9565b925050506120c589898389612368565b5050600060055550505050505050565b6000838152600260205260409020546001600160a01b0316336001600160a01b03161461213b5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610b7a565b6000610e5b84848461246a565b600061215587878761246a565b5050505050505050565b6000610b3b836001600160a01b03841661257a565b61217f8b8383610d3f565b6121898b88610bee565b6121938b8761142a565b61219d8b86611323565b6121a78b846110da565b6121b18b856114f7565b6121bb8b8a6111a4565b6121c68b898c611ab9565b5050505050505050505050565b806121e0576006546121e4565b6001545b60058190556000858152600260205260409020546001600160a01b0316336001600160a01b03161461224f5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610b7a565b6009546005546040516000926001600160a01b0316916309a954cd9188919088908690612294908d9086906020019182526001600160a01b0316602082015260400190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016122c3959493929190613245565b602060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231591906130d9565b905061232386868386612368565b5050600060055550505050565b6001600160a01b03811660009081526001830160205260408120541515610b3b565b6000610e9f825490565b6000610b3b838361266d565b80156123f05760008481526002602081815260408084206001600160a01b038816855260058101835290842086905592879052526123a99060030184612697565b50604080518581526001600160a01b03851660208201527f75675690de0899b0b869d83b44b2d926ac594426b2a0286c478ecdf815cbd33e910160405180910390a1610e36565b60008481526002602081815260408084206001600160a01b0388168552600981018352908420869055928790525261242b9060070184612697565b50604080518581526001600160a01b03851660208201527f0c2cfc7e7a16ebee66e77fb314f4bfdb5505e33e77d41c0c60604efc70fd926b9101610e2d565b600081156124f5575060008381526002602081815260408084206001600160a01b038716855260058101835290842054938790529190526124ae906003018461215f565b50604080518581526001600160a01b03851660208201527f6e7c30dc58d3daa1458c79b66ca464f5f3d8a23d9e50eb14daf1cb0923bf2900910160405180910390a1610b3b565b5060008381526002602081815260408084206001600160a01b03871685526009810183529084205493879052919052612531906007018461215f565b50604080518581526001600160a01b03851660208201527fe76a3e8b220b622b9fc2a655ab867687a93f195809eb3639f422e60936ff7eb4910160405180910390a19392505050565b6000818152600183016020526040812054801561266357600061259e600183613186565b85549091506000906125b290600190613186565b90508181146126175760008660000182815481106125d2576125d26131b3565b90600052602060002001549050808760000184815481106125f5576125f56131b3565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061262857612628613283565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e9f565b6000915050610e9f565b6000826000018281548110612684576126846131b3565b9060005260206000200154905092915050565b6000610b3b836001600160a01b03841660006126c6838360009081526001919091016020526040902054151590565b6126fc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e9f565b506000610e9f565b82805461271090612f42565b90600052602060002090601f0160209004810192826127325760008555612778565b82601f1061274b5782800160ff19823516178555612778565b82800160010185558215612778579182015b8281111561277857823582559160200191906001019061275d565b50612784929150612788565b5090565b5b808211156127845760008155600101612789565b6001600160a01b03811681146127b257600080fd5b50565b600080604083850312156127c857600080fd5b8235915060208301356127da8161279d565b809150509250929050565b6000602082840312156127f757600080fd5b5035919050565b6000815180845260005b8181101561282457602081850181015186830182015201612808565b81811115612836576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610b3b60208301846127fe565b60008060006060848603121561287357600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156128cb5783516001600160a01b0316835292840192918401916001016128a6565b50909695505050505050565b803563ffffffff811681146128eb57600080fd5b919050565b6000806040838503121561290357600080fd5b82359150612913602084016128d7565b90509250929050565b803561ffff811681146128eb57600080fd5b80151581146127b257600080fd5b600281106127b257600080fd5b60008083601f84011261295b57600080fd5b50813567ffffffffffffffff81111561297357600080fd5b602083019150836020828501011115610a6c57600080fd5b60008060008060008060008060008060006101408c8e0312156129ad57600080fd5b8b356129b88161279d565b9a506129c660208d016128d7565b99506129d460408d016128d7565b98506129e260608d016128d7565b97506129f060808d0161291c565b965060a08c0135612a008161292e565b955060c08c0135612a108161292e565b945060e08c0135612a208161293c565b93506101008c0135612a318161293c565b92506101208c013567ffffffffffffffff811115612a4e57600080fd5b612a5a8e828f01612949565b915080935050809150509295989b509295989b9093969950565b803560ff811681146128eb57600080fd5b60008060008060008060c08789031215612a9e57600080fd5b863595506020870135612ab08161279d565b945060408701359350612ac560608801612a74565b92506080870135915060a087013590509295509295509295565b600080600060408486031215612af457600080fd5b83359250602084013567ffffffffffffffff811115612b1257600080fd5b612b1e86828701612949565b9497909650939450505050565b600080600080600060a08688031215612b4357600080fd5b853594506020860135612b558161279d565b9350612b6360408701612a74565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060006101408c8e031215612b9d57600080fd5b8b359a50612bad60208d016128d7565b995060408c0135612bbd8161293c565b985060608c0135612bcd8161293c565b9750612bdb60808d016128d7565b9650612be960a08d016128d7565b9550612bf760c08d0161291c565b945060e08c0135612c078161292e565b93506101008c0135612a318161292e565b600080600080600080600060a0888a031215612c3357600080fd5b8735612c3e8161279d565b9650602088013567ffffffffffffffff80821115612c5b57600080fd5b612c678b838c01612949565b909850965060408a0135915080821115612c8057600080fd5b50612c8d8a828b01612949565b909550935050606088013591506080880135612ca88161279d565b8091505092959891949750929550565b60008060408385031215612ccb57600080fd5b8235915060208301356127da8161292e565b600080600060608486031215612cf257600080fd5b833592506020840135612d048161279d565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b600281106127b257634e487b7160e01b600052602160045260246000fd5b63ffffffff8316815260408101612d5f83612d2b565b8260208301529392505050565b60008060408385031215612d7f57600080fd5b8235915060208301356127da8161293c565b60008060408385031215612da457600080fd5b823591506129136020840161291c565b6001600160a01b038816815263ffffffff878116602083015286811660408301528516606082015260e060808201819052600090612df4908301866127fe565b61ffff9490941660a08301525090151560c09091015295945050505050565b600060208284031215612e2557600080fd5b8135610b3b8161279d565b60208101612e3d83612d2b565b91905290565b600080600060608486031215612e5857600080fd5b833592506020840135612e6a8161293c565b9150612e78604085016128d7565b90509250925092565b60008060008060008060008060006101008a8c031215612ea057600080fd5b8935612eab8161279d565b9850612eb960208b016128d7565b9750612ec760408b016128d7565b9650612ed560608b016128d7565b9550612ee360808b0161291c565b945060a08a0135612ef38161292e565b935060c08a0135612f038161292e565b925060e08a013567ffffffffffffffff811115612f1f57600080fd5b612f2b8c828d01612949565b915080935050809150509295985092959850929598565b600181811c90821680612f5657607f821691505b60208210811415612f7757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b600080835481600182811c915080831680612fc057607f831692505b6020808410821415612fe057634e487b7160e01b86526022600452602486fd5b818015612ff4576001811461300557613032565b60ff19861689528489019650613032565b60008a81526020902060005b8681101561302a5781548b820152908501908301613011565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b82815260408101612d5f83612d2b565b6000602082840312156130ce57600080fd5b8151610b3b8161279d565b6000602082840312156130eb57600080fd5b5051919050565b8381526060810161310284612d2b565b83602083015263ffffffff83166040830152949350505050565b60006020828403121561312e57600080fd5b8151610b3b8161292e565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561316957613169613139565b500290565b6000821982111561318157613181613139565b500190565b60008282101561319857613198613139565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156131dd576131dd613139565b5060010190565b600061012060018060a01b03808d1684528b60208501528a60408501528960608501528160808501526132198285018a6127fe565b971660a0840152505060ff9390931660c084015260e08301919091526101009091015295945050505050565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061327860a08301846127fe565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c074c40012994dc2125608cac83e0768790fb2ae51755c124fcacd95cad98c3f64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102975760003560e01c80637f027a1a1161015a578063bd536e6e116100c1578063d6e794dd1161007a578063d6e794dd14610956578063ddfafef61461099d578063e4050e29146109bd578063e690e84e146109dd578063ec979082146109fd578063f9fa934514610a1357600080fd5b8063bd536e6e1461088f578063be99279b146108af578063bfacba3d146108cf578063c4d66de814610902578063c995cddc14610922578063ce46e0461461094257600080fd5b806397eb575b1161011357806397eb575b14610796578063a5630f19146107b6578063aa542fa51461080f578063ae4180951461082f578063b6b6d77f1461084f578063bc4c34951461086f57600080fd5b80637f027a1a1461069d5780638b636632146106bd5780638b975cda146106dd5780638eff9ea4146106fd578063947a75b41461076357806394e8e97e1461077657600080fd5b80633ef19a9b116101fe578063583b16ae116101b7578063583b16ae146105e75780636054b175146106075780636441379614610627578063679700d9146106475780637694d2ec1461065d5780637cfc18181461067d57600080fd5b80633ef19a9b1461053c5780633fa7f6881461055c5780634148f94c1461057c578063455154e514610591578063532f5694146105b157806354fd4d50146105d157600080fd5b80631db2b0d9116102505780631db2b0d91461043d5780631ebc7da81461046a5780632f1be8f91461048a578063344e553d146104aa5780633c0db788146104d85780633d369029146104ee57600080fd5b8063066e7513146102bc578063082fc54d146102f85780630a2e98e41461034a57806311bed5bb146103925780631a4808d2146103d05780631cc672df146103fd57600080fd5b366102b757604051631574f9f360e01b815260040160405180910390fd5b005b600080fd5b3480156102c857600080fd5b506102dc6102d73660046127b5565b610a33565b6040805192151583526020830191909152015b60405180910390f35b34801561030457600080fd5b506103356103133660046127e5565b600090815260026020526040902060060154600160401b900463ffffffff1690565b60405163ffffffff90911681526020016102ef565b34801561035657600080fd5b5061037f6103653660046127e5565b6000908152600260208190526040909120015461ffff1690565b60405161ffff90911681526020016102ef565b34801561039e57600080fd5b506103356103ad3660046127e5565b600090815260026020526040902060060154640100000000900463ffffffff1690565b3480156103dc57600080fd5b506103f06103eb3660046127e5565b610a73565b6040516102ef919061284b565b34801561040957600080fd5b5061042d6104183660046127e5565b60009081526008602052604090205460ff1690565b60405190151581526020016102ef565b34801561044957600080fd5b5061045d61045836600461285e565b610b18565b6040516102ef919061288a565b34801561047657600080fd5b506102b56104853660046127b5565b610b42565b34801561049657600080fd5b506102b56104a53660046128f0565b610bee565b3480156104b657600080fd5b506104ca6104c536600461298b565b610cbe565b6040519081526020016102ef565b3480156104e457600080fd5b506104ca60015481565b3480156104fa57600080fd5b506105246105093660046127e5565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016102ef565b34801561054857600080fd5b506102dc6105573660046127b5565b610ce3565b34801561056857600080fd5b506102b5610577366004612a85565b610d17565b34801561058857600080fd5b506104ca600881565b34801561059d57600080fd5b506102b56105ac3660046127b5565b610d2f565b3480156105bd57600080fd5b506102b56105cc366004612adf565b610d3f565b3480156105dd57600080fd5b506104ca60075481565b3480156105f357600080fd5b506102b5610602366004612a85565b610e3c565b34801561061357600080fd5b506102b5610622366004612b2b565b610e4c565b34801561063357600080fd5b506105246106423660046127e5565b610e62565b34801561065357600080fd5b506104ca60065481565b34801561066957600080fd5b5061045d61067836600461285e565b610ea5565b34801561068957600080fd5b506102b56106983660046127b5565b610ec4565b3480156106a957600080fd5b506102b56106b83660046127e5565b610f5b565b3480156106c957600080fd5b506102b56106d83660046127b5565b610fc7565b3480156106e957600080fd5b506102b56106f8366004612b7b565b610fd3565b34801561070957600080fd5b5061074c6107183660046127e5565b6000908152600260208190526040909120908101546006909101546201000090910460ff90811692600160601b9092041690565b6040805192151583529015156020830152016102ef565b61042d610771366004612c18565b61102c565b34801561078257600080fd5b506102b5610791366004612cb8565b6110da565b3480156107a257600080fd5b506102b56107b1366004612cdd565b611197565b3480156107c257600080fd5b506108016107d13660046127e5565b60009081526002602052604090206006810154600a9091015463ffffffff90911691600160a81b90910460ff1690565b6040516102ef929190612d49565b34801561081b57600080fd5b506102b561082a366004612d6c565b6111a4565b34801561083b57600080fd5b506102b561084a3660046127e5565b61128a565b34801561085b57600080fd5b506102b561086a366004612d91565b611323565b34801561087b57600080fd5b506102b561088a366004612b2b565b61141b565b34801561089b57600080fd5b506102b56108aa3660046128f0565b61142a565b3480156108bb57600080fd5b506102b56108ca366004612cb8565b6114f7565b3480156108db57600080fd5b506108ef6108ea3660046127e5565b6115b6565b6040516102ef9796959493929190612db4565b34801561090e57600080fd5b506102b561091d366004612e13565b6116c8565b34801561092e57600080fd5b506102b561093d3660046127e5565b611a61565b34801561094e57600080fd5b50600061042d565b34801561096257600080fd5b506109906109713660046127e5565b6000908152600260205260409020600a0154600160a01b900460ff1690565b6040516102ef9190612e30565b3480156109a957600080fd5b50600954610524906001600160a01b031681565b3480156109c957600080fd5b506102b56109d8366004612cdd565b611aac565b3480156109e957600080fd5b506102b56109f8366004612e43565b611ab9565b348015610a0957600080fd5b506104ca60045481565b348015610a1f57600080fd5b506104ca610a2e366004612e81565b611cb9565b600082815260026020526040812060068101548291610a67918591600160601b90910460ff16906009810190600701611cdd565b915091505b9250929050565b6000818152600260205260409020600101805460609190610a9390612f42565b80601f0160208091040260200160405190810160405280929190818152602001828054610abf90612f42565b8015610b0c5780601f10610ae157610100808354040283529160200191610b0c565b820191906000526020600020905b815481529060010190602001808311610aef57829003601f168201915b50505050509050919050565b6000838152600260205260409020606090600301610b37818585611db7565b9150505b9392505050565b60008281526002602052604090205482906001600160a01b03163314610b835760405162461bcd60e51b8152600401610b7a90612f7d565b60405180910390fd5b600083815260026020908152604091829020600a0180546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ffc7e26c4fffcd77fc52c81b32a6a6b7838b5592ced8c14c1a46e2b4a322c568a91015b60405180910390a1505050565b60008281526002602052604090205482906001600160a01b03163314610c265760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602052604090206006015463ffffffff8381166401000000009092041614610cb957600083815260026020908152604091829020600601805467ffffffff00000000191664010000000063ffffffff8716908102919091179091558251868152918201527f3e49e2efeacab7e8344acd4e7940449bf62039aa3734c34fa6d3525654be81019101610be1565b505050565b6000610cd38c8c8c8c8c8c8c8c8c8c8c611e9e565b9c9b505050505050505050505050565b60008281526002602081905260408220908101548291610a679185916201000090910460ff16906005810190600301611cdd565b610d278686866001878787611f90565b505050505050565b610d3b828260006120d5565b5050565b60008381526002602052604090205483906001600160a01b03163314610d775760405162461bcd60e51b8152600401610b7a90612f7d565b6000848152600260209081526040918290209151610d99926001019101612fa4565b604051602081830303815290604052805190602001208383604051602001610dc2929190613040565b6040516020818303038152906040528051906020012014610e36576000848152600260205260409020610df9906001018484612704565b507f6218b53065a32d32b3f52d9ad728c1b826a2aae15fc1ee92f83836debbcc1029848484604051610e2d93929190613050565b60405180910390a15b50505050565b610d278686866000878787611f90565b610e5b85856001868686612148565b5050505050565b6000818152600260205260408120600a01546001600160a01b031680610e9f5750506000908152600260205260409020546001600160a01b031690565b92915050565b6000838152600260205260409020606090600701610b37818585611db7565b60008281526002602052604090205482906001600160a01b03163314610efc5760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251868152918201527ff68f2d4b68e0d54a81a3b8e53403ddec34a1e288cf6a6f6b3621c0a47b6e36f99101610be1565b6000818152600260205260408120610f76906003013361215f565b90508015610d3b577f55e867ccc9ac324e2c193ce4ed25397fb890213c704685f2c9fbe5bd7507298682335b604080519283526001600160a01b039091166020830152015b60405180910390a15050565b610d3b828260016120d5565b60008b8152600260205260409020548b906001600160a01b0316331461100b5760405162461bcd60e51b8152600401610b7a90612f7d565b61101e8c8c8c8c8c8c8c8c8c8c8c612174565b505050505050505050505050565b60008087873060405160200161104493929190613086565b60408051601f198184030181529190528051602090910120905060008061106d878901896127b5565b91509150826005541480156110935750806001600160a01b03168b6001600160a01b0316145b80156110b857506000828152600260205260409020546001600160a01b038681169116145b806110cb57506001600160a01b03851630145b9b9a5050505050505050505050565b60008281526002602052604090205482906001600160a01b031633146111125760405162461bcd60e51b8152600401610b7a90612f7d565b6000838152600260208190526040909120015462010000900460ff16151582151514610cb957600083815260026020818152604092839020909101805462ff0000191662010000861515908102919091179091558251868152918201527f4666a8529dea37114f2ecc11706d613f7a59a7967f8467da6877820b83d405a19101610be1565b610cb983838360016121d3565b60008281526002602052604090205482906001600160a01b031633146111dc5760405162461bcd60e51b8152600401610b7a90612f7d565b6000838152600260205260409020600a0154600160a01b900460ff16600181111561120957611209612d15565b82600181111561121b5761121b612d15565b14610cb9576000838152600260205260409020600a01805483919060ff60a01b1916600160a01b83600181111561125457611254612d15565b02179055507ff81d9cc918f72edfc74e6b61d4e19ef9a739e94a0e9715b108e6af62275142ef8383604051610be19291906130ac565b60008181526002602052604090205481906001600160a01b031633146112c25760405162461bcd60e51b8152600401610b7a90612f7d565b60008281526008602052604090205460ff16610d3b5760008281526008602052604090819020805460ff19166001179055517f9dc30b8eda31a6a144e092e5de600955523a6a925cc15cc1d1b9b4872cfa615590610fbb9084815260200190565b60008281526002602052604090205482906001600160a01b0316331461135b5760405162461bcd60e51b8152600401610b7a90612f7d565b6127108261ffff1611156113a35760405162461bcd60e51b815260206004820152600f60248201526e1a5b9d985b1a59081c195c98d95b9d608a1b6044820152606401610b7a565b6000838152600260208190526040909120015461ffff838116911614610cb957600083815260026020818152604092839020909101805461ffff191661ffff86169081179091558251868152918201527f9c6f3e426c05d512408d4ecf517e5155756288155088ad45a81c0e111e3d18549101610be1565b610e5b85856000868686612148565b60008281526002602052604090205482906001600160a01b031633146114625760405162461bcd60e51b8152600401610b7a90612f7d565b60008381526002602052604090206006015463ffffffff838116600160401b9092041614610cb95760008381526002602090815260409182902060060180546bffffffff00000000000000001916600160401b63ffffffff8716908102919091179091558251868152918201527ff0275a50e761f3b1635fa59ce199b1f2268b3fcb7fbdfb18c21aa3d2d78aa7b79101610be1565b60008281526002602052604090205482906001600160a01b0316331461152f5760405162461bcd60e51b8152600401610b7a90612f7d565b600083815260026020526040902060060154600160601b900460ff16151582151514610cb957600083815260026020908152604091829020600601805460ff60601b1916600160601b861515908102919091179091558251868152918201527fc906280af595fe94779bb9a972f24fe4e0ed7f76bebb4ee0eb9a5f30d6dd4c879101610be1565b60008181526002602081905260408220805460068201549282015460019092018054859485948594606094869485946001600160a01b039093169363ffffffff808516946401000000008104821694600160401b90910490911692909161ffff8116916201000090910460ff1690839061162f90612f42565b80601f016020809104026020016040519081016040528092919081815260200182805461165b90612f42565b80156116a85780601f1061167d576101008083540402835291602001916116a8565b820191906000526020600020905b81548152906001019060200180831161168b57829003601f168201915b505050505092509650965096509650965096509650919395979092949650565b600054610100900460ff16158080156116e85750600054600160ff909116105b806117025750303b158015611702575060005460ff166001145b6117655760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b7a565b6000805460ff191660011790558015611788576000805461ff0019166101001790555b600980546001600160a01b0319166001600160a01b038416908117909155604080516381fa6cd360e01b815290516381fa6cd391600480820192602092909190829003018186803b1580156117dc57600080fd5b505afa1580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181491906130bc565b6040805163a99e7e2960e01b81526004810191909152602960448201527f2875696e74323536206d61726b657449642c2061646472657373206c656e646560648201526872416464726573732960b81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b15801561189f57600080fd5b505af11580156118b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d791906130d9565b600155600954604080516381fa6cd360e01b815290516001600160a01b03909216916381fa6cd391600480820192602092909190829003018186803b15801561191f57600080fd5b505afa158015611933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195791906130bc565b6040805163a99e7e2960e01b81526004810191909152602b60448201527f2875696e74323536206d61726b657449642c206164647265737320626f72726f60648201526a776572416464726573732960a81b60848201523060248201526001600160a01b03919091169063a99e7e299060a401602060405180830381600087803b1580156119e457600080fd5b505af11580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c91906130d9565b6006558015610d3b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610fbb565b6000818152600260205260408120611a7c906007013361215f565b90508015610d3b577f914ccbaf2f5c9c2f4b7c6be3497b6b2ceb6ce2d050aec6eb2e0e31b8f9f67f0c8233610fa2565b610cb983838360006121d3565b60008381526002602052604090205483906001600160a01b03163314611af15760405162461bcd60e51b8152600401610b7a90612f7d565b6000836001811115611b0557611b05612d15565b1480611b3157506001836001811115611b2057611b20612d15565b148015611b31575063ffffffff8216155b611b925760405162461bcd60e51b815260206004820152602c60248201527f6d6f6e74686c79207061796d656e74206379636c65206475726174696f6e206360448201526b185b9b9bdd081899481cd95d60a21b6064820152608401610b7a565b60008481526002602052604081209080856001811115611bb457611bb4612d15565b14611bc25762278d00611bc4565b835b600a830154909150600160a81b900460ff166001811115611be757611be7612d15565b856001811115611bf957611bf9612d15565b141580611c135750600682015463ffffffff828116911614155b15610d27576000868152600260205260409020600a01805486919060ff60a81b1916600160a81b836001811115611c4c57611c4c612d15565b021790555060008681526002602052604090819020600601805463ffffffff191663ffffffff8416179055517fbb20033c58b125e31641bfd5e2f4bd906d684e27472fab0648527cc39cb2918c90611ca9908890889085906130f2565b60405180910390a1505050505050565b6000611ccf8a8a8a8a8a8a8a6000808c8c611e9e565b9a9950505050505050505050565b6000808415611da957611cf08387612330565b8015611d8657506009546001600160a01b03878116600090815260208790526040908190205490516330cd251f60e21b8152600481019190915291169063c334947c9060240160206040518083038186803b158015611d4e57600080fd5b505afa158015611d62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d86919061311c565b6001600160a01b0387166000908152602086905260409020549092509050611dae565b600191505b94509492505050565b60606000611dc485612352565b90506000611dd2848661314f565b9050818111611e95576000611de7858361316e565b905082811115611df45750815b611dfe8282613186565b67ffffffffffffffff811115611e1657611e1661319d565b604051908082528060200260200182016040528015611e3f578160200160208202803683370190505b509350815b81811015611e9257611e56888261235c565b858281518110611e6857611e686131b3565b6001600160a01b039092166020928302919091019091015280611e8a816131c9565b915050611e44565b50505b50509392505050565b60006001600160a01b038c16611eee5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206f776e6572206164647265737360581b6044820152606401610b7a565b600460008154611efd906131c9565b9182905550600081815260026020526040902080546001600160a01b0319166001600160a01b038f161790559050611f3e818c87878e8e8e8d8f8c8c612174565b8b6001600160a01b03167fa69fa77c6a90b171cf4e3d9a9dd6c4e56fbd1fbbdcf3925eaf600ccaa917feab82604051611f7991815260200190565b60405180910390a29b9a5050505050505050505050565b83611f9d57600654611fa1565b6001545b806005819055506000808989604051602001611fd09291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405290506000600260008c815260200190815260200160002060000160009054906101000a90046001600160a01b03169050600960009054906101000a90046001600160a01b03166001600160a01b031663930ed0138b6005548c600087878e8e8e6040518a63ffffffff1660e01b8152600401612063999897969594939291906131e4565b602060405180830381600087803b15801561207d57600080fd5b505af1158015612091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b591906130d9565b925050506120c589898389612368565b5050600060055550505050505050565b6000838152600260205260409020546001600160a01b0316336001600160a01b03161461213b5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610b7a565b6000610e5b84848461246a565b600061215587878761246a565b5050505050505050565b6000610b3b836001600160a01b03841661257a565b61217f8b8383610d3f565b6121898b88610bee565b6121938b8761142a565b61219d8b86611323565b6121a78b846110da565b6121b18b856114f7565b6121bb8b8a6111a4565b6121c68b898c611ab9565b5050505050505050505050565b806121e0576006546121e4565b6001545b60058190556000858152600260205260409020546001600160a01b0316336001600160a01b03161461224f5760405162461bcd60e51b81526020600482015260146024820152732737ba103a34329036b0b935b2ba1037bbb732b960611b6044820152606401610b7a565b6009546005546040516000926001600160a01b0316916309a954cd9188919088908690612294908d9086906020019182526001600160a01b0316602082015260400190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016122c3959493929190613245565b602060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231591906130d9565b905061232386868386612368565b5050600060055550505050565b6001600160a01b03811660009081526001830160205260408120541515610b3b565b6000610e9f825490565b6000610b3b838361266d565b80156123f05760008481526002602081815260408084206001600160a01b038816855260058101835290842086905592879052526123a99060030184612697565b50604080518581526001600160a01b03851660208201527f75675690de0899b0b869d83b44b2d926ac594426b2a0286c478ecdf815cbd33e910160405180910390a1610e36565b60008481526002602081815260408084206001600160a01b0388168552600981018352908420869055928790525261242b9060070184612697565b50604080518581526001600160a01b03851660208201527f0c2cfc7e7a16ebee66e77fb314f4bfdb5505e33e77d41c0c60604efc70fd926b9101610e2d565b600081156124f5575060008381526002602081815260408084206001600160a01b038716855260058101835290842054938790529190526124ae906003018461215f565b50604080518581526001600160a01b03851660208201527f6e7c30dc58d3daa1458c79b66ca464f5f3d8a23d9e50eb14daf1cb0923bf2900910160405180910390a1610b3b565b5060008381526002602081815260408084206001600160a01b03871685526009810183529084205493879052919052612531906007018461215f565b50604080518581526001600160a01b03851660208201527fe76a3e8b220b622b9fc2a655ab867687a93f195809eb3639f422e60936ff7eb4910160405180910390a19392505050565b6000818152600183016020526040812054801561266357600061259e600183613186565b85549091506000906125b290600190613186565b90508181146126175760008660000182815481106125d2576125d26131b3565b90600052602060002001549050808760000184815481106125f5576125f56131b3565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061262857612628613283565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e9f565b6000915050610e9f565b6000826000018281548110612684576126846131b3565b9060005260206000200154905092915050565b6000610b3b836001600160a01b03841660006126c6838360009081526001919091016020526040902054151590565b6126fc57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e9f565b506000610e9f565b82805461271090612f42565b90600052602060002090601f0160209004810192826127325760008555612778565b82601f1061274b5782800160ff19823516178555612778565b82800160010185558215612778579182015b8281111561277857823582559160200191906001019061275d565b50612784929150612788565b5090565b5b808211156127845760008155600101612789565b6001600160a01b03811681146127b257600080fd5b50565b600080604083850312156127c857600080fd5b8235915060208301356127da8161279d565b809150509250929050565b6000602082840312156127f757600080fd5b5035919050565b6000815180845260005b8181101561282457602081850181015186830182015201612808565b81811115612836576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610b3b60208301846127fe565b60008060006060848603121561287357600080fd5b505081359360208301359350604090920135919050565b6020808252825182820181905260009190848201906040850190845b818110156128cb5783516001600160a01b0316835292840192918401916001016128a6565b50909695505050505050565b803563ffffffff811681146128eb57600080fd5b919050565b6000806040838503121561290357600080fd5b82359150612913602084016128d7565b90509250929050565b803561ffff811681146128eb57600080fd5b80151581146127b257600080fd5b600281106127b257600080fd5b60008083601f84011261295b57600080fd5b50813567ffffffffffffffff81111561297357600080fd5b602083019150836020828501011115610a6c57600080fd5b60008060008060008060008060008060006101408c8e0312156129ad57600080fd5b8b356129b88161279d565b9a506129c660208d016128d7565b99506129d460408d016128d7565b98506129e260608d016128d7565b97506129f060808d0161291c565b965060a08c0135612a008161292e565b955060c08c0135612a108161292e565b945060e08c0135612a208161293c565b93506101008c0135612a318161293c565b92506101208c013567ffffffffffffffff811115612a4e57600080fd5b612a5a8e828f01612949565b915080935050809150509295989b509295989b9093969950565b803560ff811681146128eb57600080fd5b60008060008060008060c08789031215612a9e57600080fd5b863595506020870135612ab08161279d565b945060408701359350612ac560608801612a74565b92506080870135915060a087013590509295509295509295565b600080600060408486031215612af457600080fd5b83359250602084013567ffffffffffffffff811115612b1257600080fd5b612b1e86828701612949565b9497909650939450505050565b600080600080600060a08688031215612b4357600080fd5b853594506020860135612b558161279d565b9350612b6360408701612a74565b94979396509394606081013594506080013592915050565b60008060008060008060008060008060006101408c8e031215612b9d57600080fd5b8b359a50612bad60208d016128d7565b995060408c0135612bbd8161293c565b985060608c0135612bcd8161293c565b9750612bdb60808d016128d7565b9650612be960a08d016128d7565b9550612bf760c08d0161291c565b945060e08c0135612c078161292e565b93506101008c0135612a318161292e565b600080600080600080600060a0888a031215612c3357600080fd5b8735612c3e8161279d565b9650602088013567ffffffffffffffff80821115612c5b57600080fd5b612c678b838c01612949565b909850965060408a0135915080821115612c8057600080fd5b50612c8d8a828b01612949565b909550935050606088013591506080880135612ca88161279d565b8091505092959891949750929550565b60008060408385031215612ccb57600080fd5b8235915060208301356127da8161292e565b600080600060608486031215612cf257600080fd5b833592506020840135612d048161279d565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b600281106127b257634e487b7160e01b600052602160045260246000fd5b63ffffffff8316815260408101612d5f83612d2b565b8260208301529392505050565b60008060408385031215612d7f57600080fd5b8235915060208301356127da8161293c565b60008060408385031215612da457600080fd5b823591506129136020840161291c565b6001600160a01b038816815263ffffffff878116602083015286811660408301528516606082015260e060808201819052600090612df4908301866127fe565b61ffff9490941660a08301525090151560c09091015295945050505050565b600060208284031215612e2557600080fd5b8135610b3b8161279d565b60208101612e3d83612d2b565b91905290565b600080600060608486031215612e5857600080fd5b833592506020840135612e6a8161293c565b9150612e78604085016128d7565b90509250925092565b60008060008060008060008060006101008a8c031215612ea057600080fd5b8935612eab8161279d565b9850612eb960208b016128d7565b9750612ec760408b016128d7565b9650612ed560608b016128d7565b9550612ee360808b0161291c565b945060a08a0135612ef38161292e565b935060c08a0135612f038161292e565b925060e08a013567ffffffffffffffff811115612f1f57600080fd5b612f2b8c828d01612949565b915080935050809150509295985092959850929598565b600181811c90821680612f5657607f821691505b60208210811415612f7757634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b600080835481600182811c915080831680612fc057607f831692505b6020808410821415612fe057634e487b7160e01b86526022600452602486fd5b818015612ff4576001811461300557613032565b60ff19861689528489019650613032565b60008a81526020902060005b8681101561302a5781548b820152908501908301613011565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b82815260408101612d5f83612d2b565b6000602082840312156130ce57600080fd5b8151610b3b8161279d565b6000602082840312156130eb57600080fd5b5051919050565b8381526060810161310284612d2b565b83602083015263ffffffff83166040830152949350505050565b60006020828403121561312e57600080fd5b8151610b3b8161292e565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561316957613169613139565b500290565b6000821982111561318157613181613139565b500190565b60008282101561319857613198613139565b500390565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006000198214156131dd576131dd613139565b5060010190565b600061012060018060a01b03808d1684528b60208501528a60408501528960608501528160808501526132198285018a6127fe565b971660a0840152505060ff9390931660c084015260e08301919091526101009091015295945050505050565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061327860a08301846127fe565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c074c40012994dc2125608cac83e0768790fb2ae51755c124fcacd95cad98c3f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attestBorrower(uint256,address,uint256)": {
        "details": "See {_attestStakeholder}."
      },
      "attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "See {_attestStakeholderViaDelegation}."
      },
      "attestLender(uint256,address,uint256)": {
        "details": "See {_attestStakeholder}."
      },
      "attestLender(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "See {_attestStakeholderViaDelegation}."
      },
      "borrowerExitMarket(uint256)": {
        "params": {
          "_marketId": "The market ID to leave."
        }
      },
      "closeMarket(uint256)": {
        "params": {
          "_marketId": "The market ID for the market to close."
        }
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "details": "Uses the default EMI payment type.",
        "params": {
          "_bidExpirationTime": "Length of time in seconds before pending bids expire.",
          "_initialOwner": "Address who will initially own the market.",
          "_paymentCycleDuration": "Length of time in seconds before a bid's next payment is required to be made.",
          "_paymentDefaultDuration": "Length of time in seconds before a loan is considered in default for non-payment.",
          "_requireBorrowerAttestation": "Boolean that indicates if borrowers require attestation to join market.",
          "_requireLenderAttestation": "Boolean that indicates if lenders require attestation to join market.",
          "_uri": "URI string to get metadata details about the market."
        },
        "returns": {
          "marketId_": "The market ID of the newly created market."
        }
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,uint8,string)": {
        "params": {
          "_bidExpirationTime": "Length of time in seconds before pending bids expire.",
          "_initialOwner": "Address who will initially own the market.",
          "_paymentCycleDuration": "Length of time in seconds before a bid's next payment is required to be made.",
          "_paymentCycleType": "The payment cycle type for loans in the market - Seconds or Monthly",
          "_paymentDefaultDuration": "Length of time in seconds before a loan is considered in default for non-payment.",
          "_paymentType": "The payment type for loans in the market.",
          "_requireBorrowerAttestation": "Boolean that indicates if borrowers require attestation to join market.",
          "_requireLenderAttestation": "Boolean that indicates if lenders require attestation to join market.",
          "_uri": "URI string to get metadata details about the market."
        },
        "returns": {
          "marketId_": "The market ID of the newly created market."
        }
      },
      "getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)": {
        "params": {
          "_marketId": "The ID of the market.",
          "_page": "Page index to start from.",
          "_perPage": "Number of items in a page to return."
        },
        "returns": {
          "_0": "Array of addresses that have been added to a market."
        }
      },
      "getAllVerifiedLendersForMarket(uint256,uint256,uint256)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_page": "Page index to start from.",
          "_perPage": "Number of items in a page to return."
        },
        "returns": {
          "_0": "Array of addresses that have been added to a market."
        }
      },
      "getMarketAttestationRequirements(uint256)": {
        "params": {
          "_marketId": "The ID of the market."
        }
      },
      "getMarketData(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        }
      },
      "getMarketFeeRecipient(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "The address of a market's fee recipient."
        }
      },
      "getMarketOwner(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "The address of a market's owner."
        }
      },
      "getMarketURI(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "URI of a market's metadata."
        }
      },
      "getMarketplaceFee(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "fee": "in basis points"
        }
      },
      "getPaymentCycle(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "Duration of a loan until it is delinquent.",
          "_1": "The type of payment cycle for loans in the market."
        }
      },
      "getPaymentDefaultDuration(uint256)": {
        "params": {
          "_marketId": "The ID of a market."
        },
        "returns": {
          "_0": "Duration of a loan repayment interval until it is default."
        }
      },
      "getPaymentType(uint256)": {
        "params": {
          "_marketId": "the ID of the market."
        },
        "returns": {
          "_0": "The type of payment for loans in the market."
        }
      },
      "isMarketClosed(uint256)": {
        "params": {
          "_marketId": "The market ID for the market to check."
        }
      },
      "isPayable()": {
        "details": "Returns whether the resolver supports ETH transfers"
      },
      "isVerifiedBorrower(uint256,address)": {
        "params": {
          "_borrowerAddress": "Address of the borrower to check.",
          "_marketId": "The ID of a market."
        },
        "returns": {
          "isVerified_": "Boolean indicating if a borrower has been added to a market.",
          "uuid_": "Bytes32 representing the UUID of the borrower."
        }
      },
      "isVerifiedLender(uint256,address)": {
        "params": {
          "_lenderAddress": "Address to check.",
          "_marketId": "The ID of a market."
        },
        "returns": {
          "isVerified_": "Boolean indicating if a lender has been added to a market.",
          "uuid_": "Bytes32 representing the UUID of the lender."
        }
      },
      "lenderExitMarket(uint256)": {
        "params": {
          "_marketId": "The market ID to leave."
        }
      },
      "resolve(address,bytes,bytes,uint256,address)": {
        "details": "This function must only be called by the `attestLender` function above.",
        "params": {
          "": "@param attestor Market owner's address who signed the attestation.",
          "data": "Data the must include the market ID and lender's address",
          "recipient": "Lender's address who is being attested.",
          "schema": "The schema used for the attestation."
        },
        "returns": {
          "_0": "Boolean indicating the attestation was successful."
        }
      },
      "revokeBorrower(uint256,address)": {
        "details": "See {_revokeStakeholder}."
      },
      "revokeBorrower(uint256,address,uint8,bytes32,bytes32)": {
        "details": "See {_revokeStakeholderViaDelegation}."
      },
      "revokeLender(uint256,address)": {
        "details": "See {_revokeStakeholder}."
      },
      "revokeLender(uint256,address,uint8,bytes32,bytes32)": {
        "details": "See {_revokeStakeholderViaDelegation}."
      },
      "setBorrowerAttestationRequired(uint256,bool)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_required": "Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner."
        }
      },
      "setLenderAttestationRequired(uint256,bool)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_required": "Boolean indicating if the market requires whitelist. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketFeePercent(uint256,uint16)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_newPercent": "The percentage fee in basis points. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketFeeRecipient(uint256,address)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_recipient": "Address of the new fee recipient. Requirements: - The caller must be the current owner."
        }
      },
      "setMarketPaymentType(uint256,uint8)": {
        "params": {
          "_marketId": "The ID of the market.",
          "_newPaymentType": "The payment type for the market."
        }
      },
      "setMarketURI(uint256,string)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_uri": "A URI that points to a market's metadata. Requirements: - The caller must be the current owner."
        }
      },
      "setPaymentCycle(uint256,uint8,uint32)": {
        "params": {
          "_duration": "Delinquency duration for new loans",
          "_marketId": "The ID of a market.",
          "_paymentCycleType": "Cycle type (seconds or monthly)"
        }
      },
      "setPaymentDefaultDuration(uint256,uint32)": {
        "params": {
          "_duration": "Default duration for new loans",
          "_marketId": "The ID of a market."
        }
      },
      "transferMarketOwnership(uint256,address)": {
        "params": {
          "_marketId": "The ID of a market.",
          "_newOwner": "Address of the new market owner. Requirements: - The caller must be the current owner."
        }
      },
      "updateMarketSettings(uint256,uint32,uint8,uint8,uint32,uint32,uint16,bool,bool,string)": {
        "params": {
          "_bidExpirationTime": "Duration of time before a bid is considered out of date",
          "_marketId": "The ID of a market.",
          "_metadataURI": "A URI that points to a market's metadata. Requirements: - The caller must be the current owner.",
          "_newPaymentType": "The payment type for the market.",
          "_paymentCycleDuration": "Delinquency duration for new loans",
          "_paymentCycleType": "The payment cycle type for loans in the market - Seconds or Monthly",
          "_paymentDefaultDuration": "Default duration for new loans"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CURRENT_CODE_VERSION()": {
        "notice": "Constant Variables *"
      },
      "attestBorrower(uint256,address,uint256)": {
        "notice": "Adds a borrower to a market."
      },
      "attestBorrower(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Adds a borrower to a market via delegated attestation."
      },
      "attestLender(uint256,address,uint256)": {
        "notice": "Adds a lender to a market."
      },
      "attestLender(uint256,address,uint256,uint8,bytes32,bytes32)": {
        "notice": "Adds a lender to a market via delegated attestation."
      },
      "borrowerExitMarket(uint256)": {
        "notice": "Allows a borrower to voluntarily leave a market."
      },
      "closeMarket(uint256)": {
        "notice": "Closes a market so new bids cannot be added."
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,string)": {
        "notice": "Creates a new market."
      },
      "createMarket(address,uint32,uint32,uint32,uint16,bool,bool,uint8,uint8,string)": {
        "notice": "Creates a new market."
      },
      "getAllVerifiedBorrowersForMarket(uint256,uint256,uint256)": {
        "notice": "Gets addresses of all attested borrowers."
      },
      "getAllVerifiedLendersForMarket(uint256,uint256,uint256)": {
        "notice": "Gets addresses of all attested lenders."
      },
      "getMarketAttestationRequirements(uint256)": {
        "notice": "Gets the attestation requirements for a given market."
      },
      "getMarketData(uint256)": {
        "notice": "Gets the data associated with a market."
      },
      "getMarketFeeRecipient(uint256)": {
        "notice": "Gets the fee recipient of a market."
      },
      "getMarketOwner(uint256)": {
        "notice": "Gets the address of a market's owner."
      },
      "getMarketURI(uint256)": {
        "notice": "Gets the metadata URI of a market."
      },
      "getMarketplaceFee(uint256)": {
        "notice": "Gets the marketplace fee in basis points"
      },
      "getPaymentCycle(uint256)": {
        "notice": "Gets the loan delinquent duration of a market."
      },
      "getPaymentDefaultDuration(uint256)": {
        "notice": "Gets the loan default duration of a market."
      },
      "getPaymentType(uint256)": {
        "notice": "Get the payment type of a market."
      },
      "isMarketClosed(uint256)": {
        "notice": "Returns the status of a market being open or closed for new bids."
      },
      "isVerifiedBorrower(uint256,address)": {
        "notice": "Checks if a borrower has been attested and added to a market."
      },
      "isVerifiedLender(uint256,address)": {
        "notice": "Checks if a lender has been attested and added to a market."
      },
      "lenderExitMarket(uint256)": {
        "notice": "Allows a lender to voluntarily leave a market."
      },
      "resolve(address,bytes,bytes,uint256,address)": {
        "notice": "Verifies an attestation is valid."
      },
      "revokeBorrower(uint256,address)": {
        "notice": "Removes a borrower from an market."
      },
      "revokeBorrower(uint256,address,uint8,bytes32,bytes32)": {
        "notice": "Removes a borrower from a market via delegated revocation."
      },
      "revokeLender(uint256,address)": {
        "notice": "Removes a lender from an market."
      },
      "revokeLender(uint256,address,uint8,bytes32,bytes32)": {
        "notice": "Removes a borrower from a market via delegated revocation."
      },
      "setBorrowerAttestationRequired(uint256,bool)": {
        "notice": "Enable/disables market whitelist for borrowers."
      },
      "setLenderAttestationRequired(uint256,bool)": {
        "notice": "Enable/disables market whitelist for lenders."
      },
      "setMarketFeePercent(uint256,uint16)": {
        "notice": "Sets the fee for the market."
      },
      "setMarketFeeRecipient(uint256,address)": {
        "notice": "Sets the fee recipient address for a market."
      },
      "setMarketPaymentType(uint256,uint8)": {
        "notice": "Set the payment type for the market."
      },
      "setMarketURI(uint256,string)": {
        "notice": "Sets the metadata URI for a market."
      },
      "setPaymentCycle(uint256,uint8,uint32)": {
        "notice": "Sets the duration of new loans for this market before they turn delinquent.Changing this value does not change the terms of existing loans for this market."
      },
      "setPaymentDefaultDuration(uint256,uint32)": {
        "notice": "Sets the duration of new loans for this market before they turn defaulted.Changing this value does not change the terms of existing loans for this market."
      },
      "transferMarketOwnership(uint256,address)": {
        "notice": "Transfers ownership of a marketplace."
      },
      "updateMarketSettings(uint256,uint32,uint8,uint8,uint32,uint32,uint16,bool,bool,string)": {
        "notice": "Updates multiple market settings for a given market."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6027,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 6030,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 17242,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "lenderAttestationSchemaId",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 17247,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "markets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Marketplace)17240_storage)"
      },
      {
        "astId": 17251,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "__uriToId",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 17253,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "marketCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17255,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "_attestingSchemaId",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 17257,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "borrowerAttestationSchemaId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 17259,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "version",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17263,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "marketIsClosed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 17266,
        "contract": "contracts/MarketRegistry.sol:MarketRegistry",
        "label": "tellerAS",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(TellerAS)14978"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TellerAS)14978": {
        "encoding": "inplace",
        "label": "contract TellerAS",
        "numberOfBytes": "20"
      },
      "t_enum(PaymentCycleType)26941": {
        "encoding": "inplace",
        "label": "enum PaymentCycleType",
        "numberOfBytes": "1"
      },
      "t_enum(PaymentType)26938": {
        "encoding": "inplace",
        "label": "enum PaymentType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Marketplace)17240_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MarketRegistry.Marketplace)",
        "numberOfBytes": "32",
        "value": "t_struct(Marketplace)17240_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)12647_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12646,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12332_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Marketplace)17240_storage": {
        "encoding": "inplace",
        "label": "struct MarketRegistry.Marketplace",
        "members": [
          {
            "astId": 17203,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 17205,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 17207,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "marketplaceFeePercent",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 17209,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "lenderAttestationRequired",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 17212,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "verifiedLendersForMarket",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(AddressSet)12647_storage"
          },
          {
            "astId": 17216,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "lenderAttestationIds",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 17218,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentCycleDuration",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 17220,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentDefaultDuration",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 17222,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "bidExpirationTime",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 17224,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "borrowerAttestationRequired",
            "offset": 12,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 17227,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "verifiedBorrowersForMarket",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(AddressSet)12647_storage"
          },
          {
            "astId": 17231,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "borrowerAttestationIds",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_bytes32)"
          },
          {
            "astId": 17233,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "feeRecipient",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 17236,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentType",
            "offset": 20,
            "slot": "10",
            "type": "t_enum(PaymentType)26938"
          },
          {
            "astId": 17239,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "paymentCycleType",
            "offset": 21,
            "slot": "10",
            "type": "t_enum(PaymentCycleType)26941"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Set)12332_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 12327,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 12331,
            "contract": "contracts/MarketRegistry.sol:MarketRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}