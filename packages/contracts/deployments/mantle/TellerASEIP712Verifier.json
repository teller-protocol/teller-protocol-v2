{
  "address": "0x2bD9697bF0AB44bE5cA698fB5787d8F13ca48Ffc",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ATTEST_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVOKE_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "schema",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "refUUID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "attest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7690e53e1dc776eeb4332ef387c8b3fc34a7498f62c77820286ffdfe1ec38be3",
  "receipt": {
    "to": null,
    "from": "0x65B38b3Cd7eFe502DB579c16ECB5B49235d0DAd0",
    "contractAddress": "0x2bD9697bF0AB44bE5cA698fB5787d8F13ca48Ffc",
    "transactionIndex": 0,
    "gasUsed": "451100",
    "logsBloom": "0x
    "blockHash": "0xd0a50fd1f11f552a40eebab536c14f5657d4bd795cb422bb87bff13b149b25d4",
    "transactionHash": "0x7690e53e1dc776eeb4332ef387c8b3fc34a7498f62c77820286ffdfe1ec38be3",
    "logs": [],
    "blockNumber": 3480413,
    "cumulativeGasUsed": "451100",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c8b85af7a76fe7a6edab223b0e2ae0b0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ATTEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVOKE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"refUUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest(address,bytes32,uint256,bytes32,bytes,address,uint8,bytes32,bytes32)\":{\"details\":\"Verifies signed attestation.\",\"params\":{\"attester\":\"The attesting account.\",\"data\":\"Additional custom data.\",\"expirationTime\":\"The expiration time of the attestation.\",\"r\":\"The x-coordinate of the nonce R.\",\"recipient\":\"The recipient of the attestation.\",\"refUUID\":\"An optional related attestation's UUID.\",\"s\":\"The signature data.\",\"schema\":\"The UUID of the AS.\",\"v\":\"The recovery ID.\"}},\"constructor\":{\"details\":\"Creates a new EIP712Verifier instance.\"},\"getNonce(address)\":{\"details\":\"Returns the current nonce per-account.\",\"params\":{\"account\":\"The requested accunt.\"},\"returns\":{\"_0\":\"The current nonce.\"}},\"revoke(bytes32,address,uint8,bytes32,bytes32)\":{\"details\":\"Verifies signed revocations.\",\"params\":{\"attester\":\"The attesting account.\",\"r\":\"The x-coordinate of the nonce R.\",\"s\":\"The signature data.\",\"uuid\":\"The UUID of the attestation to revoke.\",\"v\":\"The recovery ID.\"}}},\"title\":\"EIP712 typed signatures verifier for EAS delegated attestations.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EAS/TellerASEIP712Verifier.sol\":\"TellerASEIP712Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EAS/TellerASEIP712Verifier.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../interfaces/IEASEIP712Verifier.sol\\\";\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations.\\n */\\ncontract TellerASEIP712Verifier is IEASEIP712Verifier {\\n    error InvalidSignature();\\n\\n    string public constant VERSION = \\\"0.8\\\";\\n\\n    // EIP712 domain separator, making signatures from different domains incompatible.\\n    bytes32 public immutable DOMAIN_SEPARATOR; // solhint-disable-line var-name-mixedcase\\n\\n    // The hash of the data type used to relay calls to the attest function. It's the value of\\n    // keccak256(\\\"Attest(address recipient,bytes32 schema,uint256 expirationTime,bytes32 refUUID,bytes data,uint256 nonce)\\\").\\n    bytes32 public constant ATTEST_TYPEHASH =\\n        0x39c0608dd995a3a25bfecb0fffe6801a81bae611d94438af988caa522d9d1476;\\n\\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\\n    // keccak256(\\\"Revoke(bytes32 uuid,uint256 nonce)\\\").\\n    bytes32 public constant REVOKE_TYPEHASH =\\n        0xbae0931f3a99efd1b97c2f5b6b6e79d16418246b5055d64757e16de5ad11a8ab;\\n\\n    // Replay protection nonces.\\n    mapping(address => uint256) private _nonces;\\n\\n    /**\\n     * @dev Creates a new EIP712Verifier instance.\\n     */\\n    constructor() {\\n        uint256 chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"EAS\\\")),\\n                keccak256(bytes(VERSION)),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc IEASEIP712Verifier\\n     */\\n    function getNonce(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _nonces[account];\\n    }\\n\\n    /**\\n     * @inheritdoc IEASEIP712Verifier\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        ATTEST_TYPEHASH,\\n                        recipient,\\n                        schema,\\n                        expirationTime,\\n                        refUUID,\\n                        keccak256(data),\\n                        _nonces[attester]++\\n                    )\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        if (recoveredAddress == address(0) || recoveredAddress != attester) {\\n            revert InvalidSignature();\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IEASEIP712Verifier\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(REVOKE_TYPEHASH, uuid, _nonces[attester]++)\\n                )\\n            )\\n        );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        if (recoveredAddress == address(0) || recoveredAddress != attester) {\\n            revert InvalidSignature();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x893f7174a3f30019e37a01b0bfd903caf18125259d13aedbad9212d402c4a4a1\",\"license\":\"MIT\"},\"contracts/interfaces/IEASEIP712Verifier.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title EIP712 typed signatures verifier for EAS delegated attestations interface.\\n */\\ninterface IEASEIP712Verifier {\\n    /**\\n     * @dev Returns the current nonce per-account.\\n     *\\n     * @param account The requested accunt.\\n     *\\n     * @return The current nonce.\\n     */\\n    function getNonce(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Verifies signed attestation.\\n     *\\n     * @param recipient The recipient of the attestation.\\n     * @param schema The UUID of the AS.\\n     * @param expirationTime The expiration time of the attestation.\\n     * @param refUUID An optional related attestation's UUID.\\n     * @param data Additional custom data.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function attest(\\n        address recipient,\\n        bytes32 schema,\\n        uint256 expirationTime,\\n        bytes32 refUUID,\\n        bytes calldata data,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Verifies signed revocations.\\n     *\\n     * @param uuid The UUID of the attestation to revoke.\\n     * @param attester The attesting account.\\n     * @param v The recovery ID.\\n     * @param r The x-coordinate of the nonce R.\\n     * @param s The signature data.\\n     */\\n    function revoke(\\n        bytes32 uuid,\\n        address attester,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeca3ac3bacec52af15b2c86c5bf1a1be315aade51fa86f95da2b426b28486b1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060408051808201825260038082526245415360e81b60209283015282518084018452908152620605c760eb1b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818301527f9fed719e0073f95229e6f4f6b6f28f260c524ab08aa40b11f9c28cb710d7c72a818401527f15e7a716d821b9602c70f6d0f574efbb8147fb465215d43354c7b3e69d03ed926060820152466080808301919091523060a0808401919091528451808403909101815260c09092019093528051910120908190526107256101076000396000818160d8015281816101a6015261031a01526107256000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636aeb49a51161005b5780636aeb49a5146100fa5780637e4a7d8f1461010d5780638a73222714610134578063ffa1ad741461015b57600080fd5b80631863f01d146100825780632d0335ab146100975780633644e515146100d3575b600080fd5b61009561009036600461051b565b61018a565b005b6100c06100a5366004610569565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b61009561010836600461058b565b610316565b6100c07f39c0608dd995a3a25bfecb0fffe6801a81bae611d94438af988caa522d9d147681565b6100c07fbae0931f3a99efd1b97c2f5b6b6e79d16418246b5055d64757e16de5ad11a8ab81565b61017d604051806040016040528060038152602001620605c760eb1b81525081565b6040516100ca9190610661565b6001600160a01b038416600090815260208190526040812080547f0000000000000000000000000000000000000000000000000000000000000000917fbae0931f3a99efd1b97c2f5b6b6e79d16418246b5055d64757e16de5ad11a8ab918991856101f4836106b6565b9091555060408051602081019490945283019190915260608201526080016040516020818303038152906040528051906020012060405160200161024f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156102ba573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806102ef5750856001600160a01b0316816001600160a01b031614155b1561030d57604051638baa579f60e01b815260040160405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f39c0608dd995a3a25bfecb0fffe6801a81bae611d94438af988caa522d9d147660001b8c8c8c8c8c8c6040516103719291906106df565b60408051918290039091206001600160a01b038d1660009081526020819052918220805491926103a0836106b6565b909155506040805160208101989098526001600160a01b03909616958701959095526060860193909352608085019190915260a084015260c083015260e0820152610100016040516020818303038152906040528051906020012060405160200161042292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561048d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806104c25750856001600160a01b0316816001600160a01b031614155b156104e057604051638baa579f60e01b815260040160405180910390fd5b505050505050505050505050565b80356001600160a01b038116811461050557600080fd5b919050565b803560ff8116811461050557600080fd5b600080600080600060a0868803121561053357600080fd5b85359450610543602087016104ee565b93506105516040870161050a565b94979396509394606081013594506080013592915050565b60006020828403121561057b57600080fd5b610584826104ee565b9392505050565b6000806000806000806000806000806101208b8d0312156105ab57600080fd5b6105b48b6104ee565b995060208b0135985060408b0135975060608b0135965060808b013567ffffffffffffffff808211156105e657600080fd5b818d0191508d601f8301126105fa57600080fd5b81358181111561060957600080fd5b8e602082850101111561061b57600080fd5b60208301985080975050505061063360a08c016104ee565b935061064160c08c0161050a565b925060e08b013591506101008b013590509295989b9194979a5092959850565b600060208083528351808285015260005b8181101561068e57858101830151858201604001528201610672565b818111156106a0576000604083870101525b50601f01601f1916929092016040019392505050565b60006000198214156106d857634e487b7160e01b600052601160045260246000fd5b5060010190565b818382376000910190815291905056fea26469706673582212206c3bd4e080d58d8688accd1dcd85cf77b7866874b6f356edf06a2440f918a39664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80636aeb49a51161005b5780636aeb49a5146100fa5780637e4a7d8f1461010d5780638a73222714610134578063ffa1ad741461015b57600080fd5b80631863f01d146100825780632d0335ab146100975780633644e515146100d3575b600080fd5b61009561009036600461051b565b61018a565b005b6100c06100a5366004610569565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100c07f000000000000000000000000000000000000000000000000000000000000000081565b61009561010836600461058b565b610316565b6100c07f39c0608dd995a3a25bfecb0fffe6801a81bae611d94438af988caa522d9d147681565b6100c07fbae0931f3a99efd1b97c2f5b6b6e79d16418246b5055d64757e16de5ad11a8ab81565b61017d604051806040016040528060038152602001620605c760eb1b81525081565b6040516100ca9190610661565b6001600160a01b038416600090815260208190526040812080547f0000000000000000000000000000000000000000000000000000000000000000917fbae0931f3a99efd1b97c2f5b6b6e79d16418246b5055d64757e16de5ad11a8ab918991856101f4836106b6565b9091555060408051602081019490945283019190915260608201526080016040516020818303038152906040528051906020012060405160200161024f92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa1580156102ba573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806102ef5750856001600160a01b0316816001600160a01b031614155b1561030d57604051638baa579f60e01b815260040160405180910390fd5b50505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000007f39c0608dd995a3a25bfecb0fffe6801a81bae611d94438af988caa522d9d147660001b8c8c8c8c8c8c6040516103719291906106df565b60408051918290039091206001600160a01b038d1660009081526020819052918220805491926103a0836106b6565b909155506040805160208101989098526001600160a01b03909616958701959095526060860193909352608085019190915260a084015260c083015260e0820152610100016040516020818303038152906040528051906020012060405160200161042292919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561048d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615806104c25750856001600160a01b0316816001600160a01b031614155b156104e057604051638baa579f60e01b815260040160405180910390fd5b505050505050505050505050565b80356001600160a01b038116811461050557600080fd5b919050565b803560ff8116811461050557600080fd5b600080600080600060a0868803121561053357600080fd5b85359450610543602087016104ee565b93506105516040870161050a565b94979396509394606081013594506080013592915050565b60006020828403121561057b57600080fd5b610584826104ee565b9392505050565b6000806000806000806000806000806101208b8d0312156105ab57600080fd5b6105b48b6104ee565b995060208b0135985060408b0135975060608b0135965060808b013567ffffffffffffffff808211156105e657600080fd5b818d0191508d601f8301126105fa57600080fd5b81358181111561060957600080fd5b8e602082850101111561061b57600080fd5b60208301985080975050505061063360a08c016104ee565b935061064160c08c0161050a565b925060e08b013591506101008b013590509295989b9194979a5092959850565b600060208083528351808285015260005b8181101561068e57858101830151858201604001528201610672565b818111156106a0576000604083870101525b50601f01601f1916929092016040019392505050565b60006000198214156106d857634e487b7160e01b600052601160045260246000fd5b5060010190565b818382376000910190815291905056fea26469706673582212206c3bd4e080d58d8688accd1dcd85cf77b7866874b6f356edf06a2440f918a39664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "attest(address,bytes32,uint256,bytes32,bytes,address,uint8,bytes32,bytes32)": {
        "details": "Verifies signed attestation.",
        "params": {
          "attester": "The attesting account.",
          "data": "Additional custom data.",
          "expirationTime": "The expiration time of the attestation.",
          "r": "The x-coordinate of the nonce R.",
          "recipient": "The recipient of the attestation.",
          "refUUID": "An optional related attestation's UUID.",
          "s": "The signature data.",
          "schema": "The UUID of the AS.",
          "v": "The recovery ID."
        }
      },
      "constructor": {
        "details": "Creates a new EIP712Verifier instance."
      },
      "getNonce(address)": {
        "details": "Returns the current nonce per-account.",
        "params": {
          "account": "The requested accunt."
        },
        "returns": {
          "_0": "The current nonce."
        }
      },
      "revoke(bytes32,address,uint8,bytes32,bytes32)": {
        "details": "Verifies signed revocations.",
        "params": {
          "attester": "The attesting account.",
          "r": "The x-coordinate of the nonce R.",
          "s": "The signature data.",
          "uuid": "The UUID of the attestation to revoke.",
          "v": "The recovery ID."
        }
      }
    },
    "title": "EIP712 typed signatures verifier for EAS delegated attestations.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15661,
        "contract": "contracts/EAS/TellerASEIP712Verifier.sol:TellerASEIP712Verifier",
        "label": "_nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}