{
  "address": "0x3af8db041fcafa539c2c78f73aa209383ba703ed",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_acceptedTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_paymentCycle",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_loanDuration",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_lastRepaidTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "enum PaymentCycleType",
          "name": "_bidPaymentCycleType",
          "type": "PaymentCycleType"
        }
      ],
      "name": "calculateNextDueDate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "dueDate_",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x702fbd0a385c02624992ebaed79963616d0607282d2355587adf0d2bcb2e20b9",
  "receipt": {
    "to": null,
    "from": "0xd9b023522cece02251d877bb0eb4f06fde6f98e6",
    "contractAddress": "0x3af8db041fcafa539c2c78f73aa209383ba703ed",
    "transactionIndex": "0x199",
    "gasUsed": "0x92263",
    "logsBloom": "0x
    "blockHash": "0x7398b65649d9155efcc3a983b44013bd20330d899f8fcaa2548fbed4155a8bd6",
    "transactionHash": "0x702fbd0a385c02624992ebaed79963616d0607282d2355587adf0d2bcb2e20b9",
    "logs": [
      {
        "transactionHash": "0x702fbd0a385c02624992ebaed79963616d0607282d2355587adf0d2bcb2e20b9",
        "address": "0x0000000000000000000000000000000000001010",
        "blockHash": "0x7398b65649d9155efcc3a983b44013bd20330d899f8fcaa2548fbed4155a8bd6",
        "blockNumber": "0x3104182",
        "data": "0x000000000000000000000000000000000000000000000000000dca5cfca712e20000000000000000000000000000000000000000000000004b31eb78e5c204cb00000000000000000000000000000000000000000002a19b3ab05e3ffcac75230000000000000000000000000000000000000000000000004b24211be91af1e900000000000000000000000000000000000000000002a19b3abe289cf9538805",
        "logIndex": "0x331",
        "removed": false,
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d9b023522cece02251d877bb0eb4f06fde6f98e6",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "transactionIndex": "0x199"
      }
    ],
    "blockNumber": "0x3104182",
    "cumulativeGasUsed": "0x12d2a1c",
    "status": "0x1"
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5ccd41e941a66530dfe8bfb2079184d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_acceptedTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_paymentCycle\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_lastRepaidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"enum PaymentCycleType\",\"name\":\"_bidPaymentCycleType\",\"type\":\"PaymentCycleType\"}],\"name\":\"calculateNextDueDate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"dueDate_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/V2Calculations.sol\":\"V2Calculations\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/TellerV2Storage.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport { IMarketRegistry_V2 } from \\\"./interfaces/IMarketRegistry_V2.sol\\\";\\nimport \\\"./interfaces/IEscrowVault.sol\\\";\\nimport \\\"./interfaces/IReputationManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/ICollateralManagerV1.sol\\\";\\nimport \\\"./interfaces/ICollateralManagerV2.sol\\\";\\nimport { PaymentType, PaymentCycleType } from \\\"./libraries/V2Calculations.sol\\\";\\nimport \\\"./interfaces/ILenderManager.sol\\\";\\n\\nenum BidState {\\n    NONEXISTENT,\\n    PENDING,\\n    CANCELLED,\\n    ACCEPTED,\\n    PAID,\\n    LIQUIDATED,\\n    CLOSED\\n}\\n\\n/**\\n * @notice Represents a total amount for a payment.\\n * @param principal Amount that counts towards the principal.\\n * @param interest  Amount that counts toward interest.\\n */\\nstruct Payment {\\n    uint256 principal;\\n    uint256 interest;\\n}\\n\\n/**\\n * @notice Details about a loan request.\\n * @param borrower Account address who is requesting a loan.\\n * @param receiver Account address who will receive the loan amount.\\n * @param lender Account address who accepted and funded the loan request.\\n * @param marketplaceId ID of the marketplace the bid was submitted to.\\n * @param metadataURI ID of off chain metadata to find additional information of the loan request.\\n * @param loanDetails Struct of the specific loan details.\\n * @param terms Struct of the loan request terms.\\n * @param state Represents the current state of the loan.\\n */\\nstruct Bid {\\n    address borrower;\\n    address receiver;\\n    address lender; // if this is the LenderManager address, we use that .owner() as source of truth\\n    uint256 marketplaceId;\\n    bytes32 _metadataURI; // DEPRECATED\\n    LoanDetails loanDetails;\\n    Terms terms;\\n    BidState state;\\n    PaymentType paymentType; // DEPRECATED\\n}\\n\\n/**\\n * @notice Details about the loan.\\n * @param lendingToken The token address for the loan.\\n * @param principal The amount of tokens initially lent out.\\n * @param totalRepaid Payment struct that represents the total principal and interest amount repaid.\\n * @param timestamp Timestamp, in seconds, of when the bid was submitted by the borrower.\\n * @param acceptedTimestamp Timestamp, in seconds, of when the bid was accepted by the lender.\\n * @param lastRepaidTimestamp Timestamp, in seconds, of when the last payment was made\\n * @param loanDuration The duration of the loan.\\n */\\nstruct LoanDetails {\\n    IERC20 lendingToken;\\n    uint256 principal;\\n    Payment totalRepaid;\\n    uint32 timestamp;\\n    uint32 acceptedTimestamp;\\n    uint32 lastRepaidTimestamp;\\n    uint32 loanDuration;\\n}\\n\\n/**\\n * @notice Information on the terms of a loan request\\n * @param paymentCycleAmount Value of tokens expected to be repaid every payment cycle.\\n * @param paymentCycle Duration, in seconds, of how often a payment must be made.\\n * @param APR Annual percentage rating to be applied on repayments. (10000 == 100%)\\n */\\nstruct Terms {\\n    uint256 paymentCycleAmount;\\n    uint32 paymentCycle; // DEPRECATED\\n    uint16 APR;\\n}\\n\\nabstract contract TellerV2Storage_G0 {\\n    /** Storage Variables */\\n\\n    // Current number of bids.\\n    uint256 public nextBidId;\\n\\n    // Mapping of bidId to bid information.\\n    mapping(uint256 => Bid) public bids;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => uint256[]) public borrowerBids; //DEPRECATED\\n\\n    // Mapping of volume filled by lenders.\\n    mapping(address => uint256) public __lenderVolumeFilled; // DEPRECATED\\n\\n    // Volume filled by all lenders.\\n    uint256 public __totalVolumeFilled; // DEPRECATED\\n\\n    // List of allowed lending tokens\\n    EnumerableSet.AddressSet internal __lendingTokensSet; // DEPRECATED\\n\\n    IMarketRegistry_V2 public marketRegistry;\\n    IReputationManager public reputationManager;\\n\\n    // Mapping of borrowers to borrower requests.\\n    mapping(address => EnumerableSet.UintSet) internal _borrowerBidsActive; //DEPRECATED\\n\\n    mapping(uint256 => uint32) public bidDefaultDuration; //DEPRECATED\\n    mapping(uint256 => uint32) public bidExpirationTime; //DEPRECATED\\n\\n    // Mapping of volume filled by lenders.\\n    // Asset address => Lender address => Volume amount\\n    mapping(address => mapping(address => uint256)) public lenderVolumeFilled;\\n\\n    // Volume filled by all lenders.\\n    // Asset address => Volume amount\\n    mapping(address => uint256) public totalVolumeFilled;\\n\\n    uint256 public version;\\n\\n    // Mapping of metadataURIs by bidIds.\\n    // Bid Id => metadataURI string\\n    mapping(uint256 => string) public uris; //DEPRECATED\\n}\\n\\nabstract contract TellerV2Storage_G1 is TellerV2Storage_G0 {\\n    // market ID => trusted forwarder\\n    mapping(uint256 => address) internal _trustedMarketForwarders;\\n    // trusted forwarder => set of pre-approved senders\\n    mapping(address => EnumerableSet.AddressSet)\\n        internal _approvedForwarderSenders;\\n}\\n\\nabstract contract TellerV2Storage_G2 is TellerV2Storage_G1 {\\n    address public lenderCommitmentForwarder; //deprecated\\n}\\n\\nabstract contract TellerV2Storage_G3 is TellerV2Storage_G2 {\\n    ICollateralManagerV1 public collateralManagerV1;\\n}\\n\\nabstract contract TellerV2Storage_G4 is TellerV2Storage_G3 {\\n    // Address of the lender manager contract\\n    ILenderManager public lenderManager;\\n    // BidId to payment cycle type (custom or monthly)\\n    mapping(uint256 => PaymentCycleType) public bidPaymentCycleType; //DEPRECATED\\n}\\n\\nabstract contract TellerV2Storage_G5 is TellerV2Storage_G4 {\\n    // Address of the lender manager contract\\n    IEscrowVault public escrowVault;\\n}\\n\\nabstract contract TellerV2Storage_G6 is TellerV2Storage_G5 {\\n    ICollateralManagerV2 public collateralManagerV2;\\n    mapping(uint256 => address) public collateralManagerForBid; //if this is zero, that means v1\\n}\\n\\nabstract contract TellerV2Storage_G7 is TellerV2Storage_G6 {\\n    // If this is zero for a bid, the bid will use the values in the bid struct / bidDefaultDuration / bidExpirationTime\\n    //need internal fns to do this if/then\\n    mapping(uint256 => bytes32) public bidMarketTermsId;\\n}\\n\\nabstract contract TellerV2Storage_G8 is TellerV2Storage_G7 {\\n    mapping(uint256 => address) public repaymentListenerForBid;\\n}\\n\\nabstract contract TellerV2Storage is TellerV2Storage_G8 {}\\n\",\"keccak256\":\"0x330353a44a3059c72cd438c05f6c574d249113297655b68a433a62539bfe2ea7\",\"license\":\"MIT\"},\"contracts/bundle/interfaces/ICollateralBundle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n *  Group together arbitrary ERC20, ERC721 and ERC1155 tokens into a single bundle.\\n *\\n *  The `Token` struct is a generic type that can describe any ERC20, ERC721 or ERC1155 token.\\n *  The `Bundle` struct is a data structure to track a group/bundle of multiple assets i.e. ERC20,\\n *  ERC721 and ERC1155 tokens, each described as a `Token`.\\n *\\n *  Expressing tokens as the `Token` type, and grouping them as a `Bundle` allows for writing generic\\n *  logic to handle any ERC20, ERC721 or ERC1155 tokens.\\n */\\n\\n/// @notice The type of assets that can be bundled.\\nenum CollateralType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\n/**\\n *  @notice A generic interface to describe any ERC20, ERC721 or ERC1155 token.\\n *  @param _collateralType     The token type (ERC20 / ERC721 / ERC1155) of the asset.\\n *  @param _amount   The amount of the asset, if the asset is an ERC20 / ERC1155 fungible token.\\n *  @param _tokenId       The token Id of the asset, if the asset is an ERC721 / ERC1155 NFT.\\n *  @param _collateralAddress The contract address of the asset.\\n *\\n */\\nstruct Collateral {\\n    CollateralType _collateralType;\\n    uint256 _amount;\\n    uint256 _tokenId;\\n    address _collateralAddress;\\n}\\n\\ninterface ICollateralBundle {\\n    /**\\n     *  @notice An internal data structure to track a group / bundle of multiple assets i.e. `Token`s.\\n     *\\n     *  @param count    The total number of assets i.e. `Collateral` in a bundle.\\n     *  @param collaterals   Mapping from a UID -> to a unique asset i.e. `Collateral` in the bundle.\\n     */\\n    struct CollateralBundleInfo {\\n        uint256 count;\\n        mapping(uint256 => Collateral) collaterals;\\n    }\\n}\\n\",\"keccak256\":\"0x8f229fe47e8e7c746e6d97c466832c91646122a50cf8bff4f7f9a7e16b174791\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICollateralManager.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport { Collateral } from \\\"../bundle/interfaces/ICollateralBundle.sol\\\";\\n\\ninterface ICollateralManager {\\n    /**\\n     * @notice Checks the validity of a borrower's collateral balance.\\n     * @param _bidId The id of the associated bid.\\n     * @param _collateralInfo Additional information about the collateral asset.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function commitCollateral(\\n        uint256 _bidId,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validation_);\\n\\n    /**\\n     * @notice Gets the collateral info for a given bid id.\\n     * @param _bidId The bidId to return the collateral info for.\\n     * @return The stored collateral info.\\n     */\\n    function getCollateralInfo(uint256 _bidId)\\n        external\\n        view\\n        returns (Collateral[] memory);\\n\\n    function getCollateralAmount(uint256 _bidId, address collateralAssetAddress)\\n        external\\n        view\\n        returns (uint256 _amount);\\n\\n    /**\\n     * @notice Withdraws deposited collateral from the created escrow of a bid.\\n     * @param _bidId The id of the bid to withdraw collateral for.\\n     */\\n    function withdraw(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Sends the deposited collateral to a lender of a bid.\\n     * @notice Can only be called by the protocol.\\n     * @param _bidId The id of the liquidated bid.\\n     */\\n    function lenderClaimCollateral(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Sends the deposited collateral to a liquidator of a bid.\\n     * @notice Can only be called by the protocol.\\n     * @param _bidId The id of the liquidated bid.\\n     * @param _liquidatorAddress The address of the liquidator to send the collateral to.\\n     */\\n    function liquidateCollateral(uint256 _bidId, address _liquidatorAddress)\\n        external;\\n}\\n\",\"keccak256\":\"0xebefcacd557a58e56e440ca274a0c7ec1d57b4bc2b0d62007d5fbd041cb0aa48\"},\"contracts/interfaces/ICollateralManagerV1.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n//import { Collateral } from \\\"./escrow/ICollateralEscrowV1.sol\\\";\\n\\nimport { Collateral } from \\\"../bundle/interfaces/ICollateralBundle.sol\\\";\\n\\nimport \\\"./ICollateralManager.sol\\\";\\n\\ninterface ICollateralManagerV1 is ICollateralManager {\\n    function checkBalances(\\n        address _borrowerAddress,\\n        Collateral[] calldata _collateralInfo\\n    ) external returns (bool validated_, bool[] memory checks_);\\n\\n    /**\\n     * @notice Deploys a new collateral escrow.\\n     * @param _bidId The associated bidId of the collateral escrow.\\n     */\\n    function deployAndDeposit(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Gets the address of a deployed escrow.\\n     * @notice _bidId The bidId to return the escrow for.\\n     * @return The address of the escrow.\\n     */\\n    function getEscrow(uint256 _bidId) external view returns (address);\\n\\n    /**\\n     * @notice Re-checks the validity of a borrower's collateral balance committed to a bid.\\n     * @param _bidId The id of the associated bid.\\n     * @return validation_ Boolean indicating if the collateral balance was validated.\\n     */\\n    function revalidateCollateral(uint256 _bidId) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc4abc552dd8fb1d7b6f0be2947bb82586806a6f53112907eb391b6713b0290eb\"},\"contracts/interfaces/ICollateralManagerV2.sol\":{\"content\":\"// SPDX-Licence-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./ICollateralManager.sol\\\";\\n\\n//use TokenBundle\\n/*\\nenum CollateralType {\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct Collateral {\\n    CollateralType _collateralType;\\n    uint256 _amount;\\n    uint256 _tokenId;\\n    address _collateralAddress;\\n}*/\\n\\nimport { Collateral } from \\\"../bundle/interfaces/ICollateralBundle.sol\\\";\\n\\ninterface ICollateralManagerV2 is ICollateralManager {\\n    /**\\n     * @notice Deploys a new collateral escrow.\\n     * @param _bidId The associated bidId of the collateral escrow.\\n     */\\n    function depositCollateral(uint256 _bidId) external;\\n\\n    /**\\n     * @notice Gets the address of a deployed escrow.\\n     * @notice _bidId The bidId to return the escrow for.\\n     * @return The address of the escrow.\\n     */\\n    // function getEscrow(uint256 _bidId) external view returns (address);\\n\\n    /**\\n     * @notice Gets the collateral info for a given bid id.\\n     * @param _bidId The bidId to return the collateral info for.\\n     * @return The stored collateral info.\\n     */\\n    function getCollateralInfo(uint256 _bidId)\\n        external\\n        view\\n        returns (Collateral[] memory);\\n\\n    function getCollateralAmount(uint256 _bidId, address collateralAssetAddress)\\n        external\\n        view\\n        returns (uint256 _amount);\\n}\\n\",\"keccak256\":\"0xca255d1c590b4bfbbcdb46bb1d8efcd52a63feb404a7880d0142566df86ee5f2\"},\"contracts/interfaces/IEscrowVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IEscrowVault {\\n    /**\\n     * @notice Deposit tokens on behalf of another account\\n     * @param account The address of the account\\n     * @param token The address of the token\\n     * @param amount The amount to increase the balance\\n     */\\n    function deposit(address account, address token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8c95f089fb12f263e98b26c0ce9983a6814736c9ec8a6de603b397fd64c29a9a\",\"license\":\"MIT\"},\"contracts/interfaces/ILenderManager.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nabstract contract ILenderManager is IERC721Upgradeable {\\n    /**\\n     * @notice Registers a new active lender for a loan, minting the nft.\\n     * @param _bidId The id for the loan to set.\\n     * @param _newLender The address of the new active lender.\\n     */\\n    function registerLoan(uint256 _bidId, address _newLender) external virtual;\\n}\\n\",\"keccak256\":\"0xceb1ea2ef4c6e2ad7986db84de49c959e8d59844563d27daca5b8d78b732a8f7\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { PaymentType, PaymentCycleType } from \\\"../libraries/V2Calculations.sol\\\";\\n\\ninterface IMarketRegistry {\\n    function isMarketOpen(uint256 _marketId) external view returns (bool);\\n\\n    function isMarketClosed(uint256 _marketId) external view returns (bool);\\n\\n    function getMarketOwner(uint256 _marketId) external view returns (address);\\n\\n    function closeMarket(uint256 _marketId) external;\\n\\n    function getMarketFeeRecipient(uint256 _marketId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getMarketURI(uint256 _marketId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function getPaymentDefaultDuration(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getBidExpirationTime(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getPaymentType(uint256 _marketId)\\n        external\\n        view\\n        returns (PaymentType);\\n\\n    function getMarketplaceFee(uint256 _marketId)\\n        external\\n        view\\n        returns (uint16);\\n\\n    function isVerifiedBorrower(uint256 _marketId, address _borrower)\\n        external\\n        view\\n        returns (bool, bytes32);\\n\\n    function isVerifiedLender(uint256 _marketId, address _lender)\\n        external\\n        view\\n        returns (bool, bytes32);\\n}\\n\",\"keccak256\":\"0xfddd7e81322d0abd5fa3c420b264e2037769f5a29b50a63e684babcbf270f974\",\"license\":\"MIT\"},\"contracts/interfaces/IMarketRegistry_V2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport { PaymentType, PaymentCycleType } from \\\"../libraries/V2Calculations.sol\\\";\\n\\nimport { IMarketRegistry } from \\\"./IMarketRegistry.sol\\\";\\n\\ninterface IMarketRegistry_V2 is IMarketRegistry {\\n    struct MarketplaceTerms {\\n        uint16 marketplaceFeePercent; // 10000 is 100%\\n        PaymentType paymentType;\\n        PaymentCycleType paymentCycleType;\\n        uint32 paymentCycleDuration; // unix time (seconds)\\n        uint32 paymentDefaultDuration; //unix time\\n        uint32 bidExpirationTime; //unix time\\n        address feeRecipient;\\n    }\\n\\n    function getMarketTermsForLending(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (uint32, PaymentCycleType, PaymentType, uint32, uint32);\\n\\n    function getMarketFeeTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (address, uint16);\\n\\n    function getBidExpirationTimeForTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getPaymentDefaultDurationForTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getPaymentTypeForTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (PaymentType);\\n\\n    function getPaymentCycleTypeForTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (PaymentCycleType);\\n\\n    function getPaymentCycleDurationForTerms(bytes32 _marketTermsId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function getPaymentCycleType(uint256 _marketId)\\n        external\\n        view\\n        returns (PaymentCycleType);\\n\\n    function getPaymentCycleDuration(uint256 _marketId)\\n        external\\n        view\\n        returns (uint32);\\n\\n    function createMarket(\\n        address _initialOwner,\\n        bool _requireLenderAttestation,\\n        bool _requireBorrowerAttestation,\\n        string calldata _uri,\\n        MarketplaceTerms memory _marketTermsParams\\n    ) external returns (uint256 marketId_, bytes32 marketTerms_);\\n\\n    function getCurrentTermsForMarket(uint256 _marketId)\\n        external\\n        view\\n        returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2812170ccb66123d4e815d4e84654887b7158d91382991938b7efb772b409853\",\"license\":\"MIT\"},\"contracts/interfaces/IReputationManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum RepMark {\\n    Good,\\n    Delinquent,\\n    Default\\n}\\n\\ninterface IReputationManager {\\n    function initialize(address protocolAddress) external;\\n\\n    function getDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getDefaultedLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDelinquentLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    function getCurrentDefaultLoanIds(address _account)\\n        external\\n        returns (uint256[] memory);\\n\\n    //  function updateAccountReputation(address _account) external;\\n\\n    function updateAccountReputation(address _account, uint256 _bidId)\\n        external\\n        returns (RepMark);\\n}\\n\",\"keccak256\":\"0xf76d1c1d165c07d693a39995e95dd408defdbc0acdc12e8ead076dcc351f5d7a\",\"license\":\"MIT\"},\"contracts/libraries/DateTimeLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   https://aa.usno.navy.mil/faq/JD_formula.html\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day)\\n        internal\\n        pure\\n        returns (uint _days)\\n    {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days)\\n        internal\\n        pure\\n        returns (uint year, uint month, uint day)\\n    {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int _month = (80 * L) / 2447;\\n        int _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day)\\n        internal\\n        pure\\n        returns (uint timestamp)\\n    {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) internal pure returns (uint timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint timestamp)\\n        internal\\n        pure\\n        returns (uint year, uint month, uint day)\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint year,\\n            uint month,\\n            uint day,\\n            uint hour,\\n            uint minute,\\n            uint second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day)\\n        internal\\n        pure\\n        returns (bool valid)\\n    {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint year,\\n        uint month,\\n        uint day,\\n        uint hour,\\n        uint minute,\\n        uint second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint timestamp)\\n        internal\\n        pure\\n        returns (uint daysInMonth)\\n    {\\n        (uint year, uint month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint year, uint month)\\n        internal\\n        pure\\n        returns (uint daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp)\\n        internal\\n        pure\\n        returns (uint dayOfWeek)\\n    {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint timestamp, uint _months)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint timestamp, uint _days)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint timestamp, uint _hours)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint timestamp, uint _minutes)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint timestamp, uint _seconds)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint timestamp, uint _months)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        (uint year, uint month, uint day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint timestamp, uint _days)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint timestamp, uint _hours)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint timestamp, uint _minutes)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint timestamp, uint _seconds)\\n        internal\\n        pure\\n        returns (uint newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint toYear, uint toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp)\\n        internal\\n        pure\\n        returns (uint _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xf194df8ea9946a5bb3300223629b7e4959c1f20bacba27b3dc5f6dd2a160147a\",\"license\":\"MIT\"},\"contracts/libraries/NumbersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Libraries\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @dev Utility library for uint256 numbers\\n *\\n * @author develop@teller.finance\\n */\\nlibrary NumbersLib {\\n    using WadRayMath for uint256;\\n\\n    /**\\n     * @dev It represents 100% with 2 decimal places.\\n     */\\n    uint16 internal constant PCT_100 = 10000;\\n\\n    function percentFactor(uint256 decimals) internal pure returns (uint256) {\\n        return 100 * (10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with 2 decimal places (10000 = 100%).\\n     */\\n    function percent(uint256 self, uint16 percentage)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return percent(self, percentage, 2);\\n    }\\n\\n    /**\\n     * @notice Returns a percentage value of a number.\\n     * @param self The number to get a percentage of.\\n     * @param percentage The percentage value to calculate with.\\n     * @param decimals The number of decimals the percentage value is in.\\n     */\\n    function percent(uint256 self, uint256 percentage, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return (self * percentage) / percentFactor(decimals);\\n    }\\n\\n    /**\\n     * @notice it returns the absolute number of a specified parameter\\n     * @param self the number to be returned in it's absolute\\n     * @return the absolute number\\n     */\\n    function abs(int256 self) internal pure returns (uint256) {\\n        return self >= 0 ? uint256(self) : uint256(-1 * self);\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @dev Returned value is type uint16.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @return Ratio percentage with 2 decimal places (10000 = 100%).\\n     */\\n    function ratioOf(uint256 num1, uint256 num2)\\n        internal\\n        pure\\n        returns (uint16)\\n    {\\n        return SafeCast.toUint16(ratioOf(num1, num2, 2));\\n    }\\n\\n    /**\\n     * @notice Returns a ratio percentage of {num1} to {num2}.\\n     * @param num1 The number used to get the ratio for.\\n     * @param num2 The number used to get the ratio from.\\n     * @param decimals The number of decimals the percentage value is returned in.\\n     * @return Ratio percentage value.\\n     */\\n    function ratioOf(uint256 num1, uint256 num2, uint256 decimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (num2 == 0) return 0;\\n        return (num1 * percentFactor(decimals)) / num2;\\n    }\\n\\n    /**\\n     * @notice Calculates the payment amount for a cycle duration.\\n     *  The formula is calculated based on the standard Estimated Monthly Installment (https://en.wikipedia.org/wiki/Equated_monthly_installment)\\n     *  EMI = [P x R x (1+R)^N]/[(1+R)^N-1]\\n     * @param principal The starting amount that is owed on the loan.\\n     * @param loanDuration The length of the loan.\\n     * @param cycleDuration The length of the loan's payment cycle.\\n     * @param apr The annual percentage rate of the loan.\\n     */\\n    function pmt(\\n        uint256 principal,\\n        uint32 loanDuration,\\n        uint32 cycleDuration,\\n        uint16 apr,\\n        uint256 daysInYear\\n    ) internal pure returns (uint256) {\\n        require(\\n            loanDuration >= cycleDuration,\\n            \\\"PMT: cycle duration < loan duration\\\"\\n        );\\n        if (apr == 0)\\n            return\\n                Math.mulDiv(\\n                    principal,\\n                    cycleDuration,\\n                    loanDuration,\\n                    Math.Rounding.Up\\n                );\\n\\n        // Number of payment cycles for the duration of the loan\\n        uint256 n = Math.ceilDiv(loanDuration, cycleDuration);\\n\\n        uint256 one = WadRayMath.wad();\\n        uint256 r = WadRayMath.pctToWad(apr).wadMul(cycleDuration).wadDiv(\\n            daysInYear\\n        );\\n        uint256 exp = (one + r).wadPow(n);\\n        uint256 numerator = principal.wadMul(r).wadMul(exp);\\n        uint256 denominator = exp - one;\\n\\n        return numerator.wadDiv(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x78009ffb3737ab7615a1e38a26635d6c06b65b7b7959af46d6ef840d220e70cf\",\"license\":\"MIT\"},\"contracts/libraries/V2Calculations.sol\":{\"content\":\"pragma solidity >=0.8.0 <0.9.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n// Libraries\\nimport \\\"./NumbersLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Bid } from \\\"../TellerV2Storage.sol\\\";\\nimport { BokkyPooBahsDateTimeLibrary as BPBDTL } from \\\"./DateTimeLib.sol\\\";\\n\\nenum PaymentType {\\n    EMI,\\n    Bullet\\n}\\n\\nenum PaymentCycleType {\\n    Seconds,\\n    Monthly\\n}\\n\\nlibrary V2Calculations {\\n    using NumbersLib for uint256;\\n\\n    /**\\n     * @notice Returns the timestamp of the last payment made for a loan.\\n     * @param _bid The loan bid struct to get the timestamp for.\\n     */\\n    function lastRepaidTimestamp(Bid storage _bid)\\n        internal\\n        view\\n        returns (uint32)\\n    {\\n        return\\n            _bid.loanDetails.lastRepaidTimestamp == 0\\n                ? _bid.loanDetails.acceptedTimestamp\\n                : _bid.loanDetails.lastRepaidTimestamp;\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan.\\n     * @param _bid The loan bid struct to get the owed amount for.\\n     * @param _timestamp The timestamp at which to get the owed amount at.\\n     * @param _paymentCycleType The payment cycle type of the loan (Seconds or Monthly).\\n     */\\n    function calculateAmountOwed(\\n        Bid storage _bid,\\n        uint256 _timestamp,\\n        PaymentCycleType _paymentCycleType,\\n        uint32 _paymentCycleDuration\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        // Total principal left to pay\\n        return\\n            calculateAmountOwed(\\n                _bid,\\n                lastRepaidTimestamp(_bid),\\n                _timestamp,\\n                _paymentCycleType,\\n                _paymentCycleDuration\\n            );\\n    }\\n\\n    function calculateAmountOwed(\\n        Bid storage _bid,\\n        uint256 _lastRepaidTimestamp,\\n        uint256 _timestamp,\\n        PaymentCycleType _paymentCycleType,\\n        uint32 _paymentCycleDuration\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 owedPrincipal_,\\n            uint256 duePrincipal_,\\n            uint256 interest_\\n        )\\n    {\\n        owedPrincipal_ =\\n            _bid.loanDetails.principal -\\n            _bid.loanDetails.totalRepaid.principal;\\n\\n        uint256 daysInYear = _paymentCycleType == PaymentCycleType.Monthly\\n            ? 360 days\\n            : 365 days;\\n\\n        uint256 interestOwedInAYear = owedPrincipal_.percent(_bid.terms.APR);\\n        uint256 owedTime = _timestamp - uint256(_lastRepaidTimestamp);\\n        interest_ = (interestOwedInAYear * owedTime) / daysInYear;\\n\\n        bool isLastPaymentCycle;\\n        {\\n            uint256 lastPaymentCycleDuration = _bid.loanDetails.loanDuration %\\n                _paymentCycleDuration;\\n            if (lastPaymentCycleDuration == 0) {\\n                lastPaymentCycleDuration = _paymentCycleDuration;\\n            }\\n\\n            uint256 endDate = uint256(_bid.loanDetails.acceptedTimestamp) +\\n                uint256(_bid.loanDetails.loanDuration);\\n            uint256 lastPaymentCycleStart = endDate -\\n                uint256(lastPaymentCycleDuration);\\n\\n            isLastPaymentCycle =\\n                uint256(_timestamp) > lastPaymentCycleStart ||\\n                owedPrincipal_ + interest_ <= _bid.terms.paymentCycleAmount;\\n        }\\n\\n        if (_bid.paymentType == PaymentType.Bullet) {\\n            if (isLastPaymentCycle) {\\n                duePrincipal_ = owedPrincipal_;\\n            }\\n        } else {\\n            // Default to PaymentType.EMI\\n            // Max payable amount in a cycle\\n            // NOTE: the last cycle could have less than the calculated payment amount\\n\\n            uint256 owedAmount = isLastPaymentCycle\\n                ? owedPrincipal_ + interest_\\n                : (_bid.terms.paymentCycleAmount * owedTime) /\\n                    _paymentCycleDuration;\\n\\n            duePrincipal_ = Math.min(owedAmount - interest_, owedPrincipal_);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the amount owed for a loan for the next payment cycle.\\n     * @param _type The payment type of the loan.\\n     * @param _cycleType The cycle type set for the loan. (Seconds or Monthly)\\n     * @param _principal The starting amount that is owed on the loan.\\n     * @param _duration The length of the loan.\\n     * @param _paymentCycle The length of the loan's payment cycle.\\n     * @param _apr The annual percentage rate of the loan.\\n     */\\n    function calculatePaymentCycleAmount(\\n        PaymentType _type,\\n        PaymentCycleType _cycleType,\\n        uint256 _principal,\\n        uint32 _duration,\\n        uint32 _paymentCycle,\\n        uint16 _apr\\n    ) internal returns (uint256) {\\n        uint256 daysInYear = _cycleType == PaymentCycleType.Monthly\\n            ? 360 days\\n            : 365 days;\\n        if (_type == PaymentType.Bullet) {\\n            return\\n                _principal.percent(_apr).percent(\\n                    uint256(_paymentCycle).ratioOf(daysInYear, 10),\\n                    10\\n                );\\n        }\\n        // Default to PaymentType.EMI\\n        return\\n            NumbersLib.pmt(\\n                _principal,\\n                _duration,\\n                _paymentCycle,\\n                _apr,\\n                daysInYear\\n            );\\n    }\\n\\n    function calculateNextDueDate(\\n        uint32 _acceptedTimestamp,\\n        uint32 _paymentCycle,\\n        uint32 _loanDuration,\\n        uint32 _lastRepaidTimestamp,\\n        PaymentCycleType _bidPaymentCycleType\\n    ) public view returns (uint32 dueDate_) {\\n        // Calculate due date if payment cycle is set to monthly\\n        if (_bidPaymentCycleType == PaymentCycleType.Monthly) {\\n            // Calculate the cycle number the last repayment was made\\n            uint256 lastPaymentCycle = BPBDTL.diffMonths(\\n                _acceptedTimestamp,\\n                _lastRepaidTimestamp\\n            );\\n            if (\\n                BPBDTL.getDay(_lastRepaidTimestamp) >\\n                BPBDTL.getDay(_acceptedTimestamp)\\n            ) {\\n                lastPaymentCycle += 2;\\n            } else {\\n                lastPaymentCycle += 1;\\n            }\\n\\n            dueDate_ = uint32(\\n                BPBDTL.addMonths(_acceptedTimestamp, lastPaymentCycle)\\n            );\\n        } else if (_bidPaymentCycleType == PaymentCycleType.Seconds) {\\n            // Start with the original due date being 1 payment cycle since bid was accepted\\n            dueDate_ = _acceptedTimestamp + _paymentCycle;\\n            // Calculate the cycle number the last repayment was made\\n            uint32 delta = _lastRepaidTimestamp - _acceptedTimestamp;\\n            if (delta > 0) {\\n                uint32 repaymentCycle = uint32(\\n                    Math.ceilDiv(delta, _paymentCycle)\\n                );\\n                dueDate_ += (repaymentCycle * _paymentCycle);\\n            }\\n        }\\n\\n        uint32 endOfLoan = _acceptedTimestamp + _loanDuration;\\n        //if we are in the last payment cycle, the next due date is the end of loan duration\\n        if (dueDate_ > endOfLoan) {\\n            dueDate_ = endOfLoan;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x184335b617baee6e84bf0c90f19526e170594bae9cb2f25385a3d41c1cc435f1\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Multiplier Finance\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n */\\nlibrary WadRayMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n    uint256 internal constant PCT_WAD_RATIO = 1e14;\\n    uint256 internal constant PCT_RAY_RATIO = 1e23;\\n\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfWAD.add(a.mul(b)).div(WAD);\\n    }\\n\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(WAD)).div(b);\\n    }\\n\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return halfRAY.add(a.mul(b)).div(RAY);\\n    }\\n\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 halfB = b / 2;\\n\\n        return halfB.add(a.mul(RAY)).div(b);\\n    }\\n\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n        return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    }\\n\\n    function rayToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_RAY_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_RAY_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToPct(uint256 a) internal pure returns (uint16) {\\n        uint256 halfRatio = PCT_WAD_RATIO / 2;\\n\\n        uint256 val = halfRatio.add(a).div(PCT_WAD_RATIO);\\n        return SafeCast.toUint16(val);\\n    }\\n\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        return a.mul(WAD_RAY_RATIO);\\n    }\\n\\n    function pctToRay(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(RAY).div(1e4);\\n    }\\n\\n    function pctToWad(uint16 a) internal pure returns (uint256) {\\n        return uint256(a).mul(WAD).div(1e4);\\n    }\\n\\n    /**\\n     * @dev calculates base^duration. The code uses the ModExp precompile\\n     * @return z base^duration, in ray\\n     */\\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, RAY, rayMul);\\n    }\\n\\n    function wadPow(uint256 x, uint256 n) internal pure returns (uint256) {\\n        return _pow(x, n, WAD, wadMul);\\n    }\\n\\n    function _pow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 p,\\n        function(uint256, uint256) internal pure returns (uint256) mul\\n    ) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : p;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = mul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2781319be7a96f56966c601c061849fa94dbf9af5ad80a20c40b879a8d03f14a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6109dc61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630dcf16581461003a575b600080fd5b61004d6100483660046106d5565b610066565b60405163ffffffff909116815260200160405180910390f35b6000600182600181111561007c5761007c610742565b14156100f857600061009a8763ffffffff168563ffffffff1661019c565b90506100ab8763ffffffff16610223565b6100ba8563ffffffff16610223565b11156100d2576100cb60028261076e565b90506100e0565b6100dd60018261076e565b90505b6100f08763ffffffff168261023d565b91505061016c565b600082600181111561010c5761010c610742565b141561016c5761011c8587610786565b9050600061012a87856107ae565b905063ffffffff81161561016a5760006101508263ffffffff168863ffffffff1661030f565b905061015c87826107d3565b6101669084610786565b9250505b505b60006101788588610786565b90508063ffffffff168263ffffffff161115610192578091505b5095945050505050565b6000818311156101ab57600080fd5b6000806101c36101be6201518087610815565b610349565b5090925090506000806101dc6101be6201518088610815565b509092509050826101ee85600c610829565b826101fa85600c610829565b610204919061076e565b61020e9190610848565b6102189190610848565b979650505050505050565b60006102356101be6201518084610815565b949350505050565b60008080806102526101be6201518088610815565b91945092509050610263858361076e565b9150600c610272600184610848565b61027c9190610815565b610286908461076e565b9250600c610295600184610848565b61029f919061085f565b6102aa90600161076e565b915060006102b884846104bd565b9050808211156102c6578091505b6102d3620151808861085f565b620151806102e2868686610543565b6102ec9190610829565b6102f6919061076e565b94508685101561030557600080fd5b5050505092915050565b6000821561033d5781610323600185610848565b61032d9190610815565b61033890600161076e565b610340565b60005b90505b92915050565b60008080838162253d8c6103608362010bd9610873565b61036a9190610873565b9050600062023ab161037d8360046108b4565b6103879190610939565b905060046103988262023ab16108b4565b6103a3906003610873565b6103ad9190610939565b6103b79083610967565b9150600062164b096103ca846001610873565b6103d690610fa06108b4565b6103e09190610939565b905060046103f0826105b56108b4565b6103fa9190610939565b6104049084610967565b61040f90601f610873565b9250600061098f6104218560506108b4565b61042b9190610939565b90506000605061043d8361098f6108b4565b6104479190610939565b6104519086610967565b905061045e600b83610939565b945061046b85600c6108b4565b610476836002610873565b6104809190610967565b9150848361048f603187610967565b61049a9060646108b4565b6104a49190610873565b6104ae9190610873565b9a919950975095505050505050565b600081600114806104ce5750816003145b806104d95750816005145b806104e45750816007145b806104ef5750816008145b806104fa575081600a145b80610505575081600c145b156105125750601f610343565b816002146105225750601e610343565b61052b83610680565b61053657601c610539565b601d5b60ff169392505050565b60006107b284101561055457600080fd5b838383600062253d8c60046064600c61056e600e88610967565b6105789190610939565b61058488611324610873565b61058e9190610873565b6105989190610939565b6105a39060036108b4565b6105ad9190610939565b600c806105bb600e88610967565b6105c59190610939565b6105d090600c6108b4565b6105db600288610967565b6105e59190610967565b6105f19061016f6108b4565b6105fb9190610939565b6004600c61060a600e89610967565b6106149190610939565b610620896112c0610873565b61062a9190610873565b610636906105b56108b4565b6106409190610939565b61064c617d4b87610967565b6106569190610873565b6106609190610873565b61066a9190610967565b6106749190610967565b98975050505050505050565b600061068d60048361085f565b1580156106a357506106a060648361085f565b15155b8061034357506106b56101908361085f565b1592915050565b803563ffffffff811681146106d057600080fd5b919050565b600080600080600060a086880312156106ed57600080fd5b6106f6866106bc565b9450610704602087016106bc565b9350610712604087016106bc565b9250610720606087016106bc565b915060808601356002811061073457600080fd5b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561078157610781610758565b500190565b600063ffffffff8083168185168083038211156107a5576107a5610758565b01949350505050565b600063ffffffff838116908316818110156107cb576107cb610758565b039392505050565b600063ffffffff808316818516818304811182151516156107f6576107f6610758565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b600082610824576108246107ff565b500490565b600081600019048311821515161561084357610843610758565b500290565b60008282101561085a5761085a610758565b500390565b60008261086e5761086e6107ff565b500690565b600080821280156001600160ff1b038490038513161561089557610895610758565b600160ff1b83900384128116156108ae576108ae610758565b50500190565b60006001600160ff1b03818413828413808216868404861116156108da576108da610758565b600160ff1b60008712828116878305891216156108f9576108f9610758565b6000871292508782058712848416161561091557610915610758565b8785058712818416161561092b5761092b610758565b505050929093029392505050565b600082610948576109486107ff565b600160ff1b82146000198414161561096257610962610758565b500590565b60008083128015600160ff1b85018412161561098557610985610758565b6001600160ff1b03840183138116156109a0576109a0610758565b5050039056fea2646970667358221220adc7b649583521cd2ec75afa94fb659d57954a1178848d1b3c5f02e6b49a852b64736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630dcf16581461003a575b600080fd5b61004d6100483660046106d5565b610066565b60405163ffffffff909116815260200160405180910390f35b6000600182600181111561007c5761007c610742565b14156100f857600061009a8763ffffffff168563ffffffff1661019c565b90506100ab8763ffffffff16610223565b6100ba8563ffffffff16610223565b11156100d2576100cb60028261076e565b90506100e0565b6100dd60018261076e565b90505b6100f08763ffffffff168261023d565b91505061016c565b600082600181111561010c5761010c610742565b141561016c5761011c8587610786565b9050600061012a87856107ae565b905063ffffffff81161561016a5760006101508263ffffffff168863ffffffff1661030f565b905061015c87826107d3565b6101669084610786565b9250505b505b60006101788588610786565b90508063ffffffff168263ffffffff161115610192578091505b5095945050505050565b6000818311156101ab57600080fd5b6000806101c36101be6201518087610815565b610349565b5090925090506000806101dc6101be6201518088610815565b509092509050826101ee85600c610829565b826101fa85600c610829565b610204919061076e565b61020e9190610848565b6102189190610848565b979650505050505050565b60006102356101be6201518084610815565b949350505050565b60008080806102526101be6201518088610815565b91945092509050610263858361076e565b9150600c610272600184610848565b61027c9190610815565b610286908461076e565b9250600c610295600184610848565b61029f919061085f565b6102aa90600161076e565b915060006102b884846104bd565b9050808211156102c6578091505b6102d3620151808861085f565b620151806102e2868686610543565b6102ec9190610829565b6102f6919061076e565b94508685101561030557600080fd5b5050505092915050565b6000821561033d5781610323600185610848565b61032d9190610815565b61033890600161076e565b610340565b60005b90505b92915050565b60008080838162253d8c6103608362010bd9610873565b61036a9190610873565b9050600062023ab161037d8360046108b4565b6103879190610939565b905060046103988262023ab16108b4565b6103a3906003610873565b6103ad9190610939565b6103b79083610967565b9150600062164b096103ca846001610873565b6103d690610fa06108b4565b6103e09190610939565b905060046103f0826105b56108b4565b6103fa9190610939565b6104049084610967565b61040f90601f610873565b9250600061098f6104218560506108b4565b61042b9190610939565b90506000605061043d8361098f6108b4565b6104479190610939565b6104519086610967565b905061045e600b83610939565b945061046b85600c6108b4565b610476836002610873565b6104809190610967565b9150848361048f603187610967565b61049a9060646108b4565b6104a49190610873565b6104ae9190610873565b9a919950975095505050505050565b600081600114806104ce5750816003145b806104d95750816005145b806104e45750816007145b806104ef5750816008145b806104fa575081600a145b80610505575081600c145b156105125750601f610343565b816002146105225750601e610343565b61052b83610680565b61053657601c610539565b601d5b60ff169392505050565b60006107b284101561055457600080fd5b838383600062253d8c60046064600c61056e600e88610967565b6105789190610939565b61058488611324610873565b61058e9190610873565b6105989190610939565b6105a39060036108b4565b6105ad9190610939565b600c806105bb600e88610967565b6105c59190610939565b6105d090600c6108b4565b6105db600288610967565b6105e59190610967565b6105f19061016f6108b4565b6105fb9190610939565b6004600c61060a600e89610967565b6106149190610939565b610620896112c0610873565b61062a9190610873565b610636906105b56108b4565b6106409190610939565b61064c617d4b87610967565b6106569190610873565b6106609190610873565b61066a9190610967565b6106749190610967565b98975050505050505050565b600061068d60048361085f565b1580156106a357506106a060648361085f565b15155b8061034357506106b56101908361085f565b1592915050565b803563ffffffff811681146106d057600080fd5b919050565b600080600080600060a086880312156106ed57600080fd5b6106f6866106bc565b9450610704602087016106bc565b9350610712604087016106bc565b9250610720606087016106bc565b915060808601356002811061073457600080fd5b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561078157610781610758565b500190565b600063ffffffff8083168185168083038211156107a5576107a5610758565b01949350505050565b600063ffffffff838116908316818110156107cb576107cb610758565b039392505050565b600063ffffffff808316818516818304811182151516156107f6576107f6610758565b02949350505050565b634e487b7160e01b600052601260045260246000fd5b600082610824576108246107ff565b500490565b600081600019048311821515161561084357610843610758565b500290565b60008282101561085a5761085a610758565b500390565b60008261086e5761086e6107ff565b500690565b600080821280156001600160ff1b038490038513161561089557610895610758565b600160ff1b83900384128116156108ae576108ae610758565b50500190565b60006001600160ff1b03818413828413808216868404861116156108da576108da610758565b600160ff1b60008712828116878305891216156108f9576108f9610758565b6000871292508782058712848416161561091557610915610758565b8785058712818416161561092b5761092b610758565b505050929093029392505050565b600082610948576109486107ff565b600160ff1b82146000198414161561096257610962610758565b500590565b60008083128015600160ff1b85018412161561098557610985610758565b6001600160ff1b03840183138116156109a0576109a0610758565b5050039056fea2646970667358221220adc7b649583521cd2ec75afa94fb659d57954a1178848d1b3c5f02e6b49a852b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}