// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatedCommitment extends ethereum.Event {
  get params(): CreatedCommitment__Params {
    return new CreatedCommitment__Params(this);
  }
}

export class CreatedCommitment__Params {
  _event: CreatedCommitment;

  constructor(event: CreatedCommitment) {
    this._event = event;
  }

  get commitmentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lendingToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class DeletedCommitment extends ethereum.Event {
  get params(): DeletedCommitment__Params {
    return new DeletedCommitment__Params(this);
  }
}

export class DeletedCommitment__Params {
  _event: DeletedCommitment;

  constructor(event: DeletedCommitment) {
    this._event = event;
  }

  get commitmentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ExercisedCommitment extends ethereum.Event {
  get params(): ExercisedCommitment__Params {
    return new ExercisedCommitment__Params(this);
  }
}

export class ExercisedCommitment__Params {
  _event: ExercisedCommitment;

  constructor(event: ExercisedCommitment) {
    this._event = event;
  }

  get commitmentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExtensionAdded extends ethereum.Event {
  get params(): ExtensionAdded__Params {
    return new ExtensionAdded__Params(this);
  }
}

export class ExtensionAdded__Params {
  _event: ExtensionAdded;

  constructor(event: ExtensionAdded) {
    this._event = event;
  }

  get extension(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ExtensionRevoked extends ethereum.Event {
  get params(): ExtensionRevoked__Params {
    return new ExtensionRevoked__Params(this);
  }
}

export class ExtensionRevoked__Params {
  _event: ExtensionRevoked;

  constructor(event: ExtensionRevoked) {
    this._event = event;
  }

  get extension(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class UpdatedCommitment extends ethereum.Event {
  get params(): UpdatedCommitment__Params {
    return new UpdatedCommitment__Params(this);
  }
}

export class UpdatedCommitment__Params {
  _event: UpdatedCommitment;

  constructor(event: UpdatedCommitment) {
    this._event = event;
  }

  get commitmentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lendingToken(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdatedCommitmentBorrowers extends ethereum.Event {
  get params(): UpdatedCommitmentBorrowers__Params {
    return new UpdatedCommitmentBorrowers__Params(this);
  }
}

export class UpdatedCommitmentBorrowers__Params {
  _event: UpdatedCommitmentBorrowers;

  constructor(event: UpdatedCommitmentBorrowers) {
    this._event = event;
  }

  get commitmentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha__commitmentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: i32;
  value8: Address;
  value9: BigInt;
  value10: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: i32,
    value8: Address,
    value9: BigInt,
    value10: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    return map;
  }

  getMaxPrincipal(): BigInt {
    return this.value0;
  }

  getExpiration(): BigInt {
    return this.value1;
  }

  getMaxDuration(): BigInt {
    return this.value2;
  }

  getMinInterestRate(): i32 {
    return this.value3;
  }

  getCollateralTokenAddress(): Address {
    return this.value4;
  }

  getCollateralTokenId(): BigInt {
    return this.value5;
  }

  getMaxPrincipalPerCollateralAmount(): BigInt {
    return this.value6;
  }

  getCollateralTokenType(): i32 {
    return this.value7;
  }

  getLender(): Address {
    return this.value8;
  }

  getMarketId(): BigInt {
    return this.value9;
  }

  getPrincipalTokenAddress(): Address {
    return this.value10;
  }
}

export class LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_commitmentStruct extends ethereum.Tuple {
  get maxPrincipal(): BigInt {
    return this[0].toBigInt();
  }

  get expiration(): BigInt {
    return this[1].toBigInt();
  }

  get maxDuration(): BigInt {
    return this[2].toBigInt();
  }

  get minInterestRate(): i32 {
    return this[3].toI32();
  }

  get collateralTokenAddress(): Address {
    return this[4].toAddress();
  }

  get collateralTokenId(): BigInt {
    return this[5].toBigInt();
  }

  get maxPrincipalPerCollateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get collateralTokenType(): i32 {
    return this[7].toI32();
  }

  get lender(): Address {
    return this[8].toAddress();
  }

  get marketId(): BigInt {
    return this[9].toBigInt();
  }

  get principalTokenAddress(): Address {
    return this[10].toAddress();
  }
}

export class LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_poolRoutesStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha__getAllCommitmentUniswapPoolRoutesResultValue0Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha__getCommitmentUniswapPoolRouteResultValue0Struct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolInput_poolRouteConfigStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolRoutesInputPoolRoutesStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class LenderCommitmentForwarderAlpha extends ethereum.SmartContract {
  static bind(address: Address): LenderCommitmentForwarderAlpha {
    return new LenderCommitmentForwarderAlpha(
      "LenderCommitmentForwarderAlpha",
      address
    );
  }

  _marketRegistry(): Address {
    let result = super.call(
      "_marketRegistry",
      "_marketRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__marketRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_marketRegistry",
      "_marketRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _tellerV2(): Address {
    let result = super.call("_tellerV2", "_tellerV2():(address)", []);

    return result[0].toAddress();
  }

  try__tellerV2(): ethereum.CallResult<Address> {
    let result = super.tryCall("_tellerV2", "_tellerV2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptCommitment(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _interestRate: i32,
    _loanDuration: BigInt
  ): BigInt {
    let result = super.call(
      "acceptCommitment",
      "acceptCommitment(uint256,uint256,uint256,uint256,address,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_acceptCommitment(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _interestRate: i32,
    _loanDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptCommitment",
      "acceptCommitment(uint256,uint256,uint256,uint256,address,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptCommitmentWithProof(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _interestRate: i32,
    _loanDuration: BigInt,
    _merkleProof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "acceptCommitmentWithProof",
      "acceptCommitmentWithProof(uint256,uint256,uint256,uint256,address,uint16,uint32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );

    return result[0].toBigInt();
  }

  try_acceptCommitmentWithProof(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _interestRate: i32,
    _loanDuration: BigInt,
    _merkleProof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptCommitmentWithProof",
      "acceptCommitmentWithProof(uint256,uint256,uint256,uint256,address,uint16,uint32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptCommitmentWithRecipient(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _recipient: Address,
    _interestRate: i32,
    _loanDuration: BigInt
  ): BigInt {
    let result = super.call(
      "acceptCommitmentWithRecipient",
      "acceptCommitmentWithRecipient(uint256,uint256,uint256,uint256,address,address,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration)
      ]
    );

    return result[0].toBigInt();
  }

  try_acceptCommitmentWithRecipient(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _recipient: Address,
    _interestRate: i32,
    _loanDuration: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptCommitmentWithRecipient",
      "acceptCommitmentWithRecipient(uint256,uint256,uint256,uint256,address,address,uint16,uint32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptCommitmentWithRecipientAndProof(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _recipient: Address,
    _interestRate: i32,
    _loanDuration: BigInt,
    _merkleProof: Array<Bytes>
  ): BigInt {
    let result = super.call(
      "acceptCommitmentWithRecipientAndProof",
      "acceptCommitmentWithRecipientAndProof(uint256,uint256,uint256,uint256,address,address,uint16,uint32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );

    return result[0].toBigInt();
  }

  try_acceptCommitmentWithRecipientAndProof(
    _commitmentId: BigInt,
    _principalAmount: BigInt,
    _collateralAmount: BigInt,
    _collateralTokenId: BigInt,
    _collateralTokenAddress: Address,
    _recipient: Address,
    _interestRate: i32,
    _loanDuration: BigInt,
    _merkleProof: Array<Bytes>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "acceptCommitmentWithRecipientAndProof",
      "acceptCommitmentWithRecipientAndProof(uint256,uint256,uint256,uint256,address,address,uint16,uint32,bytes32[]):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_commitmentId),
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralAmount),
        ethereum.Value.fromUnsignedBigInt(_collateralTokenId),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_interestRate)),
        ethereum.Value.fromUnsignedBigInt(_loanDuration),
        ethereum.Value.fromFixedBytesArray(_merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitmentPrincipalAccepted(param0: BigInt): BigInt {
    let result = super.call(
      "commitmentPrincipalAccepted",
      "commitmentPrincipalAccepted(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_commitmentPrincipalAccepted(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "commitmentPrincipalAccepted",
      "commitmentPrincipalAccepted(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  commitments(
    param0: BigInt
  ): LenderCommitmentForwarderAlpha__commitmentsResult {
    let result = super.call(
      "commitments",
      "commitments(uint256):(uint256,uint32,uint32,uint16,address,uint256,uint256,uint8,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LenderCommitmentForwarderAlpha__commitmentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32(),
      result[8].toAddress(),
      result[9].toBigInt(),
      result[10].toAddress()
    );
  }

  try_commitments(
    param0: BigInt
  ): ethereum.CallResult<LenderCommitmentForwarderAlpha__commitmentsResult> {
    let result = super.tryCall(
      "commitments",
      "commitments(uint256):(uint256,uint32,uint32,uint16,address,uint256,uint256,uint8,address,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LenderCommitmentForwarderAlpha__commitmentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32(),
        value[8].toAddress(),
        value[9].toBigInt(),
        value[10].toAddress()
      )
    );
  }

  createCommitmentWithUniswap(
    _commitment: LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_commitmentStruct,
    _borrowerAddressList: Array<Address>,
    _poolRoutes: Array<
      LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_poolRoutesStruct
    >,
    _poolOracleLtvRatio: i32
  ): BigInt {
    let result = super.call(
      "createCommitmentWithUniswap",
      "createCommitmentWithUniswap((uint256,uint32,uint32,uint16,address,uint256,uint256,uint8,address,uint256,address),address[],(address,bool,uint32,uint256,uint256)[],uint16):(uint256)",
      [
        ethereum.Value.fromTuple(_commitment),
        ethereum.Value.fromAddressArray(_borrowerAddressList),
        ethereum.Value.fromTupleArray(_poolRoutes),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_poolOracleLtvRatio))
      ]
    );

    return result[0].toBigInt();
  }

  try_createCommitmentWithUniswap(
    _commitment: LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_commitmentStruct,
    _borrowerAddressList: Array<Address>,
    _poolRoutes: Array<
      LenderCommitmentForwarderAlpha__createCommitmentWithUniswapInput_poolRoutesStruct
    >,
    _poolOracleLtvRatio: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createCommitmentWithUniswap",
      "createCommitmentWithUniswap((uint256,uint32,uint32,uint16,address,uint256,uint256,uint8,address,uint256,address),address[],(address,bool,uint32,uint256,uint256)[],uint16):(uint256)",
      [
        ethereum.Value.fromTuple(_commitment),
        ethereum.Value.fromAddressArray(_borrowerAddressList),
        ethereum.Value.fromTupleArray(_poolRoutes),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_poolOracleLtvRatio))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllCommitmentUniswapPoolRoutes(
    commitmentId: BigInt
  ): Array<
    LenderCommitmentForwarderAlpha__getAllCommitmentUniswapPoolRoutesResultValue0Struct
  > {
    let result = super.call(
      "getAllCommitmentUniswapPoolRoutes",
      "getAllCommitmentUniswapPoolRoutes(uint256):((address,bool,uint32,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(commitmentId)]
    );

    return result[0].toTupleArray<
      LenderCommitmentForwarderAlpha__getAllCommitmentUniswapPoolRoutesResultValue0Struct
    >();
  }

  try_getAllCommitmentUniswapPoolRoutes(
    commitmentId: BigInt
  ): ethereum.CallResult<
    Array<
      LenderCommitmentForwarderAlpha__getAllCommitmentUniswapPoolRoutesResultValue0Struct
    >
  > {
    let result = super.tryCall(
      "getAllCommitmentUniswapPoolRoutes",
      "getAllCommitmentUniswapPoolRoutes(uint256):((address,bool,uint32,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        LenderCommitmentForwarderAlpha__getAllCommitmentUniswapPoolRoutesResultValue0Struct
      >()
    );
  }

  getCommitmentAcceptedPrincipal(_commitmentId: BigInt): BigInt {
    let result = super.call(
      "getCommitmentAcceptedPrincipal",
      "getCommitmentAcceptedPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );

    return result[0].toBigInt();
  }

  try_getCommitmentAcceptedPrincipal(
    _commitmentId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentAcceptedPrincipal",
      "getCommitmentAcceptedPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentBorrowers(_commitmentId: BigInt): Array<Address> {
    let result = super.call(
      "getCommitmentBorrowers",
      "getCommitmentBorrowers(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );

    return result[0].toAddressArray();
  }

  try_getCommitmentBorrowers(
    _commitmentId: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCommitmentBorrowers",
      "getCommitmentBorrowers(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCommitmentLender(_commitmentId: BigInt): Address {
    let result = super.call(
      "getCommitmentLender",
      "getCommitmentLender(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );

    return result[0].toAddress();
  }

  try_getCommitmentLender(_commitmentId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCommitmentLender",
      "getCommitmentLender(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCommitmentMarketId(_commitmentId: BigInt): BigInt {
    let result = super.call(
      "getCommitmentMarketId",
      "getCommitmentMarketId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );

    return result[0].toBigInt();
  }

  try_getCommitmentMarketId(
    _commitmentId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentMarketId",
      "getCommitmentMarketId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentMaxPrincipal(_commitmentId: BigInt): BigInt {
    let result = super.call(
      "getCommitmentMaxPrincipal",
      "getCommitmentMaxPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );

    return result[0].toBigInt();
  }

  try_getCommitmentMaxPrincipal(
    _commitmentId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCommitmentMaxPrincipal",
      "getCommitmentMaxPrincipal(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCommitmentPoolOracleLtvRatio(commitmentId: BigInt): i32 {
    let result = super.call(
      "getCommitmentPoolOracleLtvRatio",
      "getCommitmentPoolOracleLtvRatio(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(commitmentId)]
    );

    return result[0].toI32();
  }

  try_getCommitmentPoolOracleLtvRatio(
    commitmentId: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCommitmentPoolOracleLtvRatio",
      "getCommitmentPoolOracleLtvRatio(uint256):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(commitmentId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCommitmentUniswapPoolRoute(
    commitmentId: BigInt,
    index: BigInt
  ): LenderCommitmentForwarderAlpha__getCommitmentUniswapPoolRouteResultValue0Struct {
    let result = super.call(
      "getCommitmentUniswapPoolRoute",
      "getCommitmentUniswapPoolRoute(uint256,uint256):((address,bool,uint32,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(commitmentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return changetype<
      LenderCommitmentForwarderAlpha__getCommitmentUniswapPoolRouteResultValue0Struct
    >(result[0].toTuple());
  }

  try_getCommitmentUniswapPoolRoute(
    commitmentId: BigInt,
    index: BigInt
  ): ethereum.CallResult<
    LenderCommitmentForwarderAlpha__getCommitmentUniswapPoolRouteResultValue0Struct
  > {
    let result = super.tryCall(
      "getCommitmentUniswapPoolRoute",
      "getCommitmentUniswapPoolRoute(uint256,uint256):((address,bool,uint32,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(commitmentId),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<
        LenderCommitmentForwarderAlpha__getCommitmentUniswapPoolRouteResultValue0Struct
      >(value[0].toTuple())
    );
  }

  getMarketRegistry(): Address {
    let result = super.call(
      "getMarketRegistry",
      "getMarketRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getMarketRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketRegistry",
      "getMarketRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRequiredCollateral(
    _principalAmount: BigInt,
    _maxPrincipalPerCollateralAmount: BigInt,
    _collateralTokenType: i32
  ): BigInt {
    let result = super.call(
      "getRequiredCollateral",
      "getRequiredCollateral(uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_maxPrincipalPerCollateralAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_collateralTokenType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getRequiredCollateral(
    _principalAmount: BigInt,
    _maxPrincipalPerCollateralAmount: BigInt,
    _collateralTokenType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequiredCollateral",
      "getRequiredCollateral(uint256,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_principalAmount),
        ethereum.Value.fromUnsignedBigInt(_maxPrincipalPerCollateralAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_collateralTokenType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTellerV2(): Address {
    let result = super.call("getTellerV2", "getTellerV2():(address)", []);

    return result[0].toAddress();
  }

  try_getTellerV2(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTellerV2", "getTellerV2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTellerV2MarketOwner(marketId: BigInt): Address {
    let result = super.call(
      "getTellerV2MarketOwner",
      "getTellerV2MarketOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toAddress();
  }

  try_getTellerV2MarketOwner(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTellerV2MarketOwner",
      "getTellerV2MarketOwner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUniswapPriceRatioForPool(
    _poolRouteConfig: LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolInput_poolRouteConfigStruct
  ): BigInt {
    let result = super.call(
      "getUniswapPriceRatioForPool",
      "getUniswapPriceRatioForPool((address,bool,uint32,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_poolRouteConfig)]
    );

    return result[0].toBigInt();
  }

  try_getUniswapPriceRatioForPool(
    _poolRouteConfig: LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolInput_poolRouteConfigStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUniswapPriceRatioForPool",
      "getUniswapPriceRatioForPool((address,bool,uint32,uint256,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_poolRouteConfig)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUniswapPriceRatioForPoolRoutes(
    poolRoutes: Array<
      LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolRoutesInputPoolRoutesStruct
    >
  ): BigInt {
    let result = super.call(
      "getUniswapPriceRatioForPoolRoutes",
      "getUniswapPriceRatioForPoolRoutes((address,bool,uint32,uint256,uint256)[]):(uint256)",
      [ethereum.Value.fromTupleArray(poolRoutes)]
    );

    return result[0].toBigInt();
  }

  try_getUniswapPriceRatioForPoolRoutes(
    poolRoutes: Array<
      LenderCommitmentForwarderAlpha__getUniswapPriceRatioForPoolRoutesInputPoolRoutesStruct
    >
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUniswapPriceRatioForPoolRoutes",
      "getUniswapPriceRatioForPoolRoutes((address,bool,uint32,uint256,uint256)[]):(uint256)",
      [ethereum.Value.fromTupleArray(poolRoutes)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUniswapV3PoolAddress(
    _principalTokenAddress: Address,
    _collateralTokenAddress: Address,
    _uniswapPoolFee: i32
  ): Address {
    let result = super.call(
      "getUniswapV3PoolAddress",
      "getUniswapV3PoolAddress(address,address,uint24):(address)",
      [
        ethereum.Value.fromAddress(_principalTokenAddress),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_uniswapPoolFee))
      ]
    );

    return result[0].toAddress();
  }

  try_getUniswapV3PoolAddress(
    _principalTokenAddress: Address,
    _collateralTokenAddress: Address,
    _uniswapPoolFee: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUniswapV3PoolAddress",
      "getUniswapV3PoolAddress(address,address,uint24):(address)",
      [
        ethereum.Value.fromAddress(_principalTokenAddress),
        ethereum.Value.fromAddress(_collateralTokenAddress),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_uniswapPoolFee))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasExtension(account: Address, extension: Address): boolean {
    let result = super.call(
      "hasExtension",
      "hasExtension(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(extension)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasExtension(
    account: Address,
    extension: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasExtension",
      "hasExtension(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(extension)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AcceptCommitmentCall extends ethereum.Call {
  get inputs(): AcceptCommitmentCall__Inputs {
    return new AcceptCommitmentCall__Inputs(this);
  }

  get outputs(): AcceptCommitmentCall__Outputs {
    return new AcceptCommitmentCall__Outputs(this);
  }
}

export class AcceptCommitmentCall__Inputs {
  _call: AcceptCommitmentCall;

  constructor(call: AcceptCommitmentCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _collateralTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _interestRate(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _loanDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AcceptCommitmentCall__Outputs {
  _call: AcceptCommitmentCall;

  constructor(call: AcceptCommitmentCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptCommitmentWithProofCall extends ethereum.Call {
  get inputs(): AcceptCommitmentWithProofCall__Inputs {
    return new AcceptCommitmentWithProofCall__Inputs(this);
  }

  get outputs(): AcceptCommitmentWithProofCall__Outputs {
    return new AcceptCommitmentWithProofCall__Outputs(this);
  }
}

export class AcceptCommitmentWithProofCall__Inputs {
  _call: AcceptCommitmentWithProofCall;

  constructor(call: AcceptCommitmentWithProofCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _collateralTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _interestRate(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _loanDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[7].value.toBytesArray();
  }
}

export class AcceptCommitmentWithProofCall__Outputs {
  _call: AcceptCommitmentWithProofCall;

  constructor(call: AcceptCommitmentWithProofCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptCommitmentWithRecipientCall extends ethereum.Call {
  get inputs(): AcceptCommitmentWithRecipientCall__Inputs {
    return new AcceptCommitmentWithRecipientCall__Inputs(this);
  }

  get outputs(): AcceptCommitmentWithRecipientCall__Outputs {
    return new AcceptCommitmentWithRecipientCall__Outputs(this);
  }
}

export class AcceptCommitmentWithRecipientCall__Inputs {
  _call: AcceptCommitmentWithRecipientCall;

  constructor(call: AcceptCommitmentWithRecipientCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _collateralTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _interestRate(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _loanDuration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class AcceptCommitmentWithRecipientCall__Outputs {
  _call: AcceptCommitmentWithRecipientCall;

  constructor(call: AcceptCommitmentWithRecipientCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptCommitmentWithRecipientAndProofCall extends ethereum.Call {
  get inputs(): AcceptCommitmentWithRecipientAndProofCall__Inputs {
    return new AcceptCommitmentWithRecipientAndProofCall__Inputs(this);
  }

  get outputs(): AcceptCommitmentWithRecipientAndProofCall__Outputs {
    return new AcceptCommitmentWithRecipientAndProofCall__Outputs(this);
  }
}

export class AcceptCommitmentWithRecipientAndProofCall__Inputs {
  _call: AcceptCommitmentWithRecipientAndProofCall;

  constructor(call: AcceptCommitmentWithRecipientAndProofCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _principalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _collateralTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _interestRate(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _loanDuration(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _merkleProof(): Array<Bytes> {
    return this._call.inputValues[8].value.toBytesArray();
  }
}

export class AcceptCommitmentWithRecipientAndProofCall__Outputs {
  _call: AcceptCommitmentWithRecipientAndProofCall;

  constructor(call: AcceptCommitmentWithRecipientAndProofCall) {
    this._call = call;
  }

  get bidId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddCommitmentBorrowersCall extends ethereum.Call {
  get inputs(): AddCommitmentBorrowersCall__Inputs {
    return new AddCommitmentBorrowersCall__Inputs(this);
  }

  get outputs(): AddCommitmentBorrowersCall__Outputs {
    return new AddCommitmentBorrowersCall__Outputs(this);
  }
}

export class AddCommitmentBorrowersCall__Inputs {
  _call: AddCommitmentBorrowersCall;

  constructor(call: AddCommitmentBorrowersCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _borrowerAddressList(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class AddCommitmentBorrowersCall__Outputs {
  _call: AddCommitmentBorrowersCall;

  constructor(call: AddCommitmentBorrowersCall) {
    this._call = call;
  }
}

export class AddExtensionCall extends ethereum.Call {
  get inputs(): AddExtensionCall__Inputs {
    return new AddExtensionCall__Inputs(this);
  }

  get outputs(): AddExtensionCall__Outputs {
    return new AddExtensionCall__Outputs(this);
  }
}

export class AddExtensionCall__Inputs {
  _call: AddExtensionCall;

  constructor(call: AddExtensionCall) {
    this._call = call;
  }

  get extension(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExtensionCall__Outputs {
  _call: AddExtensionCall;

  constructor(call: AddExtensionCall) {
    this._call = call;
  }
}

export class CreateCommitmentWithUniswapCall extends ethereum.Call {
  get inputs(): CreateCommitmentWithUniswapCall__Inputs {
    return new CreateCommitmentWithUniswapCall__Inputs(this);
  }

  get outputs(): CreateCommitmentWithUniswapCall__Outputs {
    return new CreateCommitmentWithUniswapCall__Outputs(this);
  }
}

export class CreateCommitmentWithUniswapCall__Inputs {
  _call: CreateCommitmentWithUniswapCall;

  constructor(call: CreateCommitmentWithUniswapCall) {
    this._call = call;
  }

  get _commitment(): CreateCommitmentWithUniswapCall_commitmentStruct {
    return changetype<CreateCommitmentWithUniswapCall_commitmentStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _borrowerAddressList(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _poolRoutes(): Array<CreateCommitmentWithUniswapCall_poolRoutesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      CreateCommitmentWithUniswapCall_poolRoutesStruct
    >();
  }

  get _poolOracleLtvRatio(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateCommitmentWithUniswapCall__Outputs {
  _call: CreateCommitmentWithUniswapCall;

  constructor(call: CreateCommitmentWithUniswapCall) {
    this._call = call;
  }

  get commitmentId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateCommitmentWithUniswapCall_commitmentStruct extends ethereum.Tuple {
  get maxPrincipal(): BigInt {
    return this[0].toBigInt();
  }

  get expiration(): BigInt {
    return this[1].toBigInt();
  }

  get maxDuration(): BigInt {
    return this[2].toBigInt();
  }

  get minInterestRate(): i32 {
    return this[3].toI32();
  }

  get collateralTokenAddress(): Address {
    return this[4].toAddress();
  }

  get collateralTokenId(): BigInt {
    return this[5].toBigInt();
  }

  get maxPrincipalPerCollateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get collateralTokenType(): i32 {
    return this[7].toI32();
  }

  get lender(): Address {
    return this[8].toAddress();
  }

  get marketId(): BigInt {
    return this[9].toBigInt();
  }

  get principalTokenAddress(): Address {
    return this[10].toAddress();
  }
}

export class CreateCommitmentWithUniswapCall_poolRoutesStruct extends ethereum.Tuple {
  get pool(): Address {
    return this[0].toAddress();
  }

  get zeroForOne(): boolean {
    return this[1].toBoolean();
  }

  get twapInterval(): BigInt {
    return this[2].toBigInt();
  }

  get token0Decimals(): BigInt {
    return this[3].toBigInt();
  }

  get token1Decimals(): BigInt {
    return this[4].toBigInt();
  }
}

export class DeleteCommitmentCall extends ethereum.Call {
  get inputs(): DeleteCommitmentCall__Inputs {
    return new DeleteCommitmentCall__Inputs(this);
  }

  get outputs(): DeleteCommitmentCall__Outputs {
    return new DeleteCommitmentCall__Outputs(this);
  }
}

export class DeleteCommitmentCall__Inputs {
  _call: DeleteCommitmentCall;

  constructor(call: DeleteCommitmentCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeleteCommitmentCall__Outputs {
  _call: DeleteCommitmentCall;

  constructor(call: DeleteCommitmentCall) {
    this._call = call;
  }
}

export class GetTellerV2MarketOwnerCall extends ethereum.Call {
  get inputs(): GetTellerV2MarketOwnerCall__Inputs {
    return new GetTellerV2MarketOwnerCall__Inputs(this);
  }

  get outputs(): GetTellerV2MarketOwnerCall__Outputs {
    return new GetTellerV2MarketOwnerCall__Outputs(this);
  }
}

export class GetTellerV2MarketOwnerCall__Inputs {
  _call: GetTellerV2MarketOwnerCall;

  constructor(call: GetTellerV2MarketOwnerCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetTellerV2MarketOwnerCall__Outputs {
  _call: GetTellerV2MarketOwnerCall;

  constructor(call: GetTellerV2MarketOwnerCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RemoveCommitmentBorrowersCall extends ethereum.Call {
  get inputs(): RemoveCommitmentBorrowersCall__Inputs {
    return new RemoveCommitmentBorrowersCall__Inputs(this);
  }

  get outputs(): RemoveCommitmentBorrowersCall__Outputs {
    return new RemoveCommitmentBorrowersCall__Outputs(this);
  }
}

export class RemoveCommitmentBorrowersCall__Inputs {
  _call: RemoveCommitmentBorrowersCall;

  constructor(call: RemoveCommitmentBorrowersCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _borrowerAddressList(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class RemoveCommitmentBorrowersCall__Outputs {
  _call: RemoveCommitmentBorrowersCall;

  constructor(call: RemoveCommitmentBorrowersCall) {
    this._call = call;
  }
}

export class RevokeExtensionCall extends ethereum.Call {
  get inputs(): RevokeExtensionCall__Inputs {
    return new RevokeExtensionCall__Inputs(this);
  }

  get outputs(): RevokeExtensionCall__Outputs {
    return new RevokeExtensionCall__Outputs(this);
  }
}

export class RevokeExtensionCall__Inputs {
  _call: RevokeExtensionCall;

  constructor(call: RevokeExtensionCall) {
    this._call = call;
  }

  get extension(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeExtensionCall__Outputs {
  _call: RevokeExtensionCall;

  constructor(call: RevokeExtensionCall) {
    this._call = call;
  }
}

export class UpdateCommitmentCall extends ethereum.Call {
  get inputs(): UpdateCommitmentCall__Inputs {
    return new UpdateCommitmentCall__Inputs(this);
  }

  get outputs(): UpdateCommitmentCall__Outputs {
    return new UpdateCommitmentCall__Outputs(this);
  }
}

export class UpdateCommitmentCall__Inputs {
  _call: UpdateCommitmentCall;

  constructor(call: UpdateCommitmentCall) {
    this._call = call;
  }

  get _commitmentId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _commitment(): UpdateCommitmentCall_commitmentStruct {
    return changetype<UpdateCommitmentCall_commitmentStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class UpdateCommitmentCall__Outputs {
  _call: UpdateCommitmentCall;

  constructor(call: UpdateCommitmentCall) {
    this._call = call;
  }
}

export class UpdateCommitmentCall_commitmentStruct extends ethereum.Tuple {
  get maxPrincipal(): BigInt {
    return this[0].toBigInt();
  }

  get expiration(): BigInt {
    return this[1].toBigInt();
  }

  get maxDuration(): BigInt {
    return this[2].toBigInt();
  }

  get minInterestRate(): i32 {
    return this[3].toI32();
  }

  get collateralTokenAddress(): Address {
    return this[4].toAddress();
  }

  get collateralTokenId(): BigInt {
    return this[5].toBigInt();
  }

  get maxPrincipalPerCollateralAmount(): BigInt {
    return this[6].toBigInt();
  }

  get collateralTokenType(): i32 {
    return this[7].toI32();
  }

  get lender(): Address {
    return this[8].toAddress();
  }

  get marketId(): BigInt {
    return this[9].toBigInt();
  }

  get principalTokenAddress(): Address {
    return this[10].toAddress();
  }
}
