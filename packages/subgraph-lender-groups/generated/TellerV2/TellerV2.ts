// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptedBid extends ethereum.Event {
  get params(): AcceptedBid__Params {
    return new AcceptedBid__Params(this);
  }
}

export class AcceptedBid__Params {
  _event: AcceptedBid;

  constructor(event: AcceptedBid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelledBid extends ethereum.Event {
  get params(): CancelledBid__Params {
    return new CancelledBid__Params(this);
  }
}

export class CancelledBid__Params {
  _event: CancelledBid;

  constructor(event: CancelledBid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FeePaid extends ethereum.Event {
  get params(): FeePaid__Params {
    return new FeePaid__Params(this);
  }
}

export class FeePaid__Params {
  _event: FeePaid;

  constructor(event: FeePaid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeType(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LoanLiquidated extends ethereum.Event {
  get params(): LoanLiquidated__Params {
    return new LoanLiquidated__Params(this);
  }
}

export class LoanLiquidated__Params {
  _event: LoanLiquidated;

  constructor(event: LoanLiquidated) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoanRepaid extends ethereum.Event {
  get params(): LoanRepaid__Params {
    return new LoanRepaid__Params(this);
  }
}

export class LoanRepaid__Params {
  _event: LoanRepaid;

  constructor(event: LoanRepaid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LoanRepayment extends ethereum.Event {
  get params(): LoanRepayment__Params {
    return new LoanRepayment__Params(this);
  }
}

export class LoanRepayment__Params {
  _event: LoanRepayment;

  constructor(event: LoanRepayment) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketForwarderApproved extends ethereum.Event {
  get params(): MarketForwarderApproved__Params {
    return new MarketForwarderApproved__Params(this);
  }
}

export class MarketForwarderApproved__Params {
  _event: MarketForwarderApproved;

  constructor(event: MarketForwarderApproved) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forwarder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketForwarderRenounced extends ethereum.Event {
  get params(): MarketForwarderRenounced__Params {
    return new MarketForwarderRenounced__Params(this);
  }
}

export class MarketForwarderRenounced__Params {
  _event: MarketForwarderRenounced;

  constructor(event: MarketForwarderRenounced) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forwarder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketOwnerCancelledBid extends ethereum.Event {
  get params(): MarketOwnerCancelledBid__Params {
    return new MarketOwnerCancelledBid__Params(this);
  }
}

export class MarketOwnerCancelledBid__Params {
  _event: MarketOwnerCancelledBid;

  constructor(event: MarketOwnerCancelledBid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProtocolFeeSet extends ethereum.Event {
  get params(): ProtocolFeeSet__Params {
    return new ProtocolFeeSet__Params(this);
  }
}

export class ProtocolFeeSet__Params {
  _event: ProtocolFeeSet;

  constructor(event: ProtocolFeeSet) {
    this._event = event;
  }

  get newFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get oldFee(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class SubmittedBid extends ethereum.Event {
  get params(): SubmittedBid__Params {
    return new SubmittedBid__Params(this);
  }
}

export class SubmittedBid__Params {
  _event: SubmittedBid;

  constructor(event: SubmittedBid) {
    this._event = event;
  }

  get bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get borrower(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get metadataURI(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class TrustedMarketForwarderSet extends ethereum.Event {
  get params(): TrustedMarketForwarderSet__Params {
    return new TrustedMarketForwarderSet__Params(this);
  }
}

export class TrustedMarketForwarderSet__Params {
  _event: TrustedMarketForwarderSet;

  constructor(event: TrustedMarketForwarderSet) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forwarder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TellerV2__bidsResultLoanDetailsStruct extends ethereum.Tuple {
  get lendingToken(): Address {
    return this[0].toAddress();
  }

  get principal(): BigInt {
    return this[1].toBigInt();
  }

  get totalRepaid(): TellerV2__bidsResultLoanDetailsTotalRepaidStruct {
    return changetype<TellerV2__bidsResultLoanDetailsTotalRepaidStruct>(
      this[2].toTuple()
    );
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get acceptedTimestamp(): BigInt {
    return this[4].toBigInt();
  }

  get lastRepaidTimestamp(): BigInt {
    return this[5].toBigInt();
  }

  get loanDuration(): BigInt {
    return this[6].toBigInt();
  }
}

export class TellerV2__bidsResultLoanDetailsTotalRepaidStruct extends ethereum.Tuple {
  get principal(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }
}

export class TellerV2__bidsResultTermsStruct extends ethereum.Tuple {
  get paymentCycleAmount(): BigInt {
    return this[0].toBigInt();
  }

  get paymentCycle(): BigInt {
    return this[1].toBigInt();
  }

  get APR(): i32 {
    return this[2].toI32();
  }
}

export class TellerV2__bidsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: Bytes;
  value5: TellerV2__bidsResultLoanDetailsStruct;
  value6: TellerV2__bidsResultTermsStruct;
  value7: i32;
  value8: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: Bytes,
    value5: TellerV2__bidsResultLoanDetailsStruct,
    value6: TellerV2__bidsResultTermsStruct,
    value7: i32,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromFixedBytes(this.value4));
    map.set("value5", ethereum.Value.fromTuple(this.value5));
    map.set("value6", ethereum.Value.fromTuple(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }

  getBorrower(): Address {
    return this.value0;
  }

  getReceiver(): Address {
    return this.value1;
  }

  getLender(): Address {
    return this.value2;
  }

  getMarketplaceId(): BigInt {
    return this.value3;
  }

  get_metadataURI(): Bytes {
    return this.value4;
  }

  getLoanDetails(): TellerV2__bidsResultLoanDetailsStruct {
    return this.value5;
  }

  getTerms(): TellerV2__bidsResultTermsStruct {
    return this.value6;
  }

  getState(): i32 {
    return this.value7;
  }

  getPaymentType(): i32 {
    return this.value8;
  }
}

export class TellerV2__calculateAmountDueResultDueStruct extends ethereum.Tuple {
  get principal(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }
}

export class TellerV2__calculateAmountOwedResultOwedStruct extends ethereum.Tuple {
  get principal(): BigInt {
    return this[0].toBigInt();
  }

  get interest(): BigInt {
    return this[1].toBigInt();
  }
}

export class TellerV2__getLoanSummaryResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7))
    );
    return map;
  }

  getBorrower(): Address {
    return this.value0;
  }

  getLender(): Address {
    return this.value1;
  }

  getMarketId(): BigInt {
    return this.value2;
  }

  getPrincipalTokenAddress(): Address {
    return this.value3;
  }

  getPrincipalAmount(): BigInt {
    return this.value4;
  }

  getAcceptedTimestamp(): BigInt {
    return this.value5;
  }

  getLastRepaidTimestamp(): BigInt {
    return this.value6;
  }

  getBidState(): i32 {
    return this.value7;
  }
}

export class TellerV2__lenderAcceptBidResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getAmountToProtocol(): BigInt {
    return this.value0;
  }

  getAmountToMarketplace(): BigInt {
    return this.value1;
  }

  getAmountToBorrower(): BigInt {
    return this.value2;
  }
}

export class TellerV2__submitBid1Input_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class TellerV2 extends ethereum.SmartContract {
  static bind(address: Address): TellerV2 {
    return new TellerV2("TellerV2", address);
  }

  CURRENT_CODE_VERSION(): i32 {
    let result = super.call(
      "CURRENT_CODE_VERSION",
      "CURRENT_CODE_VERSION():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_CURRENT_CODE_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "CURRENT_CODE_VERSION",
      "CURRENT_CODE_VERSION():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  LIQUIDATION_DELAY(): BigInt {
    let result = super.call(
      "LIQUIDATION_DELAY",
      "LIQUIDATION_DELAY():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_DELAY",
      "LIQUIDATION_DELAY():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  __lenderVolumeFilled(param0: Address): BigInt {
    let result = super.call(
      "__lenderVolumeFilled",
      "__lenderVolumeFilled(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try___lenderVolumeFilled(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "__lenderVolumeFilled",
      "__lenderVolumeFilled(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  __totalVolumeFilled(): BigInt {
    let result = super.call(
      "__totalVolumeFilled",
      "__totalVolumeFilled():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try___totalVolumeFilled(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "__totalVolumeFilled",
      "__totalVolumeFilled():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidDefaultDuration(param0: BigInt): BigInt {
    let result = super.call(
      "bidDefaultDuration",
      "bidDefaultDuration(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_bidDefaultDuration(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bidDefaultDuration",
      "bidDefaultDuration(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidExpirationTime(param0: BigInt): BigInt {
    let result = super.call(
      "bidExpirationTime",
      "bidExpirationTime(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_bidExpirationTime(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bidExpirationTime",
      "bidExpirationTime(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidId(): BigInt {
    let result = super.call("bidId", "bidId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidId", "bidId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidPaymentCycleType(param0: BigInt): i32 {
    let result = super.call(
      "bidPaymentCycleType",
      "bidPaymentCycleType(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toI32();
  }

  try_bidPaymentCycleType(param0: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "bidPaymentCycleType",
      "bidPaymentCycleType(uint256):(uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  bids(param0: BigInt): TellerV2__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256):(address,address,address,uint256,bytes32,(address,uint256,(uint256,uint256),uint32,uint32,uint32,uint32),(uint256,uint32,uint16),uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TellerV2__bidsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBytes(),
      changetype<TellerV2__bidsResultLoanDetailsStruct>(result[5].toTuple()),
      changetype<TellerV2__bidsResultTermsStruct>(result[6].toTuple()),
      result[7].toI32(),
      result[8].toI32()
    );
  }

  try_bids(param0: BigInt): ethereum.CallResult<TellerV2__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256):(address,address,address,uint256,bytes32,(address,uint256,(uint256,uint256),uint32,uint32,uint32,uint32),(uint256,uint32,uint16),uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TellerV2__bidsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBytes(),
        changetype<TellerV2__bidsResultLoanDetailsStruct>(value[5].toTuple()),
        changetype<TellerV2__bidsResultTermsStruct>(value[6].toTuple()),
        value[7].toI32(),
        value[8].toI32()
      )
    );
  }

  borrowerBids(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "borrowerBids",
      "borrowerBids(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowerBids(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowerBids",
      "borrowerBids(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateAmountDue(
    _bidId: BigInt,
    _timestamp: BigInt
  ): TellerV2__calculateAmountDueResultDueStruct {
    let result = super.call(
      "calculateAmountDue",
      "calculateAmountDue(uint256,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return changetype<TellerV2__calculateAmountDueResultDueStruct>(
      result[0].toTuple()
    );
  }

  try_calculateAmountDue(
    _bidId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<TellerV2__calculateAmountDueResultDueStruct> {
    let result = super.tryCall(
      "calculateAmountDue",
      "calculateAmountDue(uint256,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TellerV2__calculateAmountDueResultDueStruct>(
        value[0].toTuple()
      )
    );
  }

  calculateAmountOwed(
    _bidId: BigInt,
    _timestamp: BigInt
  ): TellerV2__calculateAmountOwedResultOwedStruct {
    let result = super.call(
      "calculateAmountOwed",
      "calculateAmountOwed(uint256,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return changetype<TellerV2__calculateAmountOwedResultOwedStruct>(
      result[0].toTuple()
    );
  }

  try_calculateAmountOwed(
    _bidId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<TellerV2__calculateAmountOwedResultOwedStruct> {
    let result = super.tryCall(
      "calculateAmountOwed",
      "calculateAmountOwed(uint256,uint256):((uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TellerV2__calculateAmountOwedResultOwedStruct>(
        value[0].toTuple()
      )
    );
  }

  calculateNextDueDate(_bidId: BigInt): BigInt {
    let result = super.call(
      "calculateNextDueDate",
      "calculateNextDueDate(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBigInt();
  }

  try_calculateNextDueDate(_bidId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateNextDueDate",
      "calculateNextDueDate(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralManager(): Address {
    let result = super.call(
      "collateralManager",
      "collateralManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralManager",
      "collateralManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  escrowVault(): Address {
    let result = super.call("escrowVault", "escrowVault():(address)", []);

    return result[0].toAddress();
  }

  try_escrowVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("escrowVault", "escrowVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBidState(_bidId: BigInt): i32 {
    let result = super.call("getBidState", "getBidState(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);

    return result[0].toI32();
  }

  try_getBidState(_bidId: BigInt): ethereum.CallResult<i32> {
    let result = super.tryCall("getBidState", "getBidState(uint256):(uint8)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBorrowerActiveLoanIds(_borrower: Address): Array<BigInt> {
    let result = super.call(
      "getBorrowerActiveLoanIds",
      "getBorrowerActiveLoanIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigIntArray();
  }

  try_getBorrowerActiveLoanIds(
    _borrower: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBorrowerActiveLoanIds",
      "getBorrowerActiveLoanIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBorrowerLoanIds(_borrower: Address): Array<BigInt> {
    let result = super.call(
      "getBorrowerLoanIds",
      "getBorrowerLoanIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );

    return result[0].toBigIntArray();
  }

  try_getBorrowerLoanIds(
    _borrower: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getBorrowerLoanIds",
      "getBorrowerLoanIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_borrower)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLoanBorrower(_bidId: BigInt): Address {
    let result = super.call(
      "getLoanBorrower",
      "getLoanBorrower(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toAddress();
  }

  try_getLoanBorrower(_bidId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLoanBorrower",
      "getLoanBorrower(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLoanLender(_bidId: BigInt): Address {
    let result = super.call(
      "getLoanLender",
      "getLoanLender(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toAddress();
  }

  try_getLoanLender(_bidId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLoanLender",
      "getLoanLender(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLoanLendingToken(_bidId: BigInt): Address {
    let result = super.call(
      "getLoanLendingToken",
      "getLoanLendingToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toAddress();
  }

  try_getLoanLendingToken(_bidId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLoanLendingToken",
      "getLoanLendingToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLoanMarketId(_bidId: BigInt): BigInt {
    let result = super.call(
      "getLoanMarketId",
      "getLoanMarketId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBigInt();
  }

  try_getLoanMarketId(_bidId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLoanMarketId",
      "getLoanMarketId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoanSummary(_bidId: BigInt): TellerV2__getLoanSummaryResult {
    let result = super.call(
      "getLoanSummary",
      "getLoanSummary(uint256):(address,address,uint256,address,uint256,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return new TellerV2__getLoanSummaryResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toI32()
    );
  }

  try_getLoanSummary(
    _bidId: BigInt
  ): ethereum.CallResult<TellerV2__getLoanSummaryResult> {
    let result = super.tryCall(
      "getLoanSummary",
      "getLoanSummary(uint256):(address,address,uint256,address,uint256,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TellerV2__getLoanSummaryResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toI32()
      )
    );
  }

  getMetadataURI(_bidId: BigInt): string {
    let result = super.call(
      "getMetadataURI",
      "getMetadataURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toString();
  }

  try_getMetadataURI(_bidId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getMetadataURI",
      "getMetadataURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  hasApprovedMarketForwarder(
    _marketId: BigInt,
    _forwarder: Address,
    _account: Address
  ): boolean {
    let result = super.call(
      "hasApprovedMarketForwarder",
      "hasApprovedMarketForwarder(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromAddress(_forwarder),
        ethereum.Value.fromAddress(_account)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasApprovedMarketForwarder(
    _marketId: BigInt,
    _forwarder: Address,
    _account: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasApprovedMarketForwarder",
      "hasApprovedMarketForwarder(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromAddress(_forwarder),
        ethereum.Value.fromAddress(_account)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLoanDefaulted(_bidId: BigInt): boolean {
    let result = super.call(
      "isLoanDefaulted",
      "isLoanDefaulted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBoolean();
  }

  try_isLoanDefaulted(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLoanDefaulted",
      "isLoanDefaulted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLoanExpired(_bidId: BigInt): boolean {
    let result = super.call("isLoanExpired", "isLoanExpired(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);

    return result[0].toBoolean();
  }

  try_isLoanExpired(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLoanExpired",
      "isLoanExpired(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLoanLiquidateable(_bidId: BigInt): boolean {
    let result = super.call(
      "isLoanLiquidateable",
      "isLoanLiquidateable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBoolean();
  }

  try_isLoanLiquidateable(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLoanLiquidateable",
      "isLoanLiquidateable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaymentLate(_bidId: BigInt): boolean {
    let result = super.call("isPaymentLate", "isPaymentLate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);

    return result[0].toBoolean();
  }

  try_isPaymentLate(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPaymentLate",
      "isPaymentLate(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedMarketForwarder(
    _marketId: BigInt,
    _trustedMarketForwarder: Address
  ): boolean {
    let result = super.call(
      "isTrustedMarketForwarder",
      "isTrustedMarketForwarder(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromAddress(_trustedMarketForwarder)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTrustedMarketForwarder(
    _marketId: BigInt,
    _trustedMarketForwarder: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedMarketForwarder",
      "isTrustedMarketForwarder(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_marketId),
        ethereum.Value.fromAddress(_trustedMarketForwarder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRepaidTimestamp(_bidId: BigInt): BigInt {
    let result = super.call(
      "lastRepaidTimestamp",
      "lastRepaidTimestamp(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBigInt();
  }

  try_lastRepaidTimestamp(_bidId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRepaidTimestamp",
      "lastRepaidTimestamp(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lenderAcceptBid(_bidId: BigInt): TellerV2__lenderAcceptBidResult {
    let result = super.call(
      "lenderAcceptBid",
      "lenderAcceptBid(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return new TellerV2__lenderAcceptBidResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_lenderAcceptBid(
    _bidId: BigInt
  ): ethereum.CallResult<TellerV2__lenderAcceptBidResult> {
    let result = super.tryCall(
      "lenderAcceptBid",
      "lenderAcceptBid(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TellerV2__lenderAcceptBidResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  lenderCommitmentForwarder(): Address {
    let result = super.call(
      "lenderCommitmentForwarder",
      "lenderCommitmentForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lenderCommitmentForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lenderCommitmentForwarder",
      "lenderCommitmentForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lenderManager(): Address {
    let result = super.call("lenderManager", "lenderManager():(address)", []);

    return result[0].toAddress();
  }

  try_lenderManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lenderManager",
      "lenderManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lenderVolumeFilled(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "lenderVolumeFilled",
      "lenderVolumeFilled(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_lenderVolumeFilled(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lenderVolumeFilled",
      "lenderVolumeFilled(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketRegistry(): Address {
    let result = super.call("marketRegistry", "marketRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_marketRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketRegistry",
      "marketRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFee(): i32 {
    let result = super.call("protocolFee", "protocolFee():(uint16)", []);

    return result[0].toI32();
  }

  try_protocolFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  reputationManager(): Address {
    let result = super.call(
      "reputationManager",
      "reputationManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_reputationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reputationManager",
      "reputationManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submitBid(
    _lendingToken: Address,
    _marketplaceId: BigInt,
    _principal: BigInt,
    _duration: BigInt,
    _APR: i32,
    _metadataURI: string,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "submitBid",
      "submitBid(address,uint256,uint256,uint32,uint16,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(_lendingToken),
        ethereum.Value.fromUnsignedBigInt(_marketplaceId),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_APR)),
        ethereum.Value.fromString(_metadataURI),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitBid(
    _lendingToken: Address,
    _marketplaceId: BigInt,
    _principal: BigInt,
    _duration: BigInt,
    _APR: i32,
    _metadataURI: string,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitBid",
      "submitBid(address,uint256,uint256,uint32,uint16,string,address):(uint256)",
      [
        ethereum.Value.fromAddress(_lendingToken),
        ethereum.Value.fromUnsignedBigInt(_marketplaceId),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_APR)),
        ethereum.Value.fromString(_metadataURI),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submitBid1(
    _lendingToken: Address,
    _marketplaceId: BigInt,
    _principal: BigInt,
    _duration: BigInt,
    _APR: i32,
    _metadataURI: string,
    _receiver: Address,
    _collateralInfo: Array<TellerV2__submitBid1Input_collateralInfoStruct>
  ): BigInt {
    let result = super.call(
      "submitBid",
      "submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(_lendingToken),
        ethereum.Value.fromUnsignedBigInt(_marketplaceId),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_APR)),
        ethereum.Value.fromString(_metadataURI),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );

    return result[0].toBigInt();
  }

  try_submitBid1(
    _lendingToken: Address,
    _marketplaceId: BigInt,
    _principal: BigInt,
    _duration: BigInt,
    _APR: i32,
    _metadataURI: string,
    _receiver: Address,
    _collateralInfo: Array<TellerV2__submitBid1Input_collateralInfoStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submitBid",
      "submitBid(address,uint256,uint256,uint32,uint16,string,address,(uint8,uint256,uint256,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(_lendingToken),
        ethereum.Value.fromUnsignedBigInt(_marketplaceId),
        ethereum.Value.fromUnsignedBigInt(_principal),
        ethereum.Value.fromUnsignedBigInt(_duration),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_APR)),
        ethereum.Value.fromString(_metadataURI),
        ethereum.Value.fromAddress(_receiver),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVolumeFilled(param0: Address): BigInt {
    let result = super.call(
      "totalVolumeFilled",
      "totalVolumeFilled(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_totalVolumeFilled(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalVolumeFilled",
      "totalVolumeFilled(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uris(param0: BigInt): string {
    let result = super.call("uris", "uris(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_uris(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uris", "uris(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  version(): BigInt {
    let result = super.call("version", "version():(uint256)", []);

    return result[0].toBigInt();
  }

  try_version(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("version", "version():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveMarketForwarderCall extends ethereum.Call {
  get inputs(): ApproveMarketForwarderCall__Inputs {
    return new ApproveMarketForwarderCall__Inputs(this);
  }

  get outputs(): ApproveMarketForwarderCall__Outputs {
    return new ApproveMarketForwarderCall__Outputs(this);
  }
}

export class ApproveMarketForwarderCall__Inputs {
  _call: ApproveMarketForwarderCall;

  constructor(call: ApproveMarketForwarderCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _forwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApproveMarketForwarderCall__Outputs {
  _call: ApproveMarketForwarderCall;

  constructor(call: ApproveMarketForwarderCall) {
    this._call = call;
  }
}

export class CancelBidCall extends ethereum.Call {
  get inputs(): CancelBidCall__Inputs {
    return new CancelBidCall__Inputs(this);
  }

  get outputs(): CancelBidCall__Outputs {
    return new CancelBidCall__Outputs(this);
  }
}

export class CancelBidCall__Inputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelBidCall__Outputs {
  _call: CancelBidCall;

  constructor(call: CancelBidCall) {
    this._call = call;
  }
}

export class ClaimLoanNFTCall extends ethereum.Call {
  get inputs(): ClaimLoanNFTCall__Inputs {
    return new ClaimLoanNFTCall__Inputs(this);
  }

  get outputs(): ClaimLoanNFTCall__Outputs {
    return new ClaimLoanNFTCall__Outputs(this);
  }
}

export class ClaimLoanNFTCall__Inputs {
  _call: ClaimLoanNFTCall;

  constructor(call: ClaimLoanNFTCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimLoanNFTCall__Outputs {
  _call: ClaimLoanNFTCall;

  constructor(call: ClaimLoanNFTCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _protocolFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _marketRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _reputationManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lenderCommitmentForwarder(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _collateralManager(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _lenderManager(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _escrowVault(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LenderAcceptBidCall extends ethereum.Call {
  get inputs(): LenderAcceptBidCall__Inputs {
    return new LenderAcceptBidCall__Inputs(this);
  }

  get outputs(): LenderAcceptBidCall__Outputs {
    return new LenderAcceptBidCall__Outputs(this);
  }
}

export class LenderAcceptBidCall__Inputs {
  _call: LenderAcceptBidCall;

  constructor(call: LenderAcceptBidCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LenderAcceptBidCall__Outputs {
  _call: LenderAcceptBidCall;

  constructor(call: LenderAcceptBidCall) {
    this._call = call;
  }

  get amountToProtocol(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountToMarketplace(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get amountToBorrower(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class LenderCloseLoanCall extends ethereum.Call {
  get inputs(): LenderCloseLoanCall__Inputs {
    return new LenderCloseLoanCall__Inputs(this);
  }

  get outputs(): LenderCloseLoanCall__Outputs {
    return new LenderCloseLoanCall__Outputs(this);
  }
}

export class LenderCloseLoanCall__Inputs {
  _call: LenderCloseLoanCall;

  constructor(call: LenderCloseLoanCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LenderCloseLoanCall__Outputs {
  _call: LenderCloseLoanCall;

  constructor(call: LenderCloseLoanCall) {
    this._call = call;
  }
}

export class LiquidateLoanFullCall extends ethereum.Call {
  get inputs(): LiquidateLoanFullCall__Inputs {
    return new LiquidateLoanFullCall__Inputs(this);
  }

  get outputs(): LiquidateLoanFullCall__Outputs {
    return new LiquidateLoanFullCall__Outputs(this);
  }
}

export class LiquidateLoanFullCall__Inputs {
  _call: LiquidateLoanFullCall;

  constructor(call: LiquidateLoanFullCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateLoanFullCall__Outputs {
  _call: LiquidateLoanFullCall;

  constructor(call: LiquidateLoanFullCall) {
    this._call = call;
  }
}

export class MarketOwnerCancelBidCall extends ethereum.Call {
  get inputs(): MarketOwnerCancelBidCall__Inputs {
    return new MarketOwnerCancelBidCall__Inputs(this);
  }

  get outputs(): MarketOwnerCancelBidCall__Outputs {
    return new MarketOwnerCancelBidCall__Outputs(this);
  }
}

export class MarketOwnerCancelBidCall__Inputs {
  _call: MarketOwnerCancelBidCall;

  constructor(call: MarketOwnerCancelBidCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MarketOwnerCancelBidCall__Outputs {
  _call: MarketOwnerCancelBidCall;

  constructor(call: MarketOwnerCancelBidCall) {
    this._call = call;
  }
}

export class PauseProtocolCall extends ethereum.Call {
  get inputs(): PauseProtocolCall__Inputs {
    return new PauseProtocolCall__Inputs(this);
  }

  get outputs(): PauseProtocolCall__Outputs {
    return new PauseProtocolCall__Outputs(this);
  }
}

export class PauseProtocolCall__Inputs {
  _call: PauseProtocolCall;

  constructor(call: PauseProtocolCall) {
    this._call = call;
  }
}

export class PauseProtocolCall__Outputs {
  _call: PauseProtocolCall;

  constructor(call: PauseProtocolCall) {
    this._call = call;
  }
}

export class RenounceMarketForwarderCall extends ethereum.Call {
  get inputs(): RenounceMarketForwarderCall__Inputs {
    return new RenounceMarketForwarderCall__Inputs(this);
  }

  get outputs(): RenounceMarketForwarderCall__Outputs {
    return new RenounceMarketForwarderCall__Outputs(this);
  }
}

export class RenounceMarketForwarderCall__Inputs {
  _call: RenounceMarketForwarderCall;

  constructor(call: RenounceMarketForwarderCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _forwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceMarketForwarderCall__Outputs {
  _call: RenounceMarketForwarderCall;

  constructor(call: RenounceMarketForwarderCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RepayLoanCall extends ethereum.Call {
  get inputs(): RepayLoanCall__Inputs {
    return new RepayLoanCall__Inputs(this);
  }

  get outputs(): RepayLoanCall__Outputs {
    return new RepayLoanCall__Outputs(this);
  }
}

export class RepayLoanCall__Inputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayLoanCall__Outputs {
  _call: RepayLoanCall;

  constructor(call: RepayLoanCall) {
    this._call = call;
  }
}

export class RepayLoanFullCall extends ethereum.Call {
  get inputs(): RepayLoanFullCall__Inputs {
    return new RepayLoanFullCall__Inputs(this);
  }

  get outputs(): RepayLoanFullCall__Outputs {
    return new RepayLoanFullCall__Outputs(this);
  }
}

export class RepayLoanFullCall__Inputs {
  _call: RepayLoanFullCall;

  constructor(call: RepayLoanFullCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayLoanFullCall__Outputs {
  _call: RepayLoanFullCall;

  constructor(call: RepayLoanFullCall) {
    this._call = call;
  }
}

export class RepayLoanFullWithoutCollateralWithdrawCall extends ethereum.Call {
  get inputs(): RepayLoanFullWithoutCollateralWithdrawCall__Inputs {
    return new RepayLoanFullWithoutCollateralWithdrawCall__Inputs(this);
  }

  get outputs(): RepayLoanFullWithoutCollateralWithdrawCall__Outputs {
    return new RepayLoanFullWithoutCollateralWithdrawCall__Outputs(this);
  }
}

export class RepayLoanFullWithoutCollateralWithdrawCall__Inputs {
  _call: RepayLoanFullWithoutCollateralWithdrawCall;

  constructor(call: RepayLoanFullWithoutCollateralWithdrawCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayLoanFullWithoutCollateralWithdrawCall__Outputs {
  _call: RepayLoanFullWithoutCollateralWithdrawCall;

  constructor(call: RepayLoanFullWithoutCollateralWithdrawCall) {
    this._call = call;
  }
}

export class RepayLoanMinimumCall extends ethereum.Call {
  get inputs(): RepayLoanMinimumCall__Inputs {
    return new RepayLoanMinimumCall__Inputs(this);
  }

  get outputs(): RepayLoanMinimumCall__Outputs {
    return new RepayLoanMinimumCall__Outputs(this);
  }
}

export class RepayLoanMinimumCall__Inputs {
  _call: RepayLoanMinimumCall;

  constructor(call: RepayLoanMinimumCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RepayLoanMinimumCall__Outputs {
  _call: RepayLoanMinimumCall;

  constructor(call: RepayLoanMinimumCall) {
    this._call = call;
  }
}

export class RepayLoanWithoutCollateralWithdrawCall extends ethereum.Call {
  get inputs(): RepayLoanWithoutCollateralWithdrawCall__Inputs {
    return new RepayLoanWithoutCollateralWithdrawCall__Inputs(this);
  }

  get outputs(): RepayLoanWithoutCollateralWithdrawCall__Outputs {
    return new RepayLoanWithoutCollateralWithdrawCall__Outputs(this);
  }
}

export class RepayLoanWithoutCollateralWithdrawCall__Inputs {
  _call: RepayLoanWithoutCollateralWithdrawCall;

  constructor(call: RepayLoanWithoutCollateralWithdrawCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayLoanWithoutCollateralWithdrawCall__Outputs {
  _call: RepayLoanWithoutCollateralWithdrawCall;

  constructor(call: RepayLoanWithoutCollateralWithdrawCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class SetTrustedMarketForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedMarketForwarderCall__Inputs {
    return new SetTrustedMarketForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedMarketForwarderCall__Outputs {
    return new SetTrustedMarketForwarderCall__Outputs(this);
  }
}

export class SetTrustedMarketForwarderCall__Inputs {
  _call: SetTrustedMarketForwarderCall;

  constructor(call: SetTrustedMarketForwarderCall) {
    this._call = call;
  }

  get _marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _forwarder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetTrustedMarketForwarderCall__Outputs {
  _call: SetTrustedMarketForwarderCall;

  constructor(call: SetTrustedMarketForwarderCall) {
    this._call = call;
  }
}

export class SubmitBidCall extends ethereum.Call {
  get inputs(): SubmitBidCall__Inputs {
    return new SubmitBidCall__Inputs(this);
  }

  get outputs(): SubmitBidCall__Outputs {
    return new SubmitBidCall__Outputs(this);
  }
}

export class SubmitBidCall__Inputs {
  _call: SubmitBidCall;

  constructor(call: SubmitBidCall) {
    this._call = call;
  }

  get _lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _marketplaceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _principal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _APR(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _metadataURI(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _receiver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class SubmitBidCall__Outputs {
  _call: SubmitBidCall;

  constructor(call: SubmitBidCall) {
    this._call = call;
  }

  get bidId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitBid1Call extends ethereum.Call {
  get inputs(): SubmitBid1Call__Inputs {
    return new SubmitBid1Call__Inputs(this);
  }

  get outputs(): SubmitBid1Call__Outputs {
    return new SubmitBid1Call__Outputs(this);
  }
}

export class SubmitBid1Call__Inputs {
  _call: SubmitBid1Call;

  constructor(call: SubmitBid1Call) {
    this._call = call;
  }

  get _lendingToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _marketplaceId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _principal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _APR(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _metadataURI(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _receiver(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _collateralInfo(): Array<SubmitBid1Call_collateralInfoStruct> {
    return this._call.inputValues[7].value.toTupleArray<
      SubmitBid1Call_collateralInfoStruct
    >();
  }
}

export class SubmitBid1Call__Outputs {
  _call: SubmitBid1Call;

  constructor(call: SubmitBid1Call) {
    this._call = call;
  }

  get bidId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitBid1Call_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseProtocolCall extends ethereum.Call {
  get inputs(): UnpauseProtocolCall__Inputs {
    return new UnpauseProtocolCall__Inputs(this);
  }

  get outputs(): UnpauseProtocolCall__Outputs {
    return new UnpauseProtocolCall__Outputs(this);
  }
}

export class UnpauseProtocolCall__Inputs {
  _call: UnpauseProtocolCall;

  constructor(call: UnpauseProtocolCall) {
    this._call = call;
  }
}

export class UnpauseProtocolCall__Outputs {
  _call: UnpauseProtocolCall;

  constructor(call: UnpauseProtocolCall) {
    this._call = call;
  }
}
