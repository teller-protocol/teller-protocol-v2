// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { factory_AdminChanged } from "./factory_AdminChanged";
import { factory_BeaconUpgraded } from "./factory_BeaconUpgraded";
import { factory_DeployedLenderGroupContract } from "./factory_DeployedLenderGroupContract";
import { factory_Upgraded } from "./factory_Upgraded";
import { lendergroup_BorrowerAcceptedFunds } from "./lendergroup_BorrowerAcceptedFunds";
import { lendergroup_DefaultedLoanLiquidated } from "./lendergroup_DefaultedLoanLiquidated";
import { lendergroup_EarningsWithdrawn } from "./lendergroup_EarningsWithdrawn";
import { lendergroup_Initialized } from "./lendergroup_Initialized";
import { lendergroup_LenderAddedPrincipal } from "./lendergroup_LenderAddedPrincipal";
import { lendergroup_LoanRepaid } from "./lendergroup_LoanRepaid";
import { lendergroup_OwnershipTransferred } from "./lendergroup_OwnershipTransferred";
import { lendergroup_Paused } from "./lendergroup_Paused";
import { lendergroup_PoolInitialized } from "./lendergroup_PoolInitialized";
import { lendergroup_Unpaused } from "./lendergroup_Unpaused";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const factoryAdminChangeds = message.factoryAdminChangeds;
    for (let i: i32 = 0; i < factoryAdminChangeds.length; ++i) {
      writer.uint32(10);
      writer.fork();
      factory_AdminChanged.encode(factoryAdminChangeds[i], writer);
      writer.ldelim();
    }

    const factoryBeaconUpgradeds = message.factoryBeaconUpgradeds;
    for (let i: i32 = 0; i < factoryBeaconUpgradeds.length; ++i) {
      writer.uint32(18);
      writer.fork();
      factory_BeaconUpgraded.encode(factoryBeaconUpgradeds[i], writer);
      writer.ldelim();
    }

    const factoryDeployedLenderGroupContracts =
      message.factoryDeployedLenderGroupContracts;
    for (let i: i32 = 0; i < factoryDeployedLenderGroupContracts.length; ++i) {
      writer.uint32(26);
      writer.fork();
      factory_DeployedLenderGroupContract.encode(
        factoryDeployedLenderGroupContracts[i],
        writer
      );
      writer.ldelim();
    }

    const factoryUpgradeds = message.factoryUpgradeds;
    for (let i: i32 = 0; i < factoryUpgradeds.length; ++i) {
      writer.uint32(34);
      writer.fork();
      factory_Upgraded.encode(factoryUpgradeds[i], writer);
      writer.ldelim();
    }

    const lendergroupBorrowerAcceptedFunds =
      message.lendergroupBorrowerAcceptedFunds;
    for (let i: i32 = 0; i < lendergroupBorrowerAcceptedFunds.length; ++i) {
      writer.uint32(42);
      writer.fork();
      lendergroup_BorrowerAcceptedFunds.encode(
        lendergroupBorrowerAcceptedFunds[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupDefaultedLoanLiquidateds =
      message.lendergroupDefaultedLoanLiquidateds;
    for (let i: i32 = 0; i < lendergroupDefaultedLoanLiquidateds.length; ++i) {
      writer.uint32(50);
      writer.fork();
      lendergroup_DefaultedLoanLiquidated.encode(
        lendergroupDefaultedLoanLiquidateds[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupEarningsWithdrawns = message.lendergroupEarningsWithdrawns;
    for (let i: i32 = 0; i < lendergroupEarningsWithdrawns.length; ++i) {
      writer.uint32(58);
      writer.fork();
      lendergroup_EarningsWithdrawn.encode(
        lendergroupEarningsWithdrawns[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupInitializeds = message.lendergroupInitializeds;
    for (let i: i32 = 0; i < lendergroupInitializeds.length; ++i) {
      writer.uint32(66);
      writer.fork();
      lendergroup_Initialized.encode(lendergroupInitializeds[i], writer);
      writer.ldelim();
    }

    const lendergroupLenderAddedPrincipals =
      message.lendergroupLenderAddedPrincipals;
    for (let i: i32 = 0; i < lendergroupLenderAddedPrincipals.length; ++i) {
      writer.uint32(74);
      writer.fork();
      lendergroup_LenderAddedPrincipal.encode(
        lendergroupLenderAddedPrincipals[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupLoanRepaids = message.lendergroupLoanRepaids;
    for (let i: i32 = 0; i < lendergroupLoanRepaids.length; ++i) {
      writer.uint32(82);
      writer.fork();
      lendergroup_LoanRepaid.encode(lendergroupLoanRepaids[i], writer);
      writer.ldelim();
    }

    const lendergroupOwnershipTransferreds =
      message.lendergroupOwnershipTransferreds;
    for (let i: i32 = 0; i < lendergroupOwnershipTransferreds.length; ++i) {
      writer.uint32(90);
      writer.fork();
      lendergroup_OwnershipTransferred.encode(
        lendergroupOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupPauseds = message.lendergroupPauseds;
    for (let i: i32 = 0; i < lendergroupPauseds.length; ++i) {
      writer.uint32(98);
      writer.fork();
      lendergroup_Paused.encode(lendergroupPauseds[i], writer);
      writer.ldelim();
    }

    const lendergroupPoolInitializeds = message.lendergroupPoolInitializeds;
    for (let i: i32 = 0; i < lendergroupPoolInitializeds.length; ++i) {
      writer.uint32(106);
      writer.fork();
      lendergroup_PoolInitialized.encode(
        lendergroupPoolInitializeds[i],
        writer
      );
      writer.ldelim();
    }

    const lendergroupUnpauseds = message.lendergroupUnpauseds;
    for (let i: i32 = 0; i < lendergroupUnpauseds.length; ++i) {
      writer.uint32(114);
      writer.fork();
      lendergroup_Unpaused.encode(lendergroupUnpauseds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.factoryAdminChangeds.push(
            factory_AdminChanged.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.factoryBeaconUpgradeds.push(
            factory_BeaconUpgraded.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.factoryDeployedLenderGroupContracts.push(
            factory_DeployedLenderGroupContract.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.factoryUpgradeds.push(
            factory_Upgraded.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.lendergroupBorrowerAcceptedFunds.push(
            lendergroup_BorrowerAcceptedFunds.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.lendergroupDefaultedLoanLiquidateds.push(
            lendergroup_DefaultedLoanLiquidated.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.lendergroupEarningsWithdrawns.push(
            lendergroup_EarningsWithdrawn.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.lendergroupInitializeds.push(
            lendergroup_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.lendergroupLenderAddedPrincipals.push(
            lendergroup_LenderAddedPrincipal.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.lendergroupLoanRepaids.push(
            lendergroup_LoanRepaid.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.lendergroupOwnershipTransferreds.push(
            lendergroup_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.lendergroupPauseds.push(
            lendergroup_Paused.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.lendergroupPoolInitializeds.push(
            lendergroup_PoolInitialized.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.lendergroupUnpauseds.push(
            lendergroup_Unpaused.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  factoryAdminChangeds: Array<factory_AdminChanged>;
  factoryBeaconUpgradeds: Array<factory_BeaconUpgraded>;
  factoryDeployedLenderGroupContracts: Array<factory_DeployedLenderGroupContract>;
  factoryUpgradeds: Array<factory_Upgraded>;
  lendergroupBorrowerAcceptedFunds: Array<lendergroup_BorrowerAcceptedFunds>;
  lendergroupDefaultedLoanLiquidateds: Array<lendergroup_DefaultedLoanLiquidated>;
  lendergroupEarningsWithdrawns: Array<lendergroup_EarningsWithdrawn>;
  lendergroupInitializeds: Array<lendergroup_Initialized>;
  lendergroupLenderAddedPrincipals: Array<lendergroup_LenderAddedPrincipal>;
  lendergroupLoanRepaids: Array<lendergroup_LoanRepaid>;
  lendergroupOwnershipTransferreds: Array<lendergroup_OwnershipTransferred>;
  lendergroupPauseds: Array<lendergroup_Paused>;
  lendergroupPoolInitializeds: Array<lendergroup_PoolInitialized>;
  lendergroupUnpauseds: Array<lendergroup_Unpaused>;

  constructor(
    factoryAdminChangeds: Array<factory_AdminChanged> = [],
    factoryBeaconUpgradeds: Array<factory_BeaconUpgraded> = [],
    factoryDeployedLenderGroupContracts: Array<factory_DeployedLenderGroupContract> = [],
    factoryUpgradeds: Array<factory_Upgraded> = [],
    lendergroupBorrowerAcceptedFunds: Array<lendergroup_BorrowerAcceptedFunds> = [],
    lendergroupDefaultedLoanLiquidateds: Array<lendergroup_DefaultedLoanLiquidated> = [],
    lendergroupEarningsWithdrawns: Array<lendergroup_EarningsWithdrawn> = [],
    lendergroupInitializeds: Array<lendergroup_Initialized> = [],
    lendergroupLenderAddedPrincipals: Array<lendergroup_LenderAddedPrincipal> = [],
    lendergroupLoanRepaids: Array<lendergroup_LoanRepaid> = [],
    lendergroupOwnershipTransferreds: Array<lendergroup_OwnershipTransferred> = [],
    lendergroupPauseds: Array<lendergroup_Paused> = [],
    lendergroupPoolInitializeds: Array<lendergroup_PoolInitialized> = [],
    lendergroupUnpauseds: Array<lendergroup_Unpaused> = []
  ) {
    this.factoryAdminChangeds = factoryAdminChangeds;
    this.factoryBeaconUpgradeds = factoryBeaconUpgradeds;
    this.factoryDeployedLenderGroupContracts =
      factoryDeployedLenderGroupContracts;
    this.factoryUpgradeds = factoryUpgradeds;
    this.lendergroupBorrowerAcceptedFunds = lendergroupBorrowerAcceptedFunds;
    this.lendergroupDefaultedLoanLiquidateds =
      lendergroupDefaultedLoanLiquidateds;
    this.lendergroupEarningsWithdrawns = lendergroupEarningsWithdrawns;
    this.lendergroupInitializeds = lendergroupInitializeds;
    this.lendergroupLenderAddedPrincipals = lendergroupLenderAddedPrincipals;
    this.lendergroupLoanRepaids = lendergroupLoanRepaids;
    this.lendergroupOwnershipTransferreds = lendergroupOwnershipTransferreds;
    this.lendergroupPauseds = lendergroupPauseds;
    this.lendergroupPoolInitializeds = lendergroupPoolInitializeds;
    this.lendergroupUnpauseds = lendergroupUnpauseds;
  }
}
