# This file was generated. Do not edit manually.

schema {
  query: Query
  subscription: Subscription
}

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

interface IDurationAverage {
  _durationTotal: BigInt!
  durationAverage: BigInt!
}

interface IHasLoans {
  _durationTotal: BigInt!
  durationAverage: BigInt!
  loans: LoanStatusCount!
  tokenVolumes(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
}

interface ILoanStatusCount {
  accepted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  acceptedCount: BigInt!
  all(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  cancelled(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  cancelledCount: BigInt!
  defaulted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  defaultedCount: BigInt!
  dueSoon(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  dueSoonCount: BigInt!
  expired(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  expiredCount: BigInt!
  late(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  lateCount: BigInt!
  liquidated(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  liquidatedCount: BigInt!
  repaid(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  repaidCount: BigInt!
  submitted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  submittedCount: BigInt!
  totalCount: BigInt!
}

type Bid {
  _lastTotalRepaidAmount: BigInt!
  _lastTotalRepaidInterestAmount: BigInt!
  acceptedTimestamp: BigInt!
  apr: BigInt!
  bidId: BigInt!
  bidRewards(first: Int = 100, orderBy: BidReward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: BidReward_filter): [BidReward!]!
  borrower: Borrower!
  borrowerAddress: Bytes!
  collateral(first: Int = 100, orderBy: BidCollateral_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: BidCollateral_filter): [BidCollateral!]
  collateralEscrow: Bytes
  commitment: Commitment
  commitmentId: String
  createdAt: BigInt!
  endDate: BigInt
  expiresAt: BigInt!
  fundedTx: FundedTx
  id: ID!
  lastRepaidTimestamp: BigInt!
  lender: Lender
  lenderAddress: Bytes
  lendingToken: Token!
  lendingTokenAddress: Bytes!
  liquidatorAddress: Bytes
  loanDuration: BigInt!
  marketplace: MarketPlace!
  marketplaceId: BigInt!
  metadataURI: String!
  nextDueDate: BigInt
  paymentCycle: BigInt!
  paymentCycleAmount: BigInt!
  paymentDefaultDuration: BigInt!
  payments(first: Int = 100, orderBy: Payment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Payment_filter): [Payment!]!
  principal: BigInt!
  receiverAddress: Bytes!
  status: String!
  totalRepaidInterest: BigInt!
  totalRepaidPrincipal: BigInt!
  transactionHash: String!
  updatedAt: BigInt
}

type BidCollateral {
  amount: BigInt!
  bid: Bid!
  collateralAddress: Bytes!
  id: ID!
  receiver: Bytes
  status: String
  token: Token!
  tokenId: BigInt
  type: String
}

type BidReward {
  bid: Bid!
  claimed: Boolean!
  createdAt: BigInt!
  id: ID!
  reward: RewardAllocation!
  updatedAt: BigInt!
  user: User!
}

type Borrower implements IHasLoans {
  _durationTotal: BigInt!
  attestedTimestamp: BigInt
  borrowerAddress: Bytes!
  durationAverage: BigInt!
  firstInteractionDate: BigInt!
  id: ID!
  isAttested: Boolean!
  loans: LoanStatusCount!
  marketplace: MarketPlace!
  marketplaceId: BigInt!
  tokenVolumes(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
  user: User!
}

type Commitment {
  acceptedPrincipal: BigInt!
  collateralToken: Token
  collateralTokenAddress: Bytes
  collateralTokenType: BigInt!
  commitmentBorrowers: [Bytes!]!
  commitmentRewards(first: Int = 100, orderBy: CommitmentReward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: CommitmentReward_filter): [CommitmentReward!]!
  committedAmount: BigInt!
  createdAt: BigInt!
  expirationTimestamp: BigInt!
  id: ID!
  lender: Lender!
  lenderAddress: Bytes!
  marketplace: MarketPlace!
  marketplaceId: BigInt!
  maxDuration: BigInt!
  maxPrincipal: BigInt!
  maxPrincipalPerCollateralAmount: BigInt
  minAPY: BigInt!
  principalToken: Token!
  principalTokenAddress: Bytes!
  status: String!
  tokenVolume: TokenVolume!
  updatedAt: BigInt!
}

type CommitmentReward {
  apy: BigInt!
  commitment: Commitment!
  createdAt: BigInt!
  id: ID!
  reward: RewardAllocation!
  roi: BigInt!
  updatedAt: BigInt!
}

type CommitmentZScore {
  commitment: Commitment!
  id: ID!
  zScore: BigDecimal!
}

type FundedTx {
  bid: Bid!
  id: ID!
  timestamp: BigInt!
}

type Lender implements IHasLoans {
  _durationTotal: BigInt!
  attestedTimestamp: BigInt
  commitments(first: Int = 100, orderBy: Commitment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Commitment_filter): [Commitment!]!
  durationAverage: BigInt!
  firstInteractionDate: BigInt!
  id: ID!
  isAttested: Boolean!
  lenderAddress: Bytes!
  loans: LoanStatusCount!
  marketplace: MarketPlace!
  marketplaceId: BigInt!
  tokenVolumes(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
  user: User!
}

type LoanStatusCount implements ILoanStatusCount {
  _borrower: Borrower
  _lender: Lender
  _market: MarketPlace
  _protocol: Protocol
  _tokenVolume: TokenVolume
  accepted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  acceptedCount: BigInt!
  all(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  cancelled(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  cancelledCount: BigInt!
  defaulted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  defaultedCount: BigInt!
  dueSoon(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  dueSoonCount: BigInt!
  expired(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  expiredCount: BigInt!
  id: ID!
  late(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  lateCount: BigInt!
  liquidated(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  liquidatedCount: BigInt!
  repaid(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  repaidCount: BigInt!
  submitted(first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Bid_filter): [Bid!]!
  submittedCount: BigInt!
  totalCount: BigInt!
}

type MarketCommitmentStdDev {
  collateralToken: Token
  commitmentZScores(first: Int = 100, orderBy: CommitmentZScore_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: CommitmentZScore_filter): [CommitmentZScore!]!
  id: ID!
  lendingToken: Token!
  market: MarketPlace!
  maxDurationMean: BigDecimal!
  maxDurationStdDev: BigDecimal!
  maxPrincipalPerCollateralMean: BigDecimal!
  maxPrincipalPerCollateralStdDev: BigDecimal!
  minApyMean: BigDecimal!
  minApyStdDev: BigDecimal!
}

type MarketPlace implements IHasLoans {
  _durationTotal: BigInt!
  bidExpirationTime: BigInt!
  borrowerAttestationRequired: Boolean!
  borrowers(first: Int = 100, orderBy: Borrower_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrower_filter): [Borrower!]!
  commitments(first: Int = 100, orderBy: Commitment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Commitment_filter): [Commitment!]!
  durationAverage: BigInt!
  feeRecipient: Bytes
  id: ID!
  isMarketOpen: Boolean!
  lenderAttestationRequired: Boolean!
  lenders(first: Int = 100, orderBy: Lender_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Lender_filter): [Lender!]!
  loans: LoanStatusCount!
  marketplaceFeePercent: BigInt!
  marketplaceId: BigInt!
  metadataURI: String
  owner: Bytes
  paymentCycleDuration: BigInt!
  paymentCycleType: String!
  paymentDefaultDuration: BigInt!
  paymentType: String!
  tokenVolumes(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
  totalNumberOfLenders: BigInt!
}

type Payment {
  bid: Bid!
  id: ID!
  interest: BigInt!
  outstandingCapital: BigInt!
  paymentDate: BigInt!
  principal: BigInt!
  status: String!
}

type Protocol implements IHasLoans {
  _durationTotal: BigInt!
  activeCommitments(first: Int = 100, orderBy: Commitment_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Commitment_filter): [Commitment!]!
  activeRewards(first: Int = 100, orderBy: RewardAllocation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RewardAllocation_filter): [RewardAllocation!]!
  durationAverage: BigInt!
  id: ID!
  loans: LoanStatusCount!
  tokenVolumes(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
}

type ProtocolCollateral {
  collateralToken: Token
  id: ID!
  tokenVolumesByLendingToken(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
}

type Query {
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
  bid(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bidCollateral(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCollateral
  bidCollaterals(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: BidCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: BidCollateral_filter
  ): [BidCollateral!]!
  bidReward(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidReward
  bidRewards(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: BidReward_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: BidReward_filter
  ): [BidReward!]!
  bids(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Bid_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Bid_filter
  ): [Bid!]!
  borrower(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrower
  borrowers(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Borrower_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Borrower_filter
  ): [Borrower!]!
  commitment(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Commitment
  commitmentReward(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CommitmentReward
  commitmentRewards(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: CommitmentReward_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: CommitmentReward_filter
  ): [CommitmentReward!]!
  commitmentZScore(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CommitmentZScore
  commitmentZScores(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: CommitmentZScore_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: CommitmentZScore_filter
  ): [CommitmentZScore!]!
  commitments(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Commitment_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Commitment_filter
  ): [Commitment!]!
  fundedTx(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundedTx
  fundedTxes(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: FundedTx_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: FundedTx_filter
  ): [FundedTx!]!
  idurationAverage(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IDurationAverage
  idurationAverages(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IDurationAverage_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IDurationAverage_filter
  ): [IDurationAverage!]!
  ihasLoans(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IHasLoans_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IHasLoans_filter
  ): [IHasLoans!]!
  iloanStatusCount(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ILoanStatusCount
  iloanStatusCounts(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ILoanStatusCount_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ILoanStatusCount_filter
  ): [ILoanStatusCount!]!
  lender(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lender
  lenders(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Lender_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Lender_filter
  ): [Lender!]!
  loanStatusCount(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStatusCount
  loanStatusCounts(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: LoanStatusCount_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: LoanStatusCount_filter
  ): [LoanStatusCount!]!
  marketCommitmentStdDev(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCommitmentStdDev
  marketCommitmentStdDevs(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MarketCommitmentStdDev_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MarketCommitmentStdDev_filter
  ): [MarketCommitmentStdDev!]!
  marketPlace(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketPlace
  marketPlaces(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MarketPlace_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MarketPlace_filter
  ): [MarketPlace!]!
  payment(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Payment_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Payment_filter
  ): [Payment!]!
  protocol(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocolCollateral(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolCollateral
  protocolCollaterals(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ProtocolCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ProtocolCollateral_filter
  ): [ProtocolCollateral!]!
  protocols(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Protocol_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Protocol_filter
  ): [Protocol!]!
  rewardAllocation(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardAllocation
  rewardAllocations(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RewardAllocation_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RewardAllocation_filter
  ): [RewardAllocation!]!
  token(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokenVolume(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenVolume
  tokenVolumes(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: TokenVolume_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: TokenVolume_filter
  ): [TokenVolume!]!
  tokens(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Token_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Token_filter
  ): [Token!]!
  user(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: User_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: User_filter
  ): [User!]!
}

type RewardAllocation {
  allocationStrategy: String!
  allocator: User!
  allocatorAddress: Bytes!
  bidRewards(first: Int = 100, orderBy: BidReward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: BidReward_filter): [BidReward!]!
  bidStartTimeMax: BigInt!
  bidStartTimeMin: BigInt!
  commitmentRewards(first: Int = 100, orderBy: CommitmentReward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: CommitmentReward_filter): [CommitmentReward!]!
  createdAt: BigInt!
  id: ID!
  marketplace: MarketPlace!
  marketplaceId: BigInt!
  minimumCollateralPerPrincipalAmount: BigInt!
  requiredCollateralTokenAddress: Bytes!
  requiredPrincipalTokenAddress: Bytes!
  rewardPerLoanPrincipalAmount: BigInt!
  rewardToken: Token!
  rewardTokenAddress: Bytes!
  rewardTokenAmountInitial: BigInt!
  rewardTokenAmountRemaining: BigInt!
  status: String!
  tokenVolume: TokenVolume
  updatedAt: BigInt!
}

type Subscription {
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
  bid(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bidCollateral(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidCollateral
  bidCollaterals(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: BidCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: BidCollateral_filter
  ): [BidCollateral!]!
  bidReward(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BidReward
  bidRewards(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: BidReward_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: BidReward_filter
  ): [BidReward!]!
  bids(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Bid_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Bid_filter
  ): [Bid!]!
  borrower(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrower
  borrowers(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Borrower_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Borrower_filter
  ): [Borrower!]!
  commitment(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Commitment
  commitmentReward(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CommitmentReward
  commitmentRewards(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: CommitmentReward_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: CommitmentReward_filter
  ): [CommitmentReward!]!
  commitmentZScore(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CommitmentZScore
  commitmentZScores(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: CommitmentZScore_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: CommitmentZScore_filter
  ): [CommitmentZScore!]!
  commitments(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Commitment_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Commitment_filter
  ): [Commitment!]!
  fundedTx(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundedTx
  fundedTxes(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: FundedTx_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: FundedTx_filter
  ): [FundedTx!]!
  idurationAverage(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IDurationAverage
  idurationAverages(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IDurationAverage_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IDurationAverage_filter
  ): [IDurationAverage!]!
  ihasLoans(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: IHasLoans_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: IHasLoans_filter
  ): [IHasLoans!]!
  iloanStatusCount(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ILoanStatusCount
  iloanStatusCounts(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ILoanStatusCount_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ILoanStatusCount_filter
  ): [ILoanStatusCount!]!
  lender(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lender
  lenders(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Lender_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Lender_filter
  ): [Lender!]!
  loanStatusCount(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanStatusCount
  loanStatusCounts(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: LoanStatusCount_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: LoanStatusCount_filter
  ): [LoanStatusCount!]!
  marketCommitmentStdDev(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketCommitmentStdDev
  marketCommitmentStdDevs(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MarketCommitmentStdDev_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MarketCommitmentStdDev_filter
  ): [MarketCommitmentStdDev!]!
  marketPlace(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MarketPlace
  marketPlaces(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: MarketPlace_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: MarketPlace_filter
  ): [MarketPlace!]!
  payment(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Payment_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Payment_filter
  ): [Payment!]!
  protocol(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocolCollateral(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProtocolCollateral
  protocolCollaterals(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: ProtocolCollateral_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: ProtocolCollateral_filter
  ): [ProtocolCollateral!]!
  protocols(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Protocol_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Protocol_filter
  ): [Protocol!]!
  rewardAllocation(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardAllocation
  rewardAllocations(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: RewardAllocation_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: RewardAllocation_filter
  ): [RewardAllocation!]!
  token(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokenVolume(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenVolume
  tokenVolumes(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: TokenVolume_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: TokenVolume_filter
  ): [TokenVolume!]!
  tokens(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: Token_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: Token_filter
  ): [Token!]!
  user(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    id: ID!,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    first: Int = 100,
    orderBy: User_orderBy,
    orderDirection: OrderDirection,
    skip: Int = 0,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny,
    where: User_filter
  ): [User!]!
}

type Token {
  address: Bytes!
  decimals: BigInt
  id: ID!
  name: String
  nftId: BigInt
  symbol: String
  type: String
}

type TokenVolume implements IDurationAverage {
  _aprActiveWeightedTotal: BigInt!
  _aprWeightedTotal: BigInt!
  _durationTotal: BigInt!
  _linkedParentTokenVolume: TokenVolume
  _loanAcceptedCount: BigInt!
  _protocolCollateral: ProtocolCollateral
  allocatedRewards(first: Int = 100, orderBy: RewardAllocation_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RewardAllocation_filter): [RewardAllocation!]!
  aprActiveAverage: BigInt!
  aprAverage: BigInt!
  borrower: Borrower
  collateralToken: Token
  commissionEarned: BigInt!
  durationAverage: BigInt!
  id: ID!
  lender: Lender
  lendingTokenAddress: Bytes!
  loanAverage: BigInt!
  loans: LoanStatusCount!
  market: MarketPlace
  outstandingCapital: BigInt!
  protocol: Protocol
  token: Token!
  tokenVolumeByCollateral(first: Int = 100, orderBy: TokenVolume_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TokenVolume_filter): [TokenVolume!]!
  totalAccepted: BigInt!
  totalActive: BigInt!
  totalAvailable: BigInt!
  totalDefaulted: BigInt!
  totalDueSoon: BigInt!
  totalLate: BigInt!
  totalLiquidated: BigInt!
  totalLoaned: BigInt!
  totalRepaid: BigInt!
  totalRepaidInterest: BigInt!
}

type User {
  bidRewards(first: Int = 100, orderBy: BidReward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: BidReward_filter): [BidReward!]!
  borrowers(first: Int = 100, orderBy: Borrower_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Borrower_filter): [Borrower!]!
  firstInteractionDate: BigInt!
  id: ID!
  lenders(first: Int = 100, orderBy: Lender_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Lender_filter): [Lender!]!
}

type _Block_ {
  "The hash of the block"
  hash: Bytes
  "The block number"
  number: Int!
  "Integer representation of the timestamp stored in blocks for the chain"
  timestamp: Int
}

"The type for the top-level _meta field"
type _Meta_ {
  """

  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  "The deployment ID"
  deployment: String!
  "If `true`, the subgraph encountered indexing errors at some past block"
  hasIndexingErrors: Boolean!
}

enum BidCollateral_orderBy {
  amount
  bid
  bid___lastTotalRepaidAmount
  bid___lastTotalRepaidInterestAmount
  bid__acceptedTimestamp
  bid__apr
  bid__bidId
  bid__borrowerAddress
  bid__collateralEscrow
  bid__commitmentId
  bid__createdAt
  bid__endDate
  bid__expiresAt
  bid__id
  bid__lastRepaidTimestamp
  bid__lenderAddress
  bid__lendingTokenAddress
  bid__liquidatorAddress
  bid__loanDuration
  bid__marketplaceId
  bid__metadataURI
  bid__nextDueDate
  bid__paymentCycle
  bid__paymentCycleAmount
  bid__paymentDefaultDuration
  bid__principal
  bid__receiverAddress
  bid__status
  bid__totalRepaidInterest
  bid__totalRepaidPrincipal
  bid__transactionHash
  bid__updatedAt
  collateralAddress
  id
  receiver
  status
  token
  tokenId
  token__address
  token__decimals
  token__id
  token__name
  token__nftId
  token__symbol
  token__type
  type
}

enum BidReward_orderBy {
  bid
  bid___lastTotalRepaidAmount
  bid___lastTotalRepaidInterestAmount
  bid__acceptedTimestamp
  bid__apr
  bid__bidId
  bid__borrowerAddress
  bid__collateralEscrow
  bid__commitmentId
  bid__createdAt
  bid__endDate
  bid__expiresAt
  bid__id
  bid__lastRepaidTimestamp
  bid__lenderAddress
  bid__lendingTokenAddress
  bid__liquidatorAddress
  bid__loanDuration
  bid__marketplaceId
  bid__metadataURI
  bid__nextDueDate
  bid__paymentCycle
  bid__paymentCycleAmount
  bid__paymentDefaultDuration
  bid__principal
  bid__receiverAddress
  bid__status
  bid__totalRepaidInterest
  bid__totalRepaidPrincipal
  bid__transactionHash
  bid__updatedAt
  claimed
  createdAt
  id
  reward
  reward__allocationStrategy
  reward__allocatorAddress
  reward__bidStartTimeMax
  reward__bidStartTimeMin
  reward__createdAt
  reward__id
  reward__marketplaceId
  reward__minimumCollateralPerPrincipalAmount
  reward__requiredCollateralTokenAddress
  reward__requiredPrincipalTokenAddress
  reward__rewardPerLoanPrincipalAmount
  reward__rewardTokenAddress
  reward__rewardTokenAmountInitial
  reward__rewardTokenAmountRemaining
  reward__status
  reward__updatedAt
  updatedAt
  user
  user__firstInteractionDate
  user__id
}

enum Bid_orderBy {
  _lastTotalRepaidAmount
  _lastTotalRepaidInterestAmount
  acceptedTimestamp
  apr
  bidId
  bidRewards
  borrower
  borrowerAddress
  borrower___durationTotal
  borrower__attestedTimestamp
  borrower__borrowerAddress
  borrower__durationAverage
  borrower__firstInteractionDate
  borrower__id
  borrower__isAttested
  borrower__marketplaceId
  collateral
  collateralEscrow
  commitment
  commitmentId
  commitment__acceptedPrincipal
  commitment__collateralTokenAddress
  commitment__collateralTokenType
  commitment__committedAmount
  commitment__createdAt
  commitment__expirationTimestamp
  commitment__id
  commitment__lenderAddress
  commitment__marketplaceId
  commitment__maxDuration
  commitment__maxPrincipal
  commitment__maxPrincipalPerCollateralAmount
  commitment__minAPY
  commitment__principalTokenAddress
  commitment__status
  commitment__updatedAt
  createdAt
  endDate
  expiresAt
  fundedTx
  fundedTx__id
  fundedTx__timestamp
  id
  lastRepaidTimestamp
  lender
  lenderAddress
  lender___durationTotal
  lender__attestedTimestamp
  lender__durationAverage
  lender__firstInteractionDate
  lender__id
  lender__isAttested
  lender__lenderAddress
  lender__marketplaceId
  lendingToken
  lendingTokenAddress
  lendingToken__address
  lendingToken__decimals
  lendingToken__id
  lendingToken__name
  lendingToken__nftId
  lendingToken__symbol
  lendingToken__type
  liquidatorAddress
  loanDuration
  marketplace
  marketplaceId
  marketplace___durationTotal
  marketplace__bidExpirationTime
  marketplace__borrowerAttestationRequired
  marketplace__durationAverage
  marketplace__feeRecipient
  marketplace__id
  marketplace__isMarketOpen
  marketplace__lenderAttestationRequired
  marketplace__marketplaceFeePercent
  marketplace__marketplaceId
  marketplace__metadataURI
  marketplace__owner
  marketplace__paymentCycleDuration
  marketplace__paymentCycleType
  marketplace__paymentDefaultDuration
  marketplace__paymentType
  marketplace__totalNumberOfLenders
  metadataURI
  nextDueDate
  paymentCycle
  paymentCycleAmount
  paymentDefaultDuration
  payments
  principal
  receiverAddress
  status
  totalRepaidInterest
  totalRepaidPrincipal
  transactionHash
  updatedAt
}

enum Borrower_orderBy {
  _durationTotal
  attestedTimestamp
  borrowerAddress
  durationAverage
  firstInteractionDate
  id
  isAttested
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  marketplace
  marketplaceId
  marketplace___durationTotal
  marketplace__bidExpirationTime
  marketplace__borrowerAttestationRequired
  marketplace__durationAverage
  marketplace__feeRecipient
  marketplace__id
  marketplace__isMarketOpen
  marketplace__lenderAttestationRequired
  marketplace__marketplaceFeePercent
  marketplace__marketplaceId
  marketplace__metadataURI
  marketplace__owner
  marketplace__paymentCycleDuration
  marketplace__paymentCycleType
  marketplace__paymentDefaultDuration
  marketplace__paymentType
  marketplace__totalNumberOfLenders
  tokenVolumes
  user
  user__firstInteractionDate
  user__id
}

enum CommitmentReward_orderBy {
  apy
  commitment
  commitment__acceptedPrincipal
  commitment__collateralTokenAddress
  commitment__collateralTokenType
  commitment__committedAmount
  commitment__createdAt
  commitment__expirationTimestamp
  commitment__id
  commitment__lenderAddress
  commitment__marketplaceId
  commitment__maxDuration
  commitment__maxPrincipal
  commitment__maxPrincipalPerCollateralAmount
  commitment__minAPY
  commitment__principalTokenAddress
  commitment__status
  commitment__updatedAt
  createdAt
  id
  reward
  reward__allocationStrategy
  reward__allocatorAddress
  reward__bidStartTimeMax
  reward__bidStartTimeMin
  reward__createdAt
  reward__id
  reward__marketplaceId
  reward__minimumCollateralPerPrincipalAmount
  reward__requiredCollateralTokenAddress
  reward__requiredPrincipalTokenAddress
  reward__rewardPerLoanPrincipalAmount
  reward__rewardTokenAddress
  reward__rewardTokenAmountInitial
  reward__rewardTokenAmountRemaining
  reward__status
  reward__updatedAt
  roi
  updatedAt
}

enum CommitmentZScore_orderBy {
  commitment
  commitment__acceptedPrincipal
  commitment__collateralTokenAddress
  commitment__collateralTokenType
  commitment__committedAmount
  commitment__createdAt
  commitment__expirationTimestamp
  commitment__id
  commitment__lenderAddress
  commitment__marketplaceId
  commitment__maxDuration
  commitment__maxPrincipal
  commitment__maxPrincipalPerCollateralAmount
  commitment__minAPY
  commitment__principalTokenAddress
  commitment__status
  commitment__updatedAt
  id
  zScore
}

enum Commitment_orderBy {
  acceptedPrincipal
  collateralToken
  collateralTokenAddress
  collateralTokenType
  collateralToken__address
  collateralToken__decimals
  collateralToken__id
  collateralToken__name
  collateralToken__nftId
  collateralToken__symbol
  collateralToken__type
  commitmentBorrowers
  commitmentRewards
  committedAmount
  createdAt
  expirationTimestamp
  id
  lender
  lenderAddress
  lender___durationTotal
  lender__attestedTimestamp
  lender__durationAverage
  lender__firstInteractionDate
  lender__id
  lender__isAttested
  lender__lenderAddress
  lender__marketplaceId
  marketplace
  marketplaceId
  marketplace___durationTotal
  marketplace__bidExpirationTime
  marketplace__borrowerAttestationRequired
  marketplace__durationAverage
  marketplace__feeRecipient
  marketplace__id
  marketplace__isMarketOpen
  marketplace__lenderAttestationRequired
  marketplace__marketplaceFeePercent
  marketplace__marketplaceId
  marketplace__metadataURI
  marketplace__owner
  marketplace__paymentCycleDuration
  marketplace__paymentCycleType
  marketplace__paymentDefaultDuration
  marketplace__paymentType
  marketplace__totalNumberOfLenders
  maxDuration
  maxPrincipal
  maxPrincipalPerCollateralAmount
  minAPY
  principalToken
  principalTokenAddress
  principalToken__address
  principalToken__decimals
  principalToken__id
  principalToken__name
  principalToken__nftId
  principalToken__symbol
  principalToken__type
  status
  tokenVolume
  tokenVolume___aprActiveWeightedTotal
  tokenVolume___aprWeightedTotal
  tokenVolume___durationTotal
  tokenVolume___loanAcceptedCount
  tokenVolume__aprActiveAverage
  tokenVolume__aprAverage
  tokenVolume__commissionEarned
  tokenVolume__durationAverage
  tokenVolume__id
  tokenVolume__lendingTokenAddress
  tokenVolume__loanAverage
  tokenVolume__outstandingCapital
  tokenVolume__totalAccepted
  tokenVolume__totalActive
  tokenVolume__totalAvailable
  tokenVolume__totalDefaulted
  tokenVolume__totalDueSoon
  tokenVolume__totalLate
  tokenVolume__totalLiquidated
  tokenVolume__totalLoaned
  tokenVolume__totalRepaid
  tokenVolume__totalRepaidInterest
  updatedAt
}

enum FundedTx_orderBy {
  bid
  bid___lastTotalRepaidAmount
  bid___lastTotalRepaidInterestAmount
  bid__acceptedTimestamp
  bid__apr
  bid__bidId
  bid__borrowerAddress
  bid__collateralEscrow
  bid__commitmentId
  bid__createdAt
  bid__endDate
  bid__expiresAt
  bid__id
  bid__lastRepaidTimestamp
  bid__lenderAddress
  bid__lendingTokenAddress
  bid__liquidatorAddress
  bid__loanDuration
  bid__marketplaceId
  bid__metadataURI
  bid__nextDueDate
  bid__paymentCycle
  bid__paymentCycleAmount
  bid__paymentDefaultDuration
  bid__principal
  bid__receiverAddress
  bid__status
  bid__totalRepaidInterest
  bid__totalRepaidPrincipal
  bid__transactionHash
  bid__updatedAt
  id
  timestamp
}

enum IDurationAverage_orderBy {
  _durationTotal
  durationAverage
}

enum IHasLoans_orderBy {
  _durationTotal
  durationAverage
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  tokenVolumes
}

enum ILoanStatusCount_orderBy {
  accepted
  acceptedCount
  all
  cancelled
  cancelledCount
  defaulted
  defaultedCount
  dueSoon
  dueSoonCount
  expired
  expiredCount
  late
  lateCount
  liquidated
  liquidatedCount
  repaid
  repaidCount
  submitted
  submittedCount
  totalCount
}

enum Lender_orderBy {
  _durationTotal
  attestedTimestamp
  commitments
  durationAverage
  firstInteractionDate
  id
  isAttested
  lenderAddress
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  marketplace
  marketplaceId
  marketplace___durationTotal
  marketplace__bidExpirationTime
  marketplace__borrowerAttestationRequired
  marketplace__durationAverage
  marketplace__feeRecipient
  marketplace__id
  marketplace__isMarketOpen
  marketplace__lenderAttestationRequired
  marketplace__marketplaceFeePercent
  marketplace__marketplaceId
  marketplace__metadataURI
  marketplace__owner
  marketplace__paymentCycleDuration
  marketplace__paymentCycleType
  marketplace__paymentDefaultDuration
  marketplace__paymentType
  marketplace__totalNumberOfLenders
  tokenVolumes
  user
  user__firstInteractionDate
  user__id
}

enum LoanStatusCount_orderBy {
  _borrower
  _borrower___durationTotal
  _borrower__attestedTimestamp
  _borrower__borrowerAddress
  _borrower__durationAverage
  _borrower__firstInteractionDate
  _borrower__id
  _borrower__isAttested
  _borrower__marketplaceId
  _lender
  _lender___durationTotal
  _lender__attestedTimestamp
  _lender__durationAverage
  _lender__firstInteractionDate
  _lender__id
  _lender__isAttested
  _lender__lenderAddress
  _lender__marketplaceId
  _market
  _market___durationTotal
  _market__bidExpirationTime
  _market__borrowerAttestationRequired
  _market__durationAverage
  _market__feeRecipient
  _market__id
  _market__isMarketOpen
  _market__lenderAttestationRequired
  _market__marketplaceFeePercent
  _market__marketplaceId
  _market__metadataURI
  _market__owner
  _market__paymentCycleDuration
  _market__paymentCycleType
  _market__paymentDefaultDuration
  _market__paymentType
  _market__totalNumberOfLenders
  _protocol
  _protocol___durationTotal
  _protocol__durationAverage
  _protocol__id
  _tokenVolume
  _tokenVolume___aprActiveWeightedTotal
  _tokenVolume___aprWeightedTotal
  _tokenVolume___durationTotal
  _tokenVolume___loanAcceptedCount
  _tokenVolume__aprActiveAverage
  _tokenVolume__aprAverage
  _tokenVolume__commissionEarned
  _tokenVolume__durationAverage
  _tokenVolume__id
  _tokenVolume__lendingTokenAddress
  _tokenVolume__loanAverage
  _tokenVolume__outstandingCapital
  _tokenVolume__totalAccepted
  _tokenVolume__totalActive
  _tokenVolume__totalAvailable
  _tokenVolume__totalDefaulted
  _tokenVolume__totalDueSoon
  _tokenVolume__totalLate
  _tokenVolume__totalLiquidated
  _tokenVolume__totalLoaned
  _tokenVolume__totalRepaid
  _tokenVolume__totalRepaidInterest
  accepted
  acceptedCount
  all
  cancelled
  cancelledCount
  defaulted
  defaultedCount
  dueSoon
  dueSoonCount
  expired
  expiredCount
  id
  late
  lateCount
  liquidated
  liquidatedCount
  repaid
  repaidCount
  submitted
  submittedCount
  totalCount
}

enum MarketCommitmentStdDev_orderBy {
  collateralToken
  collateralToken__address
  collateralToken__decimals
  collateralToken__id
  collateralToken__name
  collateralToken__nftId
  collateralToken__symbol
  collateralToken__type
  commitmentZScores
  id
  lendingToken
  lendingToken__address
  lendingToken__decimals
  lendingToken__id
  lendingToken__name
  lendingToken__nftId
  lendingToken__symbol
  lendingToken__type
  market
  market___durationTotal
  market__bidExpirationTime
  market__borrowerAttestationRequired
  market__durationAverage
  market__feeRecipient
  market__id
  market__isMarketOpen
  market__lenderAttestationRequired
  market__marketplaceFeePercent
  market__marketplaceId
  market__metadataURI
  market__owner
  market__paymentCycleDuration
  market__paymentCycleType
  market__paymentDefaultDuration
  market__paymentType
  market__totalNumberOfLenders
  maxDurationMean
  maxDurationStdDev
  maxPrincipalPerCollateralMean
  maxPrincipalPerCollateralStdDev
  minApyMean
  minApyStdDev
}

enum MarketPlace_orderBy {
  _durationTotal
  bidExpirationTime
  borrowerAttestationRequired
  borrowers
  commitments
  durationAverage
  feeRecipient
  id
  isMarketOpen
  lenderAttestationRequired
  lenders
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  marketplaceFeePercent
  marketplaceId
  metadataURI
  owner
  paymentCycleDuration
  paymentCycleType
  paymentDefaultDuration
  paymentType
  tokenVolumes
  totalNumberOfLenders
}

"Defines the order direction, either ascending or descending"
enum OrderDirection {
  asc
  desc
}

enum Payment_orderBy {
  bid
  bid___lastTotalRepaidAmount
  bid___lastTotalRepaidInterestAmount
  bid__acceptedTimestamp
  bid__apr
  bid__bidId
  bid__borrowerAddress
  bid__collateralEscrow
  bid__commitmentId
  bid__createdAt
  bid__endDate
  bid__expiresAt
  bid__id
  bid__lastRepaidTimestamp
  bid__lenderAddress
  bid__lendingTokenAddress
  bid__liquidatorAddress
  bid__loanDuration
  bid__marketplaceId
  bid__metadataURI
  bid__nextDueDate
  bid__paymentCycle
  bid__paymentCycleAmount
  bid__paymentDefaultDuration
  bid__principal
  bid__receiverAddress
  bid__status
  bid__totalRepaidInterest
  bid__totalRepaidPrincipal
  bid__transactionHash
  bid__updatedAt
  id
  interest
  outstandingCapital
  paymentDate
  principal
  status
}

enum ProtocolCollateral_orderBy {
  collateralToken
  collateralToken__address
  collateralToken__decimals
  collateralToken__id
  collateralToken__name
  collateralToken__nftId
  collateralToken__symbol
  collateralToken__type
  id
  tokenVolumesByLendingToken
}

enum Protocol_orderBy {
  _durationTotal
  activeCommitments
  activeRewards
  durationAverage
  id
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  tokenVolumes
}

enum RewardAllocation_orderBy {
  allocationStrategy
  allocator
  allocatorAddress
  allocator__firstInteractionDate
  allocator__id
  bidRewards
  bidStartTimeMax
  bidStartTimeMin
  commitmentRewards
  createdAt
  id
  marketplace
  marketplaceId
  marketplace___durationTotal
  marketplace__bidExpirationTime
  marketplace__borrowerAttestationRequired
  marketplace__durationAverage
  marketplace__feeRecipient
  marketplace__id
  marketplace__isMarketOpen
  marketplace__lenderAttestationRequired
  marketplace__marketplaceFeePercent
  marketplace__marketplaceId
  marketplace__metadataURI
  marketplace__owner
  marketplace__paymentCycleDuration
  marketplace__paymentCycleType
  marketplace__paymentDefaultDuration
  marketplace__paymentType
  marketplace__totalNumberOfLenders
  minimumCollateralPerPrincipalAmount
  requiredCollateralTokenAddress
  requiredPrincipalTokenAddress
  rewardPerLoanPrincipalAmount
  rewardToken
  rewardTokenAddress
  rewardTokenAmountInitial
  rewardTokenAmountRemaining
  rewardToken__address
  rewardToken__decimals
  rewardToken__id
  rewardToken__name
  rewardToken__nftId
  rewardToken__symbol
  rewardToken__type
  status
  tokenVolume
  tokenVolume___aprActiveWeightedTotal
  tokenVolume___aprWeightedTotal
  tokenVolume___durationTotal
  tokenVolume___loanAcceptedCount
  tokenVolume__aprActiveAverage
  tokenVolume__aprAverage
  tokenVolume__commissionEarned
  tokenVolume__durationAverage
  tokenVolume__id
  tokenVolume__lendingTokenAddress
  tokenVolume__loanAverage
  tokenVolume__outstandingCapital
  tokenVolume__totalAccepted
  tokenVolume__totalActive
  tokenVolume__totalAvailable
  tokenVolume__totalDefaulted
  tokenVolume__totalDueSoon
  tokenVolume__totalLate
  tokenVolume__totalLiquidated
  tokenVolume__totalLoaned
  tokenVolume__totalRepaid
  tokenVolume__totalRepaidInterest
  updatedAt
}

enum TokenVolume_orderBy {
  _aprActiveWeightedTotal
  _aprWeightedTotal
  _durationTotal
  _linkedParentTokenVolume
  _linkedParentTokenVolume___aprActiveWeightedTotal
  _linkedParentTokenVolume___aprWeightedTotal
  _linkedParentTokenVolume___durationTotal
  _linkedParentTokenVolume___loanAcceptedCount
  _linkedParentTokenVolume__aprActiveAverage
  _linkedParentTokenVolume__aprAverage
  _linkedParentTokenVolume__commissionEarned
  _linkedParentTokenVolume__durationAverage
  _linkedParentTokenVolume__id
  _linkedParentTokenVolume__lendingTokenAddress
  _linkedParentTokenVolume__loanAverage
  _linkedParentTokenVolume__outstandingCapital
  _linkedParentTokenVolume__totalAccepted
  _linkedParentTokenVolume__totalActive
  _linkedParentTokenVolume__totalAvailable
  _linkedParentTokenVolume__totalDefaulted
  _linkedParentTokenVolume__totalDueSoon
  _linkedParentTokenVolume__totalLate
  _linkedParentTokenVolume__totalLiquidated
  _linkedParentTokenVolume__totalLoaned
  _linkedParentTokenVolume__totalRepaid
  _linkedParentTokenVolume__totalRepaidInterest
  _loanAcceptedCount
  _protocolCollateral
  _protocolCollateral__id
  allocatedRewards
  aprActiveAverage
  aprAverage
  borrower
  borrower___durationTotal
  borrower__attestedTimestamp
  borrower__borrowerAddress
  borrower__durationAverage
  borrower__firstInteractionDate
  borrower__id
  borrower__isAttested
  borrower__marketplaceId
  collateralToken
  collateralToken__address
  collateralToken__decimals
  collateralToken__id
  collateralToken__name
  collateralToken__nftId
  collateralToken__symbol
  collateralToken__type
  commissionEarned
  durationAverage
  id
  lender
  lender___durationTotal
  lender__attestedTimestamp
  lender__durationAverage
  lender__firstInteractionDate
  lender__id
  lender__isAttested
  lender__lenderAddress
  lender__marketplaceId
  lendingTokenAddress
  loanAverage
  loans
  loans__acceptedCount
  loans__cancelledCount
  loans__defaultedCount
  loans__dueSoonCount
  loans__expiredCount
  loans__id
  loans__lateCount
  loans__liquidatedCount
  loans__repaidCount
  loans__submittedCount
  loans__totalCount
  market
  market___durationTotal
  market__bidExpirationTime
  market__borrowerAttestationRequired
  market__durationAverage
  market__feeRecipient
  market__id
  market__isMarketOpen
  market__lenderAttestationRequired
  market__marketplaceFeePercent
  market__marketplaceId
  market__metadataURI
  market__owner
  market__paymentCycleDuration
  market__paymentCycleType
  market__paymentDefaultDuration
  market__paymentType
  market__totalNumberOfLenders
  outstandingCapital
  protocol
  protocol___durationTotal
  protocol__durationAverage
  protocol__id
  token
  tokenVolumeByCollateral
  token__address
  token__decimals
  token__id
  token__name
  token__nftId
  token__symbol
  token__type
  totalAccepted
  totalActive
  totalAvailable
  totalDefaulted
  totalDueSoon
  totalLate
  totalLiquidated
  totalLoaned
  totalRepaid
  totalRepaidInterest
}

enum Token_orderBy {
  address
  decimals
  id
  name
  nftId
  symbol
  type
}

enum User_orderBy {
  bidRewards
  borrowers
  firstInteractionDate
  id
  lenders
}

enum _SubgraphErrorPolicy_ {
  "Data will be returned even if the subgraph has indexing errors"
  allow
  "If the subgraph has indexing errors, data will be omitted. The default."
  deny
}

scalar BigDecimal

scalar BigInt

scalar Bytes

"""

8 bytes signed integer
"""
scalar Int8

input BidCollateral_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  and: [BidCollateral_filter]
  bid: String
  bid_: Bid_filter
  bid_contains: String
  bid_contains_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_gt: String
  bid_gte: String
  bid_in: [String!]
  bid_lt: String
  bid_lte: String
  bid_not: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_not_in: [String!]
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  collateralAddress: Bytes
  collateralAddress_contains: Bytes
  collateralAddress_gt: Bytes
  collateralAddress_gte: Bytes
  collateralAddress_in: [Bytes!]
  collateralAddress_lt: Bytes
  collateralAddress_lte: Bytes
  collateralAddress_not: Bytes
  collateralAddress_not_contains: Bytes
  collateralAddress_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [BidCollateral_filter]
  receiver: Bytes
  receiver_contains: Bytes
  receiver_gt: Bytes
  receiver_gte: Bytes
  receiver_in: [Bytes!]
  receiver_lt: Bytes
  receiver_lte: Bytes
  receiver_not: Bytes
  receiver_not_contains: Bytes
  receiver_not_in: [Bytes!]
  status: String
  status_contains: String
  status_contains_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  token: String
  tokenId: BigInt
  tokenId_gt: BigInt
  tokenId_gte: BigInt
  tokenId_in: [BigInt!]
  tokenId_lt: BigInt
  tokenId_lte: BigInt
  tokenId_not: BigInt
  tokenId_not_in: [BigInt!]
  token_: Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

input BidReward_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [BidReward_filter]
  bid: String
  bid_: Bid_filter
  bid_contains: String
  bid_contains_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_gt: String
  bid_gte: String
  bid_in: [String!]
  bid_lt: String
  bid_lte: String
  bid_not: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_not_in: [String!]
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  claimed: Boolean
  claimed_in: [Boolean!]
  claimed_not: Boolean
  claimed_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [BidReward_filter]
  reward: String
  reward_: RewardAllocation_filter
  reward_contains: String
  reward_contains_nocase: String
  reward_ends_with: String
  reward_ends_with_nocase: String
  reward_gt: String
  reward_gte: String
  reward_in: [String!]
  reward_lt: String
  reward_lte: String
  reward_not: String
  reward_not_contains: String
  reward_not_contains_nocase: String
  reward_not_ends_with: String
  reward_not_ends_with_nocase: String
  reward_not_in: [String!]
  reward_not_starts_with: String
  reward_not_starts_with_nocase: String
  reward_starts_with: String
  reward_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
  user: String
  user_: User_filter
  user_contains: String
  user_contains_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
}

input Bid_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _lastTotalRepaidAmount: BigInt
  _lastTotalRepaidAmount_gt: BigInt
  _lastTotalRepaidAmount_gte: BigInt
  _lastTotalRepaidAmount_in: [BigInt!]
  _lastTotalRepaidAmount_lt: BigInt
  _lastTotalRepaidAmount_lte: BigInt
  _lastTotalRepaidAmount_not: BigInt
  _lastTotalRepaidAmount_not_in: [BigInt!]
  _lastTotalRepaidInterestAmount: BigInt
  _lastTotalRepaidInterestAmount_gt: BigInt
  _lastTotalRepaidInterestAmount_gte: BigInt
  _lastTotalRepaidInterestAmount_in: [BigInt!]
  _lastTotalRepaidInterestAmount_lt: BigInt
  _lastTotalRepaidInterestAmount_lte: BigInt
  _lastTotalRepaidInterestAmount_not: BigInt
  _lastTotalRepaidInterestAmount_not_in: [BigInt!]
  acceptedTimestamp: BigInt
  acceptedTimestamp_gt: BigInt
  acceptedTimestamp_gte: BigInt
  acceptedTimestamp_in: [BigInt!]
  acceptedTimestamp_lt: BigInt
  acceptedTimestamp_lte: BigInt
  acceptedTimestamp_not: BigInt
  acceptedTimestamp_not_in: [BigInt!]
  and: [Bid_filter]
  apr: BigInt
  apr_gt: BigInt
  apr_gte: BigInt
  apr_in: [BigInt!]
  apr_lt: BigInt
  apr_lte: BigInt
  apr_not: BigInt
  apr_not_in: [BigInt!]
  bidId: BigInt
  bidId_gt: BigInt
  bidId_gte: BigInt
  bidId_in: [BigInt!]
  bidId_lt: BigInt
  bidId_lte: BigInt
  bidId_not: BigInt
  bidId_not_in: [BigInt!]
  bidRewards_: BidReward_filter
  borrower: String
  borrowerAddress: Bytes
  borrowerAddress_contains: Bytes
  borrowerAddress_gt: Bytes
  borrowerAddress_gte: Bytes
  borrowerAddress_in: [Bytes!]
  borrowerAddress_lt: Bytes
  borrowerAddress_lte: Bytes
  borrowerAddress_not: Bytes
  borrowerAddress_not_contains: Bytes
  borrowerAddress_not_in: [Bytes!]
  borrower_: Borrower_filter
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_gt: String
  borrower_gte: String
  borrower_in: [String!]
  borrower_lt: String
  borrower_lte: String
  borrower_not: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_not_in: [String!]
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  collateral: [String!]
  collateralEscrow: Bytes
  collateralEscrow_contains: Bytes
  collateralEscrow_gt: Bytes
  collateralEscrow_gte: Bytes
  collateralEscrow_in: [Bytes!]
  collateralEscrow_lt: Bytes
  collateralEscrow_lte: Bytes
  collateralEscrow_not: Bytes
  collateralEscrow_not_contains: Bytes
  collateralEscrow_not_in: [Bytes!]
  collateral_: BidCollateral_filter
  collateral_contains: [String!]
  collateral_contains_nocase: [String!]
  collateral_not: [String!]
  collateral_not_contains: [String!]
  collateral_not_contains_nocase: [String!]
  commitment: String
  commitmentId: String
  commitmentId_contains: String
  commitmentId_contains_nocase: String
  commitmentId_ends_with: String
  commitmentId_ends_with_nocase: String
  commitmentId_gt: String
  commitmentId_gte: String
  commitmentId_in: [String!]
  commitmentId_lt: String
  commitmentId_lte: String
  commitmentId_not: String
  commitmentId_not_contains: String
  commitmentId_not_contains_nocase: String
  commitmentId_not_ends_with: String
  commitmentId_not_ends_with_nocase: String
  commitmentId_not_in: [String!]
  commitmentId_not_starts_with: String
  commitmentId_not_starts_with_nocase: String
  commitmentId_starts_with: String
  commitmentId_starts_with_nocase: String
  commitment_: Commitment_filter
  commitment_contains: String
  commitment_contains_nocase: String
  commitment_ends_with: String
  commitment_ends_with_nocase: String
  commitment_gt: String
  commitment_gte: String
  commitment_in: [String!]
  commitment_lt: String
  commitment_lte: String
  commitment_not: String
  commitment_not_contains: String
  commitment_not_contains_nocase: String
  commitment_not_ends_with: String
  commitment_not_ends_with_nocase: String
  commitment_not_in: [String!]
  commitment_not_starts_with: String
  commitment_not_starts_with_nocase: String
  commitment_starts_with: String
  commitment_starts_with_nocase: String
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  endDate: BigInt
  endDate_gt: BigInt
  endDate_gte: BigInt
  endDate_in: [BigInt!]
  endDate_lt: BigInt
  endDate_lte: BigInt
  endDate_not: BigInt
  endDate_not_in: [BigInt!]
  expiresAt: BigInt
  expiresAt_gt: BigInt
  expiresAt_gte: BigInt
  expiresAt_in: [BigInt!]
  expiresAt_lt: BigInt
  expiresAt_lte: BigInt
  expiresAt_not: BigInt
  expiresAt_not_in: [BigInt!]
  fundedTx_: FundedTx_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastRepaidTimestamp: BigInt
  lastRepaidTimestamp_gt: BigInt
  lastRepaidTimestamp_gte: BigInt
  lastRepaidTimestamp_in: [BigInt!]
  lastRepaidTimestamp_lt: BigInt
  lastRepaidTimestamp_lte: BigInt
  lastRepaidTimestamp_not: BigInt
  lastRepaidTimestamp_not_in: [BigInt!]
  lender: String
  lenderAddress: Bytes
  lenderAddress_contains: Bytes
  lenderAddress_gt: Bytes
  lenderAddress_gte: Bytes
  lenderAddress_in: [Bytes!]
  lenderAddress_lt: Bytes
  lenderAddress_lte: Bytes
  lenderAddress_not: Bytes
  lenderAddress_not_contains: Bytes
  lenderAddress_not_in: [Bytes!]
  lender_: Lender_filter
  lender_contains: String
  lender_contains_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_gt: String
  lender_gte: String
  lender_in: [String!]
  lender_lt: String
  lender_lte: String
  lender_not: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_not_in: [String!]
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lendingToken: String
  lendingTokenAddress: Bytes
  lendingTokenAddress_contains: Bytes
  lendingTokenAddress_gt: Bytes
  lendingTokenAddress_gte: Bytes
  lendingTokenAddress_in: [Bytes!]
  lendingTokenAddress_lt: Bytes
  lendingTokenAddress_lte: Bytes
  lendingTokenAddress_not: Bytes
  lendingTokenAddress_not_contains: Bytes
  lendingTokenAddress_not_in: [Bytes!]
  lendingToken_: Token_filter
  lendingToken_contains: String
  lendingToken_contains_nocase: String
  lendingToken_ends_with: String
  lendingToken_ends_with_nocase: String
  lendingToken_gt: String
  lendingToken_gte: String
  lendingToken_in: [String!]
  lendingToken_lt: String
  lendingToken_lte: String
  lendingToken_not: String
  lendingToken_not_contains: String
  lendingToken_not_contains_nocase: String
  lendingToken_not_ends_with: String
  lendingToken_not_ends_with_nocase: String
  lendingToken_not_in: [String!]
  lendingToken_not_starts_with: String
  lendingToken_not_starts_with_nocase: String
  lendingToken_starts_with: String
  lendingToken_starts_with_nocase: String
  liquidatorAddress: Bytes
  liquidatorAddress_contains: Bytes
  liquidatorAddress_gt: Bytes
  liquidatorAddress_gte: Bytes
  liquidatorAddress_in: [Bytes!]
  liquidatorAddress_lt: Bytes
  liquidatorAddress_lte: Bytes
  liquidatorAddress_not: Bytes
  liquidatorAddress_not_contains: Bytes
  liquidatorAddress_not_in: [Bytes!]
  loanDuration: BigInt
  loanDuration_gt: BigInt
  loanDuration_gte: BigInt
  loanDuration_in: [BigInt!]
  loanDuration_lt: BigInt
  loanDuration_lte: BigInt
  loanDuration_not: BigInt
  loanDuration_not_in: [BigInt!]
  marketplace: String
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  marketplace_: MarketPlace_filter
  marketplace_contains: String
  marketplace_contains_nocase: String
  marketplace_ends_with: String
  marketplace_ends_with_nocase: String
  marketplace_gt: String
  marketplace_gte: String
  marketplace_in: [String!]
  marketplace_lt: String
  marketplace_lte: String
  marketplace_not: String
  marketplace_not_contains: String
  marketplace_not_contains_nocase: String
  marketplace_not_ends_with: String
  marketplace_not_ends_with_nocase: String
  marketplace_not_in: [String!]
  marketplace_not_starts_with: String
  marketplace_not_starts_with_nocase: String
  marketplace_starts_with: String
  marketplace_starts_with_nocase: String
  metadataURI: String
  metadataURI_contains: String
  metadataURI_contains_nocase: String
  metadataURI_ends_with: String
  metadataURI_ends_with_nocase: String
  metadataURI_gt: String
  metadataURI_gte: String
  metadataURI_in: [String!]
  metadataURI_lt: String
  metadataURI_lte: String
  metadataURI_not: String
  metadataURI_not_contains: String
  metadataURI_not_contains_nocase: String
  metadataURI_not_ends_with: String
  metadataURI_not_ends_with_nocase: String
  metadataURI_not_in: [String!]
  metadataURI_not_starts_with: String
  metadataURI_not_starts_with_nocase: String
  metadataURI_starts_with: String
  metadataURI_starts_with_nocase: String
  nextDueDate: BigInt
  nextDueDate_gt: BigInt
  nextDueDate_gte: BigInt
  nextDueDate_in: [BigInt!]
  nextDueDate_lt: BigInt
  nextDueDate_lte: BigInt
  nextDueDate_not: BigInt
  nextDueDate_not_in: [BigInt!]
  or: [Bid_filter]
  paymentCycle: BigInt
  paymentCycleAmount: BigInt
  paymentCycleAmount_gt: BigInt
  paymentCycleAmount_gte: BigInt
  paymentCycleAmount_in: [BigInt!]
  paymentCycleAmount_lt: BigInt
  paymentCycleAmount_lte: BigInt
  paymentCycleAmount_not: BigInt
  paymentCycleAmount_not_in: [BigInt!]
  paymentCycle_gt: BigInt
  paymentCycle_gte: BigInt
  paymentCycle_in: [BigInt!]
  paymentCycle_lt: BigInt
  paymentCycle_lte: BigInt
  paymentCycle_not: BigInt
  paymentCycle_not_in: [BigInt!]
  paymentDefaultDuration: BigInt
  paymentDefaultDuration_gt: BigInt
  paymentDefaultDuration_gte: BigInt
  paymentDefaultDuration_in: [BigInt!]
  paymentDefaultDuration_lt: BigInt
  paymentDefaultDuration_lte: BigInt
  paymentDefaultDuration_not: BigInt
  paymentDefaultDuration_not_in: [BigInt!]
  payments_: Payment_filter
  principal: BigInt
  principal_gt: BigInt
  principal_gte: BigInt
  principal_in: [BigInt!]
  principal_lt: BigInt
  principal_lte: BigInt
  principal_not: BigInt
  principal_not_in: [BigInt!]
  receiverAddress: Bytes
  receiverAddress_contains: Bytes
  receiverAddress_gt: Bytes
  receiverAddress_gte: Bytes
  receiverAddress_in: [Bytes!]
  receiverAddress_lt: Bytes
  receiverAddress_lte: Bytes
  receiverAddress_not: Bytes
  receiverAddress_not_contains: Bytes
  receiverAddress_not_in: [Bytes!]
  status: String
  status_contains: String
  status_contains_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  totalRepaidInterest: BigInt
  totalRepaidInterest_gt: BigInt
  totalRepaidInterest_gte: BigInt
  totalRepaidInterest_in: [BigInt!]
  totalRepaidInterest_lt: BigInt
  totalRepaidInterest_lte: BigInt
  totalRepaidInterest_not: BigInt
  totalRepaidInterest_not_in: [BigInt!]
  totalRepaidPrincipal: BigInt
  totalRepaidPrincipal_gt: BigInt
  totalRepaidPrincipal_gte: BigInt
  totalRepaidPrincipal_in: [BigInt!]
  totalRepaidPrincipal_lt: BigInt
  totalRepaidPrincipal_lte: BigInt
  totalRepaidPrincipal_not: BigInt
  totalRepaidPrincipal_not_in: [BigInt!]
  transactionHash: String
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_gt: String
  transactionHash_gte: String
  transactionHash_in: [String!]
  transactionHash_lt: String
  transactionHash_lte: String
  transactionHash_not: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  transactionHash_not_in: [String!]
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input Borrower_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  and: [Borrower_filter]
  attestedTimestamp: BigInt
  attestedTimestamp_gt: BigInt
  attestedTimestamp_gte: BigInt
  attestedTimestamp_in: [BigInt!]
  attestedTimestamp_lt: BigInt
  attestedTimestamp_lte: BigInt
  attestedTimestamp_not: BigInt
  attestedTimestamp_not_in: [BigInt!]
  borrowerAddress: Bytes
  borrowerAddress_contains: Bytes
  borrowerAddress_gt: Bytes
  borrowerAddress_gte: Bytes
  borrowerAddress_in: [Bytes!]
  borrowerAddress_lt: Bytes
  borrowerAddress_lte: Bytes
  borrowerAddress_not: Bytes
  borrowerAddress_not_contains: Bytes
  borrowerAddress_not_in: [Bytes!]
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  firstInteractionDate: BigInt
  firstInteractionDate_gt: BigInt
  firstInteractionDate_gte: BigInt
  firstInteractionDate_in: [BigInt!]
  firstInteractionDate_lt: BigInt
  firstInteractionDate_lte: BigInt
  firstInteractionDate_not: BigInt
  firstInteractionDate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isAttested: Boolean
  isAttested_in: [Boolean!]
  isAttested_not: Boolean
  isAttested_not_in: [Boolean!]
  loans_: LoanStatusCount_filter
  marketplace: String
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  marketplace_: MarketPlace_filter
  marketplace_contains: String
  marketplace_contains_nocase: String
  marketplace_ends_with: String
  marketplace_ends_with_nocase: String
  marketplace_gt: String
  marketplace_gte: String
  marketplace_in: [String!]
  marketplace_lt: String
  marketplace_lte: String
  marketplace_not: String
  marketplace_not_contains: String
  marketplace_not_contains_nocase: String
  marketplace_not_ends_with: String
  marketplace_not_ends_with_nocase: String
  marketplace_not_in: [String!]
  marketplace_not_starts_with: String
  marketplace_not_starts_with_nocase: String
  marketplace_starts_with: String
  marketplace_starts_with_nocase: String
  or: [Borrower_filter]
  tokenVolumes_: TokenVolume_filter
  user: String
  user_: User_filter
  user_contains: String
  user_contains_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
}

input CommitmentReward_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [CommitmentReward_filter]
  apy: BigInt
  apy_gt: BigInt
  apy_gte: BigInt
  apy_in: [BigInt!]
  apy_lt: BigInt
  apy_lte: BigInt
  apy_not: BigInt
  apy_not_in: [BigInt!]
  commitment: String
  commitment_: Commitment_filter
  commitment_contains: String
  commitment_contains_nocase: String
  commitment_ends_with: String
  commitment_ends_with_nocase: String
  commitment_gt: String
  commitment_gte: String
  commitment_in: [String!]
  commitment_lt: String
  commitment_lte: String
  commitment_not: String
  commitment_not_contains: String
  commitment_not_contains_nocase: String
  commitment_not_ends_with: String
  commitment_not_ends_with_nocase: String
  commitment_not_in: [String!]
  commitment_not_starts_with: String
  commitment_not_starts_with_nocase: String
  commitment_starts_with: String
  commitment_starts_with_nocase: String
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [CommitmentReward_filter]
  reward: String
  reward_: RewardAllocation_filter
  reward_contains: String
  reward_contains_nocase: String
  reward_ends_with: String
  reward_ends_with_nocase: String
  reward_gt: String
  reward_gte: String
  reward_in: [String!]
  reward_lt: String
  reward_lte: String
  reward_not: String
  reward_not_contains: String
  reward_not_contains_nocase: String
  reward_not_ends_with: String
  reward_not_ends_with_nocase: String
  reward_not_in: [String!]
  reward_not_starts_with: String
  reward_not_starts_with_nocase: String
  reward_starts_with: String
  reward_starts_with_nocase: String
  roi: BigInt
  roi_gt: BigInt
  roi_gte: BigInt
  roi_in: [BigInt!]
  roi_lt: BigInt
  roi_lte: BigInt
  roi_not: BigInt
  roi_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

input CommitmentZScore_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [CommitmentZScore_filter]
  commitment: String
  commitment_: Commitment_filter
  commitment_contains: String
  commitment_contains_nocase: String
  commitment_ends_with: String
  commitment_ends_with_nocase: String
  commitment_gt: String
  commitment_gte: String
  commitment_in: [String!]
  commitment_lt: String
  commitment_lte: String
  commitment_not: String
  commitment_not_contains: String
  commitment_not_contains_nocase: String
  commitment_not_ends_with: String
  commitment_not_ends_with_nocase: String
  commitment_not_in: [String!]
  commitment_not_starts_with: String
  commitment_not_starts_with_nocase: String
  commitment_starts_with: String
  commitment_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [CommitmentZScore_filter]
  zScore: BigDecimal
  zScore_gt: BigDecimal
  zScore_gte: BigDecimal
  zScore_in: [BigDecimal!]
  zScore_lt: BigDecimal
  zScore_lte: BigDecimal
  zScore_not: BigDecimal
  zScore_not_in: [BigDecimal!]
}

input Commitment_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  acceptedPrincipal: BigInt
  acceptedPrincipal_gt: BigInt
  acceptedPrincipal_gte: BigInt
  acceptedPrincipal_in: [BigInt!]
  acceptedPrincipal_lt: BigInt
  acceptedPrincipal_lte: BigInt
  acceptedPrincipal_not: BigInt
  acceptedPrincipal_not_in: [BigInt!]
  and: [Commitment_filter]
  collateralToken: String
  collateralTokenAddress: Bytes
  collateralTokenAddress_contains: Bytes
  collateralTokenAddress_gt: Bytes
  collateralTokenAddress_gte: Bytes
  collateralTokenAddress_in: [Bytes!]
  collateralTokenAddress_lt: Bytes
  collateralTokenAddress_lte: Bytes
  collateralTokenAddress_not: Bytes
  collateralTokenAddress_not_contains: Bytes
  collateralTokenAddress_not_in: [Bytes!]
  collateralTokenType: BigInt
  collateralTokenType_gt: BigInt
  collateralTokenType_gte: BigInt
  collateralTokenType_in: [BigInt!]
  collateralTokenType_lt: BigInt
  collateralTokenType_lte: BigInt
  collateralTokenType_not: BigInt
  collateralTokenType_not_in: [BigInt!]
  collateralToken_: Token_filter
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_gt: String
  collateralToken_gte: String
  collateralToken_in: [String!]
  collateralToken_lt: String
  collateralToken_lte: String
  collateralToken_not: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_not_in: [String!]
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  commitmentBorrowers: [Bytes!]
  commitmentBorrowers_contains: [Bytes!]
  commitmentBorrowers_contains_nocase: [Bytes!]
  commitmentBorrowers_not: [Bytes!]
  commitmentBorrowers_not_contains: [Bytes!]
  commitmentBorrowers_not_contains_nocase: [Bytes!]
  commitmentRewards_: CommitmentReward_filter
  committedAmount: BigInt
  committedAmount_gt: BigInt
  committedAmount_gte: BigInt
  committedAmount_in: [BigInt!]
  committedAmount_lt: BigInt
  committedAmount_lte: BigInt
  committedAmount_not: BigInt
  committedAmount_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  expirationTimestamp: BigInt
  expirationTimestamp_gt: BigInt
  expirationTimestamp_gte: BigInt
  expirationTimestamp_in: [BigInt!]
  expirationTimestamp_lt: BigInt
  expirationTimestamp_lte: BigInt
  expirationTimestamp_not: BigInt
  expirationTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lender: String
  lenderAddress: Bytes
  lenderAddress_contains: Bytes
  lenderAddress_gt: Bytes
  lenderAddress_gte: Bytes
  lenderAddress_in: [Bytes!]
  lenderAddress_lt: Bytes
  lenderAddress_lte: Bytes
  lenderAddress_not: Bytes
  lenderAddress_not_contains: Bytes
  lenderAddress_not_in: [Bytes!]
  lender_: Lender_filter
  lender_contains: String
  lender_contains_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_gt: String
  lender_gte: String
  lender_in: [String!]
  lender_lt: String
  lender_lte: String
  lender_not: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_not_in: [String!]
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  marketplace: String
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  marketplace_: MarketPlace_filter
  marketplace_contains: String
  marketplace_contains_nocase: String
  marketplace_ends_with: String
  marketplace_ends_with_nocase: String
  marketplace_gt: String
  marketplace_gte: String
  marketplace_in: [String!]
  marketplace_lt: String
  marketplace_lte: String
  marketplace_not: String
  marketplace_not_contains: String
  marketplace_not_contains_nocase: String
  marketplace_not_ends_with: String
  marketplace_not_ends_with_nocase: String
  marketplace_not_in: [String!]
  marketplace_not_starts_with: String
  marketplace_not_starts_with_nocase: String
  marketplace_starts_with: String
  marketplace_starts_with_nocase: String
  maxDuration: BigInt
  maxDuration_gt: BigInt
  maxDuration_gte: BigInt
  maxDuration_in: [BigInt!]
  maxDuration_lt: BigInt
  maxDuration_lte: BigInt
  maxDuration_not: BigInt
  maxDuration_not_in: [BigInt!]
  maxPrincipal: BigInt
  maxPrincipalPerCollateralAmount: BigInt
  maxPrincipalPerCollateralAmount_gt: BigInt
  maxPrincipalPerCollateralAmount_gte: BigInt
  maxPrincipalPerCollateralAmount_in: [BigInt!]
  maxPrincipalPerCollateralAmount_lt: BigInt
  maxPrincipalPerCollateralAmount_lte: BigInt
  maxPrincipalPerCollateralAmount_not: BigInt
  maxPrincipalPerCollateralAmount_not_in: [BigInt!]
  maxPrincipal_gt: BigInt
  maxPrincipal_gte: BigInt
  maxPrincipal_in: [BigInt!]
  maxPrincipal_lt: BigInt
  maxPrincipal_lte: BigInt
  maxPrincipal_not: BigInt
  maxPrincipal_not_in: [BigInt!]
  minAPY: BigInt
  minAPY_gt: BigInt
  minAPY_gte: BigInt
  minAPY_in: [BigInt!]
  minAPY_lt: BigInt
  minAPY_lte: BigInt
  minAPY_not: BigInt
  minAPY_not_in: [BigInt!]
  or: [Commitment_filter]
  principalToken: String
  principalTokenAddress: Bytes
  principalTokenAddress_contains: Bytes
  principalTokenAddress_gt: Bytes
  principalTokenAddress_gte: Bytes
  principalTokenAddress_in: [Bytes!]
  principalTokenAddress_lt: Bytes
  principalTokenAddress_lte: Bytes
  principalTokenAddress_not: Bytes
  principalTokenAddress_not_contains: Bytes
  principalTokenAddress_not_in: [Bytes!]
  principalToken_: Token_filter
  principalToken_contains: String
  principalToken_contains_nocase: String
  principalToken_ends_with: String
  principalToken_ends_with_nocase: String
  principalToken_gt: String
  principalToken_gte: String
  principalToken_in: [String!]
  principalToken_lt: String
  principalToken_lte: String
  principalToken_not: String
  principalToken_not_contains: String
  principalToken_not_contains_nocase: String
  principalToken_not_ends_with: String
  principalToken_not_ends_with_nocase: String
  principalToken_not_in: [String!]
  principalToken_not_starts_with: String
  principalToken_not_starts_with_nocase: String
  principalToken_starts_with: String
  principalToken_starts_with_nocase: String
  status: String
  status_contains: String
  status_contains_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  tokenVolume: String
  tokenVolume_: TokenVolume_filter
  tokenVolume_contains: String
  tokenVolume_contains_nocase: String
  tokenVolume_ends_with: String
  tokenVolume_ends_with_nocase: String
  tokenVolume_gt: String
  tokenVolume_gte: String
  tokenVolume_in: [String!]
  tokenVolume_lt: String
  tokenVolume_lte: String
  tokenVolume_not: String
  tokenVolume_not_contains: String
  tokenVolume_not_contains_nocase: String
  tokenVolume_not_ends_with: String
  tokenVolume_not_ends_with_nocase: String
  tokenVolume_not_in: [String!]
  tokenVolume_not_starts_with: String
  tokenVolume_not_starts_with_nocase: String
  tokenVolume_starts_with: String
  tokenVolume_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

input FundedTx_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [FundedTx_filter]
  bid: String
  bid_: Bid_filter
  bid_contains: String
  bid_contains_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_gt: String
  bid_gte: String
  bid_in: [String!]
  bid_lt: String
  bid_lte: String
  bid_not: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_not_in: [String!]
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FundedTx_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

input IDurationAverage_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  and: [IDurationAverage_filter]
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  or: [IDurationAverage_filter]
}

input IHasLoans_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  and: [IHasLoans_filter]
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  loans: String
  loans_: LoanStatusCount_filter
  loans_contains: String
  loans_contains_nocase: String
  loans_ends_with: String
  loans_ends_with_nocase: String
  loans_gt: String
  loans_gte: String
  loans_in: [String!]
  loans_lt: String
  loans_lte: String
  loans_not: String
  loans_not_contains: String
  loans_not_contains_nocase: String
  loans_not_ends_with: String
  loans_not_ends_with_nocase: String
  loans_not_in: [String!]
  loans_not_starts_with: String
  loans_not_starts_with_nocase: String
  loans_starts_with: String
  loans_starts_with_nocase: String
  or: [IHasLoans_filter]
  tokenVolumes: [String!]
  tokenVolumes_: TokenVolume_filter
  tokenVolumes_contains: [String!]
  tokenVolumes_contains_nocase: [String!]
  tokenVolumes_not: [String!]
  tokenVolumes_not_contains: [String!]
  tokenVolumes_not_contains_nocase: [String!]
}

input ILoanStatusCount_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  accepted: [String!]
  acceptedCount: BigInt
  acceptedCount_gt: BigInt
  acceptedCount_gte: BigInt
  acceptedCount_in: [BigInt!]
  acceptedCount_lt: BigInt
  acceptedCount_lte: BigInt
  acceptedCount_not: BigInt
  acceptedCount_not_in: [BigInt!]
  accepted_: Bid_filter
  accepted_contains: [String!]
  accepted_contains_nocase: [String!]
  accepted_not: [String!]
  accepted_not_contains: [String!]
  accepted_not_contains_nocase: [String!]
  all: [String!]
  all_: Bid_filter
  all_contains: [String!]
  all_contains_nocase: [String!]
  all_not: [String!]
  all_not_contains: [String!]
  all_not_contains_nocase: [String!]
  and: [ILoanStatusCount_filter]
  cancelled: [String!]
  cancelledCount: BigInt
  cancelledCount_gt: BigInt
  cancelledCount_gte: BigInt
  cancelledCount_in: [BigInt!]
  cancelledCount_lt: BigInt
  cancelledCount_lte: BigInt
  cancelledCount_not: BigInt
  cancelledCount_not_in: [BigInt!]
  cancelled_: Bid_filter
  cancelled_contains: [String!]
  cancelled_contains_nocase: [String!]
  cancelled_not: [String!]
  cancelled_not_contains: [String!]
  cancelled_not_contains_nocase: [String!]
  defaulted: [String!]
  defaultedCount: BigInt
  defaultedCount_gt: BigInt
  defaultedCount_gte: BigInt
  defaultedCount_in: [BigInt!]
  defaultedCount_lt: BigInt
  defaultedCount_lte: BigInt
  defaultedCount_not: BigInt
  defaultedCount_not_in: [BigInt!]
  defaulted_: Bid_filter
  defaulted_contains: [String!]
  defaulted_contains_nocase: [String!]
  defaulted_not: [String!]
  defaulted_not_contains: [String!]
  defaulted_not_contains_nocase: [String!]
  dueSoon: [String!]
  dueSoonCount: BigInt
  dueSoonCount_gt: BigInt
  dueSoonCount_gte: BigInt
  dueSoonCount_in: [BigInt!]
  dueSoonCount_lt: BigInt
  dueSoonCount_lte: BigInt
  dueSoonCount_not: BigInt
  dueSoonCount_not_in: [BigInt!]
  dueSoon_: Bid_filter
  dueSoon_contains: [String!]
  dueSoon_contains_nocase: [String!]
  dueSoon_not: [String!]
  dueSoon_not_contains: [String!]
  dueSoon_not_contains_nocase: [String!]
  expired: [String!]
  expiredCount: BigInt
  expiredCount_gt: BigInt
  expiredCount_gte: BigInt
  expiredCount_in: [BigInt!]
  expiredCount_lt: BigInt
  expiredCount_lte: BigInt
  expiredCount_not: BigInt
  expiredCount_not_in: [BigInt!]
  expired_: Bid_filter
  expired_contains: [String!]
  expired_contains_nocase: [String!]
  expired_not: [String!]
  expired_not_contains: [String!]
  expired_not_contains_nocase: [String!]
  late: [String!]
  lateCount: BigInt
  lateCount_gt: BigInt
  lateCount_gte: BigInt
  lateCount_in: [BigInt!]
  lateCount_lt: BigInt
  lateCount_lte: BigInt
  lateCount_not: BigInt
  lateCount_not_in: [BigInt!]
  late_: Bid_filter
  late_contains: [String!]
  late_contains_nocase: [String!]
  late_not: [String!]
  late_not_contains: [String!]
  late_not_contains_nocase: [String!]
  liquidated: [String!]
  liquidatedCount: BigInt
  liquidatedCount_gt: BigInt
  liquidatedCount_gte: BigInt
  liquidatedCount_in: [BigInt!]
  liquidatedCount_lt: BigInt
  liquidatedCount_lte: BigInt
  liquidatedCount_not: BigInt
  liquidatedCount_not_in: [BigInt!]
  liquidated_: Bid_filter
  liquidated_contains: [String!]
  liquidated_contains_nocase: [String!]
  liquidated_not: [String!]
  liquidated_not_contains: [String!]
  liquidated_not_contains_nocase: [String!]
  or: [ILoanStatusCount_filter]
  repaid: [String!]
  repaidCount: BigInt
  repaidCount_gt: BigInt
  repaidCount_gte: BigInt
  repaidCount_in: [BigInt!]
  repaidCount_lt: BigInt
  repaidCount_lte: BigInt
  repaidCount_not: BigInt
  repaidCount_not_in: [BigInt!]
  repaid_: Bid_filter
  repaid_contains: [String!]
  repaid_contains_nocase: [String!]
  repaid_not: [String!]
  repaid_not_contains: [String!]
  repaid_not_contains_nocase: [String!]
  submitted: [String!]
  submittedCount: BigInt
  submittedCount_gt: BigInt
  submittedCount_gte: BigInt
  submittedCount_in: [BigInt!]
  submittedCount_lt: BigInt
  submittedCount_lte: BigInt
  submittedCount_not: BigInt
  submittedCount_not_in: [BigInt!]
  submitted_: Bid_filter
  submitted_contains: [String!]
  submitted_contains_nocase: [String!]
  submitted_not: [String!]
  submitted_not_contains: [String!]
  submitted_not_contains_nocase: [String!]
  totalCount: BigInt
  totalCount_gt: BigInt
  totalCount_gte: BigInt
  totalCount_in: [BigInt!]
  totalCount_lt: BigInt
  totalCount_lte: BigInt
  totalCount_not: BigInt
  totalCount_not_in: [BigInt!]
}

input Lender_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  and: [Lender_filter]
  attestedTimestamp: BigInt
  attestedTimestamp_gt: BigInt
  attestedTimestamp_gte: BigInt
  attestedTimestamp_in: [BigInt!]
  attestedTimestamp_lt: BigInt
  attestedTimestamp_lte: BigInt
  attestedTimestamp_not: BigInt
  attestedTimestamp_not_in: [BigInt!]
  commitments_: Commitment_filter
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  firstInteractionDate: BigInt
  firstInteractionDate_gt: BigInt
  firstInteractionDate_gte: BigInt
  firstInteractionDate_in: [BigInt!]
  firstInteractionDate_lt: BigInt
  firstInteractionDate_lte: BigInt
  firstInteractionDate_not: BigInt
  firstInteractionDate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isAttested: Boolean
  isAttested_in: [Boolean!]
  isAttested_not: Boolean
  isAttested_not_in: [Boolean!]
  lenderAddress: Bytes
  lenderAddress_contains: Bytes
  lenderAddress_gt: Bytes
  lenderAddress_gte: Bytes
  lenderAddress_in: [Bytes!]
  lenderAddress_lt: Bytes
  lenderAddress_lte: Bytes
  lenderAddress_not: Bytes
  lenderAddress_not_contains: Bytes
  lenderAddress_not_in: [Bytes!]
  loans_: LoanStatusCount_filter
  marketplace: String
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  marketplace_: MarketPlace_filter
  marketplace_contains: String
  marketplace_contains_nocase: String
  marketplace_ends_with: String
  marketplace_ends_with_nocase: String
  marketplace_gt: String
  marketplace_gte: String
  marketplace_in: [String!]
  marketplace_lt: String
  marketplace_lte: String
  marketplace_not: String
  marketplace_not_contains: String
  marketplace_not_contains_nocase: String
  marketplace_not_ends_with: String
  marketplace_not_ends_with_nocase: String
  marketplace_not_in: [String!]
  marketplace_not_starts_with: String
  marketplace_not_starts_with_nocase: String
  marketplace_starts_with: String
  marketplace_starts_with_nocase: String
  or: [Lender_filter]
  tokenVolumes_: TokenVolume_filter
  user: String
  user_: User_filter
  user_contains: String
  user_contains_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
}

input LoanStatusCount_filter {
  _borrower: String
  _borrower_: Borrower_filter
  _borrower_contains: String
  _borrower_contains_nocase: String
  _borrower_ends_with: String
  _borrower_ends_with_nocase: String
  _borrower_gt: String
  _borrower_gte: String
  _borrower_in: [String!]
  _borrower_lt: String
  _borrower_lte: String
  _borrower_not: String
  _borrower_not_contains: String
  _borrower_not_contains_nocase: String
  _borrower_not_ends_with: String
  _borrower_not_ends_with_nocase: String
  _borrower_not_in: [String!]
  _borrower_not_starts_with: String
  _borrower_not_starts_with_nocase: String
  _borrower_starts_with: String
  _borrower_starts_with_nocase: String
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _lender: String
  _lender_: Lender_filter
  _lender_contains: String
  _lender_contains_nocase: String
  _lender_ends_with: String
  _lender_ends_with_nocase: String
  _lender_gt: String
  _lender_gte: String
  _lender_in: [String!]
  _lender_lt: String
  _lender_lte: String
  _lender_not: String
  _lender_not_contains: String
  _lender_not_contains_nocase: String
  _lender_not_ends_with: String
  _lender_not_ends_with_nocase: String
  _lender_not_in: [String!]
  _lender_not_starts_with: String
  _lender_not_starts_with_nocase: String
  _lender_starts_with: String
  _lender_starts_with_nocase: String
  _market: String
  _market_: MarketPlace_filter
  _market_contains: String
  _market_contains_nocase: String
  _market_ends_with: String
  _market_ends_with_nocase: String
  _market_gt: String
  _market_gte: String
  _market_in: [String!]
  _market_lt: String
  _market_lte: String
  _market_not: String
  _market_not_contains: String
  _market_not_contains_nocase: String
  _market_not_ends_with: String
  _market_not_ends_with_nocase: String
  _market_not_in: [String!]
  _market_not_starts_with: String
  _market_not_starts_with_nocase: String
  _market_starts_with: String
  _market_starts_with_nocase: String
  _protocol: String
  _protocol_: Protocol_filter
  _protocol_contains: String
  _protocol_contains_nocase: String
  _protocol_ends_with: String
  _protocol_ends_with_nocase: String
  _protocol_gt: String
  _protocol_gte: String
  _protocol_in: [String!]
  _protocol_lt: String
  _protocol_lte: String
  _protocol_not: String
  _protocol_not_contains: String
  _protocol_not_contains_nocase: String
  _protocol_not_ends_with: String
  _protocol_not_ends_with_nocase: String
  _protocol_not_in: [String!]
  _protocol_not_starts_with: String
  _protocol_not_starts_with_nocase: String
  _protocol_starts_with: String
  _protocol_starts_with_nocase: String
  _tokenVolume: String
  _tokenVolume_: TokenVolume_filter
  _tokenVolume_contains: String
  _tokenVolume_contains_nocase: String
  _tokenVolume_ends_with: String
  _tokenVolume_ends_with_nocase: String
  _tokenVolume_gt: String
  _tokenVolume_gte: String
  _tokenVolume_in: [String!]
  _tokenVolume_lt: String
  _tokenVolume_lte: String
  _tokenVolume_not: String
  _tokenVolume_not_contains: String
  _tokenVolume_not_contains_nocase: String
  _tokenVolume_not_ends_with: String
  _tokenVolume_not_ends_with_nocase: String
  _tokenVolume_not_in: [String!]
  _tokenVolume_not_starts_with: String
  _tokenVolume_not_starts_with_nocase: String
  _tokenVolume_starts_with: String
  _tokenVolume_starts_with_nocase: String
  accepted: [String!]
  acceptedCount: BigInt
  acceptedCount_gt: BigInt
  acceptedCount_gte: BigInt
  acceptedCount_in: [BigInt!]
  acceptedCount_lt: BigInt
  acceptedCount_lte: BigInt
  acceptedCount_not: BigInt
  acceptedCount_not_in: [BigInt!]
  accepted_: Bid_filter
  accepted_contains: [String!]
  accepted_contains_nocase: [String!]
  accepted_not: [String!]
  accepted_not_contains: [String!]
  accepted_not_contains_nocase: [String!]
  all: [String!]
  all_: Bid_filter
  all_contains: [String!]
  all_contains_nocase: [String!]
  all_not: [String!]
  all_not_contains: [String!]
  all_not_contains_nocase: [String!]
  and: [LoanStatusCount_filter]
  cancelled: [String!]
  cancelledCount: BigInt
  cancelledCount_gt: BigInt
  cancelledCount_gte: BigInt
  cancelledCount_in: [BigInt!]
  cancelledCount_lt: BigInt
  cancelledCount_lte: BigInt
  cancelledCount_not: BigInt
  cancelledCount_not_in: [BigInt!]
  cancelled_: Bid_filter
  cancelled_contains: [String!]
  cancelled_contains_nocase: [String!]
  cancelled_not: [String!]
  cancelled_not_contains: [String!]
  cancelled_not_contains_nocase: [String!]
  defaulted: [String!]
  defaultedCount: BigInt
  defaultedCount_gt: BigInt
  defaultedCount_gte: BigInt
  defaultedCount_in: [BigInt!]
  defaultedCount_lt: BigInt
  defaultedCount_lte: BigInt
  defaultedCount_not: BigInt
  defaultedCount_not_in: [BigInt!]
  defaulted_: Bid_filter
  defaulted_contains: [String!]
  defaulted_contains_nocase: [String!]
  defaulted_not: [String!]
  defaulted_not_contains: [String!]
  defaulted_not_contains_nocase: [String!]
  dueSoon: [String!]
  dueSoonCount: BigInt
  dueSoonCount_gt: BigInt
  dueSoonCount_gte: BigInt
  dueSoonCount_in: [BigInt!]
  dueSoonCount_lt: BigInt
  dueSoonCount_lte: BigInt
  dueSoonCount_not: BigInt
  dueSoonCount_not_in: [BigInt!]
  dueSoon_: Bid_filter
  dueSoon_contains: [String!]
  dueSoon_contains_nocase: [String!]
  dueSoon_not: [String!]
  dueSoon_not_contains: [String!]
  dueSoon_not_contains_nocase: [String!]
  expired: [String!]
  expiredCount: BigInt
  expiredCount_gt: BigInt
  expiredCount_gte: BigInt
  expiredCount_in: [BigInt!]
  expiredCount_lt: BigInt
  expiredCount_lte: BigInt
  expiredCount_not: BigInt
  expiredCount_not_in: [BigInt!]
  expired_: Bid_filter
  expired_contains: [String!]
  expired_contains_nocase: [String!]
  expired_not: [String!]
  expired_not_contains: [String!]
  expired_not_contains_nocase: [String!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  late: [String!]
  lateCount: BigInt
  lateCount_gt: BigInt
  lateCount_gte: BigInt
  lateCount_in: [BigInt!]
  lateCount_lt: BigInt
  lateCount_lte: BigInt
  lateCount_not: BigInt
  lateCount_not_in: [BigInt!]
  late_: Bid_filter
  late_contains: [String!]
  late_contains_nocase: [String!]
  late_not: [String!]
  late_not_contains: [String!]
  late_not_contains_nocase: [String!]
  liquidated: [String!]
  liquidatedCount: BigInt
  liquidatedCount_gt: BigInt
  liquidatedCount_gte: BigInt
  liquidatedCount_in: [BigInt!]
  liquidatedCount_lt: BigInt
  liquidatedCount_lte: BigInt
  liquidatedCount_not: BigInt
  liquidatedCount_not_in: [BigInt!]
  liquidated_: Bid_filter
  liquidated_contains: [String!]
  liquidated_contains_nocase: [String!]
  liquidated_not: [String!]
  liquidated_not_contains: [String!]
  liquidated_not_contains_nocase: [String!]
  or: [LoanStatusCount_filter]
  repaid: [String!]
  repaidCount: BigInt
  repaidCount_gt: BigInt
  repaidCount_gte: BigInt
  repaidCount_in: [BigInt!]
  repaidCount_lt: BigInt
  repaidCount_lte: BigInt
  repaidCount_not: BigInt
  repaidCount_not_in: [BigInt!]
  repaid_: Bid_filter
  repaid_contains: [String!]
  repaid_contains_nocase: [String!]
  repaid_not: [String!]
  repaid_not_contains: [String!]
  repaid_not_contains_nocase: [String!]
  submitted: [String!]
  submittedCount: BigInt
  submittedCount_gt: BigInt
  submittedCount_gte: BigInt
  submittedCount_in: [BigInt!]
  submittedCount_lt: BigInt
  submittedCount_lte: BigInt
  submittedCount_not: BigInt
  submittedCount_not_in: [BigInt!]
  submitted_: Bid_filter
  submitted_contains: [String!]
  submitted_contains_nocase: [String!]
  submitted_not: [String!]
  submitted_not_contains: [String!]
  submitted_not_contains_nocase: [String!]
  totalCount: BigInt
  totalCount_gt: BigInt
  totalCount_gte: BigInt
  totalCount_in: [BigInt!]
  totalCount_lt: BigInt
  totalCount_lte: BigInt
  totalCount_not: BigInt
  totalCount_not_in: [BigInt!]
}

input MarketCommitmentStdDev_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [MarketCommitmentStdDev_filter]
  collateralToken: String
  collateralToken_: Token_filter
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_gt: String
  collateralToken_gte: String
  collateralToken_in: [String!]
  collateralToken_lt: String
  collateralToken_lte: String
  collateralToken_not: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_not_in: [String!]
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  commitmentZScores: [String!]
  commitmentZScores_: CommitmentZScore_filter
  commitmentZScores_contains: [String!]
  commitmentZScores_contains_nocase: [String!]
  commitmentZScores_not: [String!]
  commitmentZScores_not_contains: [String!]
  commitmentZScores_not_contains_nocase: [String!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lendingToken: String
  lendingToken_: Token_filter
  lendingToken_contains: String
  lendingToken_contains_nocase: String
  lendingToken_ends_with: String
  lendingToken_ends_with_nocase: String
  lendingToken_gt: String
  lendingToken_gte: String
  lendingToken_in: [String!]
  lendingToken_lt: String
  lendingToken_lte: String
  lendingToken_not: String
  lendingToken_not_contains: String
  lendingToken_not_contains_nocase: String
  lendingToken_not_ends_with: String
  lendingToken_not_ends_with_nocase: String
  lendingToken_not_in: [String!]
  lendingToken_not_starts_with: String
  lendingToken_not_starts_with_nocase: String
  lendingToken_starts_with: String
  lendingToken_starts_with_nocase: String
  market: String
  market_: MarketPlace_filter
  market_contains: String
  market_contains_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_gt: String
  market_gte: String
  market_in: [String!]
  market_lt: String
  market_lte: String
  market_not: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_not_in: [String!]
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  maxDurationMean: BigDecimal
  maxDurationMean_gt: BigDecimal
  maxDurationMean_gte: BigDecimal
  maxDurationMean_in: [BigDecimal!]
  maxDurationMean_lt: BigDecimal
  maxDurationMean_lte: BigDecimal
  maxDurationMean_not: BigDecimal
  maxDurationMean_not_in: [BigDecimal!]
  maxDurationStdDev: BigDecimal
  maxDurationStdDev_gt: BigDecimal
  maxDurationStdDev_gte: BigDecimal
  maxDurationStdDev_in: [BigDecimal!]
  maxDurationStdDev_lt: BigDecimal
  maxDurationStdDev_lte: BigDecimal
  maxDurationStdDev_not: BigDecimal
  maxDurationStdDev_not_in: [BigDecimal!]
  maxPrincipalPerCollateralMean: BigDecimal
  maxPrincipalPerCollateralMean_gt: BigDecimal
  maxPrincipalPerCollateralMean_gte: BigDecimal
  maxPrincipalPerCollateralMean_in: [BigDecimal!]
  maxPrincipalPerCollateralMean_lt: BigDecimal
  maxPrincipalPerCollateralMean_lte: BigDecimal
  maxPrincipalPerCollateralMean_not: BigDecimal
  maxPrincipalPerCollateralMean_not_in: [BigDecimal!]
  maxPrincipalPerCollateralStdDev: BigDecimal
  maxPrincipalPerCollateralStdDev_gt: BigDecimal
  maxPrincipalPerCollateralStdDev_gte: BigDecimal
  maxPrincipalPerCollateralStdDev_in: [BigDecimal!]
  maxPrincipalPerCollateralStdDev_lt: BigDecimal
  maxPrincipalPerCollateralStdDev_lte: BigDecimal
  maxPrincipalPerCollateralStdDev_not: BigDecimal
  maxPrincipalPerCollateralStdDev_not_in: [BigDecimal!]
  minApyMean: BigDecimal
  minApyMean_gt: BigDecimal
  minApyMean_gte: BigDecimal
  minApyMean_in: [BigDecimal!]
  minApyMean_lt: BigDecimal
  minApyMean_lte: BigDecimal
  minApyMean_not: BigDecimal
  minApyMean_not_in: [BigDecimal!]
  minApyStdDev: BigDecimal
  minApyStdDev_gt: BigDecimal
  minApyStdDev_gte: BigDecimal
  minApyStdDev_in: [BigDecimal!]
  minApyStdDev_lt: BigDecimal
  minApyStdDev_lte: BigDecimal
  minApyStdDev_not: BigDecimal
  minApyStdDev_not_in: [BigDecimal!]
  or: [MarketCommitmentStdDev_filter]
}

input MarketPlace_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  and: [MarketPlace_filter]
  bidExpirationTime: BigInt
  bidExpirationTime_gt: BigInt
  bidExpirationTime_gte: BigInt
  bidExpirationTime_in: [BigInt!]
  bidExpirationTime_lt: BigInt
  bidExpirationTime_lte: BigInt
  bidExpirationTime_not: BigInt
  bidExpirationTime_not_in: [BigInt!]
  borrowerAttestationRequired: Boolean
  borrowerAttestationRequired_in: [Boolean!]
  borrowerAttestationRequired_not: Boolean
  borrowerAttestationRequired_not_in: [Boolean!]
  borrowers_: Borrower_filter
  commitments_: Commitment_filter
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  feeRecipient: Bytes
  feeRecipient_contains: Bytes
  feeRecipient_gt: Bytes
  feeRecipient_gte: Bytes
  feeRecipient_in: [Bytes!]
  feeRecipient_lt: Bytes
  feeRecipient_lte: Bytes
  feeRecipient_not: Bytes
  feeRecipient_not_contains: Bytes
  feeRecipient_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isMarketOpen: Boolean
  isMarketOpen_in: [Boolean!]
  isMarketOpen_not: Boolean
  isMarketOpen_not_in: [Boolean!]
  lenderAttestationRequired: Boolean
  lenderAttestationRequired_in: [Boolean!]
  lenderAttestationRequired_not: Boolean
  lenderAttestationRequired_not_in: [Boolean!]
  lenders_: Lender_filter
  loans_: LoanStatusCount_filter
  marketplaceFeePercent: BigInt
  marketplaceFeePercent_gt: BigInt
  marketplaceFeePercent_gte: BigInt
  marketplaceFeePercent_in: [BigInt!]
  marketplaceFeePercent_lt: BigInt
  marketplaceFeePercent_lte: BigInt
  marketplaceFeePercent_not: BigInt
  marketplaceFeePercent_not_in: [BigInt!]
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  metadataURI: String
  metadataURI_contains: String
  metadataURI_contains_nocase: String
  metadataURI_ends_with: String
  metadataURI_ends_with_nocase: String
  metadataURI_gt: String
  metadataURI_gte: String
  metadataURI_in: [String!]
  metadataURI_lt: String
  metadataURI_lte: String
  metadataURI_not: String
  metadataURI_not_contains: String
  metadataURI_not_contains_nocase: String
  metadataURI_not_ends_with: String
  metadataURI_not_ends_with_nocase: String
  metadataURI_not_in: [String!]
  metadataURI_not_starts_with: String
  metadataURI_not_starts_with_nocase: String
  metadataURI_starts_with: String
  metadataURI_starts_with_nocase: String
  or: [MarketPlace_filter]
  owner: Bytes
  owner_contains: Bytes
  owner_gt: Bytes
  owner_gte: Bytes
  owner_in: [Bytes!]
  owner_lt: Bytes
  owner_lte: Bytes
  owner_not: Bytes
  owner_not_contains: Bytes
  owner_not_in: [Bytes!]
  paymentCycleDuration: BigInt
  paymentCycleDuration_gt: BigInt
  paymentCycleDuration_gte: BigInt
  paymentCycleDuration_in: [BigInt!]
  paymentCycleDuration_lt: BigInt
  paymentCycleDuration_lte: BigInt
  paymentCycleDuration_not: BigInt
  paymentCycleDuration_not_in: [BigInt!]
  paymentCycleType: String
  paymentCycleType_contains: String
  paymentCycleType_contains_nocase: String
  paymentCycleType_ends_with: String
  paymentCycleType_ends_with_nocase: String
  paymentCycleType_gt: String
  paymentCycleType_gte: String
  paymentCycleType_in: [String!]
  paymentCycleType_lt: String
  paymentCycleType_lte: String
  paymentCycleType_not: String
  paymentCycleType_not_contains: String
  paymentCycleType_not_contains_nocase: String
  paymentCycleType_not_ends_with: String
  paymentCycleType_not_ends_with_nocase: String
  paymentCycleType_not_in: [String!]
  paymentCycleType_not_starts_with: String
  paymentCycleType_not_starts_with_nocase: String
  paymentCycleType_starts_with: String
  paymentCycleType_starts_with_nocase: String
  paymentDefaultDuration: BigInt
  paymentDefaultDuration_gt: BigInt
  paymentDefaultDuration_gte: BigInt
  paymentDefaultDuration_in: [BigInt!]
  paymentDefaultDuration_lt: BigInt
  paymentDefaultDuration_lte: BigInt
  paymentDefaultDuration_not: BigInt
  paymentDefaultDuration_not_in: [BigInt!]
  paymentType: String
  paymentType_contains: String
  paymentType_contains_nocase: String
  paymentType_ends_with: String
  paymentType_ends_with_nocase: String
  paymentType_gt: String
  paymentType_gte: String
  paymentType_in: [String!]
  paymentType_lt: String
  paymentType_lte: String
  paymentType_not: String
  paymentType_not_contains: String
  paymentType_not_contains_nocase: String
  paymentType_not_ends_with: String
  paymentType_not_ends_with_nocase: String
  paymentType_not_in: [String!]
  paymentType_not_starts_with: String
  paymentType_not_starts_with_nocase: String
  paymentType_starts_with: String
  paymentType_starts_with_nocase: String
  tokenVolumes_: TokenVolume_filter
  totalNumberOfLenders: BigInt
  totalNumberOfLenders_gt: BigInt
  totalNumberOfLenders_gte: BigInt
  totalNumberOfLenders_in: [BigInt!]
  totalNumberOfLenders_lt: BigInt
  totalNumberOfLenders_lte: BigInt
  totalNumberOfLenders_not: BigInt
  totalNumberOfLenders_not_in: [BigInt!]
}

input Payment_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [Payment_filter]
  bid: String
  bid_: Bid_filter
  bid_contains: String
  bid_contains_nocase: String
  bid_ends_with: String
  bid_ends_with_nocase: String
  bid_gt: String
  bid_gte: String
  bid_in: [String!]
  bid_lt: String
  bid_lte: String
  bid_not: String
  bid_not_contains: String
  bid_not_contains_nocase: String
  bid_not_ends_with: String
  bid_not_ends_with_nocase: String
  bid_not_in: [String!]
  bid_not_starts_with: String
  bid_not_starts_with_nocase: String
  bid_starts_with: String
  bid_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  interest: BigInt
  interest_gt: BigInt
  interest_gte: BigInt
  interest_in: [BigInt!]
  interest_lt: BigInt
  interest_lte: BigInt
  interest_not: BigInt
  interest_not_in: [BigInt!]
  or: [Payment_filter]
  outstandingCapital: BigInt
  outstandingCapital_gt: BigInt
  outstandingCapital_gte: BigInt
  outstandingCapital_in: [BigInt!]
  outstandingCapital_lt: BigInt
  outstandingCapital_lte: BigInt
  outstandingCapital_not: BigInt
  outstandingCapital_not_in: [BigInt!]
  paymentDate: BigInt
  paymentDate_gt: BigInt
  paymentDate_gte: BigInt
  paymentDate_in: [BigInt!]
  paymentDate_lt: BigInt
  paymentDate_lte: BigInt
  paymentDate_not: BigInt
  paymentDate_not_in: [BigInt!]
  principal: BigInt
  principal_gt: BigInt
  principal_gte: BigInt
  principal_in: [BigInt!]
  principal_lt: BigInt
  principal_lte: BigInt
  principal_not: BigInt
  principal_not_in: [BigInt!]
  status: String
  status_contains: String
  status_contains_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
}

input ProtocolCollateral_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [ProtocolCollateral_filter]
  collateralToken: String
  collateralToken_: Token_filter
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_gt: String
  collateralToken_gte: String
  collateralToken_in: [String!]
  collateralToken_lt: String
  collateralToken_lte: String
  collateralToken_not: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_not_in: [String!]
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [ProtocolCollateral_filter]
  tokenVolumesByLendingToken_: TokenVolume_filter
}

input Protocol_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  activeCommitments: [String!]
  activeCommitments_: Commitment_filter
  activeCommitments_contains: [String!]
  activeCommitments_contains_nocase: [String!]
  activeCommitments_not: [String!]
  activeCommitments_not_contains: [String!]
  activeCommitments_not_contains_nocase: [String!]
  activeRewards: [String!]
  activeRewards_: RewardAllocation_filter
  activeRewards_contains: [String!]
  activeRewards_contains_nocase: [String!]
  activeRewards_not: [String!]
  activeRewards_not_contains: [String!]
  activeRewards_not_contains_nocase: [String!]
  and: [Protocol_filter]
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  loans_: LoanStatusCount_filter
  or: [Protocol_filter]
  tokenVolumes_: TokenVolume_filter
}

input RewardAllocation_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  allocationStrategy: String
  allocationStrategy_contains: String
  allocationStrategy_contains_nocase: String
  allocationStrategy_ends_with: String
  allocationStrategy_ends_with_nocase: String
  allocationStrategy_gt: String
  allocationStrategy_gte: String
  allocationStrategy_in: [String!]
  allocationStrategy_lt: String
  allocationStrategy_lte: String
  allocationStrategy_not: String
  allocationStrategy_not_contains: String
  allocationStrategy_not_contains_nocase: String
  allocationStrategy_not_ends_with: String
  allocationStrategy_not_ends_with_nocase: String
  allocationStrategy_not_in: [String!]
  allocationStrategy_not_starts_with: String
  allocationStrategy_not_starts_with_nocase: String
  allocationStrategy_starts_with: String
  allocationStrategy_starts_with_nocase: String
  allocator: String
  allocatorAddress: Bytes
  allocatorAddress_contains: Bytes
  allocatorAddress_gt: Bytes
  allocatorAddress_gte: Bytes
  allocatorAddress_in: [Bytes!]
  allocatorAddress_lt: Bytes
  allocatorAddress_lte: Bytes
  allocatorAddress_not: Bytes
  allocatorAddress_not_contains: Bytes
  allocatorAddress_not_in: [Bytes!]
  allocator_: User_filter
  allocator_contains: String
  allocator_contains_nocase: String
  allocator_ends_with: String
  allocator_ends_with_nocase: String
  allocator_gt: String
  allocator_gte: String
  allocator_in: [String!]
  allocator_lt: String
  allocator_lte: String
  allocator_not: String
  allocator_not_contains: String
  allocator_not_contains_nocase: String
  allocator_not_ends_with: String
  allocator_not_ends_with_nocase: String
  allocator_not_in: [String!]
  allocator_not_starts_with: String
  allocator_not_starts_with_nocase: String
  allocator_starts_with: String
  allocator_starts_with_nocase: String
  and: [RewardAllocation_filter]
  bidRewards: [String!]
  bidRewards_: BidReward_filter
  bidRewards_contains: [String!]
  bidRewards_contains_nocase: [String!]
  bidRewards_not: [String!]
  bidRewards_not_contains: [String!]
  bidRewards_not_contains_nocase: [String!]
  bidStartTimeMax: BigInt
  bidStartTimeMax_gt: BigInt
  bidStartTimeMax_gte: BigInt
  bidStartTimeMax_in: [BigInt!]
  bidStartTimeMax_lt: BigInt
  bidStartTimeMax_lte: BigInt
  bidStartTimeMax_not: BigInt
  bidStartTimeMax_not_in: [BigInt!]
  bidStartTimeMin: BigInt
  bidStartTimeMin_gt: BigInt
  bidStartTimeMin_gte: BigInt
  bidStartTimeMin_in: [BigInt!]
  bidStartTimeMin_lt: BigInt
  bidStartTimeMin_lte: BigInt
  bidStartTimeMin_not: BigInt
  bidStartTimeMin_not_in: [BigInt!]
  commitmentRewards_: CommitmentReward_filter
  createdAt: BigInt
  createdAt_gt: BigInt
  createdAt_gte: BigInt
  createdAt_in: [BigInt!]
  createdAt_lt: BigInt
  createdAt_lte: BigInt
  createdAt_not: BigInt
  createdAt_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marketplace: String
  marketplaceId: BigInt
  marketplaceId_gt: BigInt
  marketplaceId_gte: BigInt
  marketplaceId_in: [BigInt!]
  marketplaceId_lt: BigInt
  marketplaceId_lte: BigInt
  marketplaceId_not: BigInt
  marketplaceId_not_in: [BigInt!]
  marketplace_: MarketPlace_filter
  marketplace_contains: String
  marketplace_contains_nocase: String
  marketplace_ends_with: String
  marketplace_ends_with_nocase: String
  marketplace_gt: String
  marketplace_gte: String
  marketplace_in: [String!]
  marketplace_lt: String
  marketplace_lte: String
  marketplace_not: String
  marketplace_not_contains: String
  marketplace_not_contains_nocase: String
  marketplace_not_ends_with: String
  marketplace_not_ends_with_nocase: String
  marketplace_not_in: [String!]
  marketplace_not_starts_with: String
  marketplace_not_starts_with_nocase: String
  marketplace_starts_with: String
  marketplace_starts_with_nocase: String
  minimumCollateralPerPrincipalAmount: BigInt
  minimumCollateralPerPrincipalAmount_gt: BigInt
  minimumCollateralPerPrincipalAmount_gte: BigInt
  minimumCollateralPerPrincipalAmount_in: [BigInt!]
  minimumCollateralPerPrincipalAmount_lt: BigInt
  minimumCollateralPerPrincipalAmount_lte: BigInt
  minimumCollateralPerPrincipalAmount_not: BigInt
  minimumCollateralPerPrincipalAmount_not_in: [BigInt!]
  or: [RewardAllocation_filter]
  requiredCollateralTokenAddress: Bytes
  requiredCollateralTokenAddress_contains: Bytes
  requiredCollateralTokenAddress_gt: Bytes
  requiredCollateralTokenAddress_gte: Bytes
  requiredCollateralTokenAddress_in: [Bytes!]
  requiredCollateralTokenAddress_lt: Bytes
  requiredCollateralTokenAddress_lte: Bytes
  requiredCollateralTokenAddress_not: Bytes
  requiredCollateralTokenAddress_not_contains: Bytes
  requiredCollateralTokenAddress_not_in: [Bytes!]
  requiredPrincipalTokenAddress: Bytes
  requiredPrincipalTokenAddress_contains: Bytes
  requiredPrincipalTokenAddress_gt: Bytes
  requiredPrincipalTokenAddress_gte: Bytes
  requiredPrincipalTokenAddress_in: [Bytes!]
  requiredPrincipalTokenAddress_lt: Bytes
  requiredPrincipalTokenAddress_lte: Bytes
  requiredPrincipalTokenAddress_not: Bytes
  requiredPrincipalTokenAddress_not_contains: Bytes
  requiredPrincipalTokenAddress_not_in: [Bytes!]
  rewardPerLoanPrincipalAmount: BigInt
  rewardPerLoanPrincipalAmount_gt: BigInt
  rewardPerLoanPrincipalAmount_gte: BigInt
  rewardPerLoanPrincipalAmount_in: [BigInt!]
  rewardPerLoanPrincipalAmount_lt: BigInt
  rewardPerLoanPrincipalAmount_lte: BigInt
  rewardPerLoanPrincipalAmount_not: BigInt
  rewardPerLoanPrincipalAmount_not_in: [BigInt!]
  rewardToken: String
  rewardTokenAddress: Bytes
  rewardTokenAddress_contains: Bytes
  rewardTokenAddress_gt: Bytes
  rewardTokenAddress_gte: Bytes
  rewardTokenAddress_in: [Bytes!]
  rewardTokenAddress_lt: Bytes
  rewardTokenAddress_lte: Bytes
  rewardTokenAddress_not: Bytes
  rewardTokenAddress_not_contains: Bytes
  rewardTokenAddress_not_in: [Bytes!]
  rewardTokenAmountInitial: BigInt
  rewardTokenAmountInitial_gt: BigInt
  rewardTokenAmountInitial_gte: BigInt
  rewardTokenAmountInitial_in: [BigInt!]
  rewardTokenAmountInitial_lt: BigInt
  rewardTokenAmountInitial_lte: BigInt
  rewardTokenAmountInitial_not: BigInt
  rewardTokenAmountInitial_not_in: [BigInt!]
  rewardTokenAmountRemaining: BigInt
  rewardTokenAmountRemaining_gt: BigInt
  rewardTokenAmountRemaining_gte: BigInt
  rewardTokenAmountRemaining_in: [BigInt!]
  rewardTokenAmountRemaining_lt: BigInt
  rewardTokenAmountRemaining_lte: BigInt
  rewardTokenAmountRemaining_not: BigInt
  rewardTokenAmountRemaining_not_in: [BigInt!]
  rewardToken_: Token_filter
  rewardToken_contains: String
  rewardToken_contains_nocase: String
  rewardToken_ends_with: String
  rewardToken_ends_with_nocase: String
  rewardToken_gt: String
  rewardToken_gte: String
  rewardToken_in: [String!]
  rewardToken_lt: String
  rewardToken_lte: String
  rewardToken_not: String
  rewardToken_not_contains: String
  rewardToken_not_contains_nocase: String
  rewardToken_not_ends_with: String
  rewardToken_not_ends_with_nocase: String
  rewardToken_not_in: [String!]
  rewardToken_not_starts_with: String
  rewardToken_not_starts_with_nocase: String
  rewardToken_starts_with: String
  rewardToken_starts_with_nocase: String
  status: String
  status_contains: String
  status_contains_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_gt: String
  status_gte: String
  status_in: [String!]
  status_lt: String
  status_lte: String
  status_not: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_not_in: [String!]
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  tokenVolume: String
  tokenVolume_: TokenVolume_filter
  tokenVolume_contains: String
  tokenVolume_contains_nocase: String
  tokenVolume_ends_with: String
  tokenVolume_ends_with_nocase: String
  tokenVolume_gt: String
  tokenVolume_gte: String
  tokenVolume_in: [String!]
  tokenVolume_lt: String
  tokenVolume_lte: String
  tokenVolume_not: String
  tokenVolume_not_contains: String
  tokenVolume_not_contains_nocase: String
  tokenVolume_not_ends_with: String
  tokenVolume_not_ends_with_nocase: String
  tokenVolume_not_in: [String!]
  tokenVolume_not_starts_with: String
  tokenVolume_not_starts_with_nocase: String
  tokenVolume_starts_with: String
  tokenVolume_starts_with_nocase: String
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

input TokenVolume_filter {
  _aprActiveWeightedTotal: BigInt
  _aprActiveWeightedTotal_gt: BigInt
  _aprActiveWeightedTotal_gte: BigInt
  _aprActiveWeightedTotal_in: [BigInt!]
  _aprActiveWeightedTotal_lt: BigInt
  _aprActiveWeightedTotal_lte: BigInt
  _aprActiveWeightedTotal_not: BigInt
  _aprActiveWeightedTotal_not_in: [BigInt!]
  _aprWeightedTotal: BigInt
  _aprWeightedTotal_gt: BigInt
  _aprWeightedTotal_gte: BigInt
  _aprWeightedTotal_in: [BigInt!]
  _aprWeightedTotal_lt: BigInt
  _aprWeightedTotal_lte: BigInt
  _aprWeightedTotal_not: BigInt
  _aprWeightedTotal_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  _durationTotal: BigInt
  _durationTotal_gt: BigInt
  _durationTotal_gte: BigInt
  _durationTotal_in: [BigInt!]
  _durationTotal_lt: BigInt
  _durationTotal_lte: BigInt
  _durationTotal_not: BigInt
  _durationTotal_not_in: [BigInt!]
  _linkedParentTokenVolume: String
  _linkedParentTokenVolume_: TokenVolume_filter
  _linkedParentTokenVolume_contains: String
  _linkedParentTokenVolume_contains_nocase: String
  _linkedParentTokenVolume_ends_with: String
  _linkedParentTokenVolume_ends_with_nocase: String
  _linkedParentTokenVolume_gt: String
  _linkedParentTokenVolume_gte: String
  _linkedParentTokenVolume_in: [String!]
  _linkedParentTokenVolume_lt: String
  _linkedParentTokenVolume_lte: String
  _linkedParentTokenVolume_not: String
  _linkedParentTokenVolume_not_contains: String
  _linkedParentTokenVolume_not_contains_nocase: String
  _linkedParentTokenVolume_not_ends_with: String
  _linkedParentTokenVolume_not_ends_with_nocase: String
  _linkedParentTokenVolume_not_in: [String!]
  _linkedParentTokenVolume_not_starts_with: String
  _linkedParentTokenVolume_not_starts_with_nocase: String
  _linkedParentTokenVolume_starts_with: String
  _linkedParentTokenVolume_starts_with_nocase: String
  _loanAcceptedCount: BigInt
  _loanAcceptedCount_gt: BigInt
  _loanAcceptedCount_gte: BigInt
  _loanAcceptedCount_in: [BigInt!]
  _loanAcceptedCount_lt: BigInt
  _loanAcceptedCount_lte: BigInt
  _loanAcceptedCount_not: BigInt
  _loanAcceptedCount_not_in: [BigInt!]
  _protocolCollateral: String
  _protocolCollateral_: ProtocolCollateral_filter
  _protocolCollateral_contains: String
  _protocolCollateral_contains_nocase: String
  _protocolCollateral_ends_with: String
  _protocolCollateral_ends_with_nocase: String
  _protocolCollateral_gt: String
  _protocolCollateral_gte: String
  _protocolCollateral_in: [String!]
  _protocolCollateral_lt: String
  _protocolCollateral_lte: String
  _protocolCollateral_not: String
  _protocolCollateral_not_contains: String
  _protocolCollateral_not_contains_nocase: String
  _protocolCollateral_not_ends_with: String
  _protocolCollateral_not_ends_with_nocase: String
  _protocolCollateral_not_in: [String!]
  _protocolCollateral_not_starts_with: String
  _protocolCollateral_not_starts_with_nocase: String
  _protocolCollateral_starts_with: String
  _protocolCollateral_starts_with_nocase: String
  allocatedRewards_: RewardAllocation_filter
  and: [TokenVolume_filter]
  aprActiveAverage: BigInt
  aprActiveAverage_gt: BigInt
  aprActiveAverage_gte: BigInt
  aprActiveAverage_in: [BigInt!]
  aprActiveAverage_lt: BigInt
  aprActiveAverage_lte: BigInt
  aprActiveAverage_not: BigInt
  aprActiveAverage_not_in: [BigInt!]
  aprAverage: BigInt
  aprAverage_gt: BigInt
  aprAverage_gte: BigInt
  aprAverage_in: [BigInt!]
  aprAverage_lt: BigInt
  aprAverage_lte: BigInt
  aprAverage_not: BigInt
  aprAverage_not_in: [BigInt!]
  borrower: String
  borrower_: Borrower_filter
  borrower_contains: String
  borrower_contains_nocase: String
  borrower_ends_with: String
  borrower_ends_with_nocase: String
  borrower_gt: String
  borrower_gte: String
  borrower_in: [String!]
  borrower_lt: String
  borrower_lte: String
  borrower_not: String
  borrower_not_contains: String
  borrower_not_contains_nocase: String
  borrower_not_ends_with: String
  borrower_not_ends_with_nocase: String
  borrower_not_in: [String!]
  borrower_not_starts_with: String
  borrower_not_starts_with_nocase: String
  borrower_starts_with: String
  borrower_starts_with_nocase: String
  collateralToken: String
  collateralToken_: Token_filter
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_gt: String
  collateralToken_gte: String
  collateralToken_in: [String!]
  collateralToken_lt: String
  collateralToken_lte: String
  collateralToken_not: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_not_in: [String!]
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  commissionEarned: BigInt
  commissionEarned_gt: BigInt
  commissionEarned_gte: BigInt
  commissionEarned_in: [BigInt!]
  commissionEarned_lt: BigInt
  commissionEarned_lte: BigInt
  commissionEarned_not: BigInt
  commissionEarned_not_in: [BigInt!]
  durationAverage: BigInt
  durationAverage_gt: BigInt
  durationAverage_gte: BigInt
  durationAverage_in: [BigInt!]
  durationAverage_lt: BigInt
  durationAverage_lte: BigInt
  durationAverage_not: BigInt
  durationAverage_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lender: String
  lender_: Lender_filter
  lender_contains: String
  lender_contains_nocase: String
  lender_ends_with: String
  lender_ends_with_nocase: String
  lender_gt: String
  lender_gte: String
  lender_in: [String!]
  lender_lt: String
  lender_lte: String
  lender_not: String
  lender_not_contains: String
  lender_not_contains_nocase: String
  lender_not_ends_with: String
  lender_not_ends_with_nocase: String
  lender_not_in: [String!]
  lender_not_starts_with: String
  lender_not_starts_with_nocase: String
  lender_starts_with: String
  lender_starts_with_nocase: String
  lendingTokenAddress: Bytes
  lendingTokenAddress_contains: Bytes
  lendingTokenAddress_gt: Bytes
  lendingTokenAddress_gte: Bytes
  lendingTokenAddress_in: [Bytes!]
  lendingTokenAddress_lt: Bytes
  lendingTokenAddress_lte: Bytes
  lendingTokenAddress_not: Bytes
  lendingTokenAddress_not_contains: Bytes
  lendingTokenAddress_not_in: [Bytes!]
  loanAverage: BigInt
  loanAverage_gt: BigInt
  loanAverage_gte: BigInt
  loanAverage_in: [BigInt!]
  loanAverage_lt: BigInt
  loanAverage_lte: BigInt
  loanAverage_not: BigInt
  loanAverage_not_in: [BigInt!]
  loans_: LoanStatusCount_filter
  market: String
  market_: MarketPlace_filter
  market_contains: String
  market_contains_nocase: String
  market_ends_with: String
  market_ends_with_nocase: String
  market_gt: String
  market_gte: String
  market_in: [String!]
  market_lt: String
  market_lte: String
  market_not: String
  market_not_contains: String
  market_not_contains_nocase: String
  market_not_ends_with: String
  market_not_ends_with_nocase: String
  market_not_in: [String!]
  market_not_starts_with: String
  market_not_starts_with_nocase: String
  market_starts_with: String
  market_starts_with_nocase: String
  or: [TokenVolume_filter]
  outstandingCapital: BigInt
  outstandingCapital_gt: BigInt
  outstandingCapital_gte: BigInt
  outstandingCapital_in: [BigInt!]
  outstandingCapital_lt: BigInt
  outstandingCapital_lte: BigInt
  outstandingCapital_not: BigInt
  outstandingCapital_not_in: [BigInt!]
  protocol: String
  protocol_: Protocol_filter
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_gt: String
  protocol_gte: String
  protocol_in: [String!]
  protocol_lt: String
  protocol_lte: String
  protocol_not: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_not_in: [String!]
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  token: String
  tokenVolumeByCollateral_: TokenVolume_filter
  token_: Token_filter
  token_contains: String
  token_contains_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_gt: String
  token_gte: String
  token_in: [String!]
  token_lt: String
  token_lte: String
  token_not: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_not_in: [String!]
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  totalAccepted: BigInt
  totalAccepted_gt: BigInt
  totalAccepted_gte: BigInt
  totalAccepted_in: [BigInt!]
  totalAccepted_lt: BigInt
  totalAccepted_lte: BigInt
  totalAccepted_not: BigInt
  totalAccepted_not_in: [BigInt!]
  totalActive: BigInt
  totalActive_gt: BigInt
  totalActive_gte: BigInt
  totalActive_in: [BigInt!]
  totalActive_lt: BigInt
  totalActive_lte: BigInt
  totalActive_not: BigInt
  totalActive_not_in: [BigInt!]
  totalAvailable: BigInt
  totalAvailable_gt: BigInt
  totalAvailable_gte: BigInt
  totalAvailable_in: [BigInt!]
  totalAvailable_lt: BigInt
  totalAvailable_lte: BigInt
  totalAvailable_not: BigInt
  totalAvailable_not_in: [BigInt!]
  totalDefaulted: BigInt
  totalDefaulted_gt: BigInt
  totalDefaulted_gte: BigInt
  totalDefaulted_in: [BigInt!]
  totalDefaulted_lt: BigInt
  totalDefaulted_lte: BigInt
  totalDefaulted_not: BigInt
  totalDefaulted_not_in: [BigInt!]
  totalDueSoon: BigInt
  totalDueSoon_gt: BigInt
  totalDueSoon_gte: BigInt
  totalDueSoon_in: [BigInt!]
  totalDueSoon_lt: BigInt
  totalDueSoon_lte: BigInt
  totalDueSoon_not: BigInt
  totalDueSoon_not_in: [BigInt!]
  totalLate: BigInt
  totalLate_gt: BigInt
  totalLate_gte: BigInt
  totalLate_in: [BigInt!]
  totalLate_lt: BigInt
  totalLate_lte: BigInt
  totalLate_not: BigInt
  totalLate_not_in: [BigInt!]
  totalLiquidated: BigInt
  totalLiquidated_gt: BigInt
  totalLiquidated_gte: BigInt
  totalLiquidated_in: [BigInt!]
  totalLiquidated_lt: BigInt
  totalLiquidated_lte: BigInt
  totalLiquidated_not: BigInt
  totalLiquidated_not_in: [BigInt!]
  totalLoaned: BigInt
  totalLoaned_gt: BigInt
  totalLoaned_gte: BigInt
  totalLoaned_in: [BigInt!]
  totalLoaned_lt: BigInt
  totalLoaned_lte: BigInt
  totalLoaned_not: BigInt
  totalLoaned_not_in: [BigInt!]
  totalRepaid: BigInt
  totalRepaidInterest: BigInt
  totalRepaidInterest_gt: BigInt
  totalRepaidInterest_gte: BigInt
  totalRepaidInterest_in: [BigInt!]
  totalRepaidInterest_lt: BigInt
  totalRepaidInterest_lte: BigInt
  totalRepaidInterest_not: BigInt
  totalRepaidInterest_not_in: [BigInt!]
  totalRepaid_gt: BigInt
  totalRepaid_gte: BigInt
  totalRepaid_in: [BigInt!]
  totalRepaid_lt: BigInt
  totalRepaid_lte: BigInt
  totalRepaid_not: BigInt
  totalRepaid_not_in: [BigInt!]
}

input Token_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  address: Bytes
  address_contains: Bytes
  address_gt: Bytes
  address_gte: Bytes
  address_in: [Bytes!]
  address_lt: Bytes
  address_lte: Bytes
  address_not: Bytes
  address_not_contains: Bytes
  address_not_in: [Bytes!]
  and: [Token_filter]
  decimals: BigInt
  decimals_gt: BigInt
  decimals_gte: BigInt
  decimals_in: [BigInt!]
  decimals_lt: BigInt
  decimals_lte: BigInt
  decimals_not: BigInt
  decimals_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  nftId: BigInt
  nftId_gt: BigInt
  nftId_gte: BigInt
  nftId_in: [BigInt!]
  nftId_lt: BigInt
  nftId_lte: BigInt
  nftId_not: BigInt
  nftId_not_in: [BigInt!]
  or: [Token_filter]
  symbol: String
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
}

input User_filter {
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [User_filter]
  bidRewards_: BidReward_filter
  borrowers_: Borrower_filter
  firstInteractionDate: BigInt
  firstInteractionDate_gt: BigInt
  firstInteractionDate_gte: BigInt
  firstInteractionDate_in: [BigInt!]
  firstInteractionDate_lt: BigInt
  firstInteractionDate_lte: BigInt
  firstInteractionDate_not: BigInt
  firstInteractionDate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lenders_: Lender_filter
  or: [User_filter]
}
