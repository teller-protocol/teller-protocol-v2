// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollateralClaimed extends ethereum.Event {
  get params(): CollateralClaimed__Params {
    return new CollateralClaimed__Params(this);
  }
}

export class CollateralClaimed__Params {
  _event: CollateralClaimed;

  constructor(event: CollateralClaimed) {
    this._event = event;
  }

  get _bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CollateralCommitted extends ethereum.Event {
  get params(): CollateralCommitted__Params {
    return new CollateralCommitted__Params(this);
  }
}

export class CollateralCommitted__Params {
  _event: CollateralCommitted;

  constructor(event: CollateralCommitted) {
    this._event = event;
  }

  get _bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _type(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _collateralAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollateralDeposited extends ethereum.Event {
  get params(): CollateralDeposited__Params {
    return new CollateralDeposited__Params(this);
  }
}

export class CollateralDeposited__Params {
  _event: CollateralDeposited;

  constructor(event: CollateralDeposited) {
    this._event = event;
  }

  get _bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _type(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _collateralAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CollateralEscrowDeployed extends ethereum.Event {
  get params(): CollateralEscrowDeployed__Params {
    return new CollateralEscrowDeployed__Params(this);
  }
}

export class CollateralEscrowDeployed__Params {
  _event: CollateralEscrowDeployed;

  constructor(event: CollateralEscrowDeployed) {
    this._event = event;
  }

  get _bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _collateralEscrow(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollateralWithdrawn extends ethereum.Event {
  get params(): CollateralWithdrawn__Params {
    return new CollateralWithdrawn__Params(this);
  }
}

export class CollateralWithdrawn__Params {
  _event: CollateralWithdrawn;

  constructor(event: CollateralWithdrawn) {
    this._event = event;
  }

  get _bidId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _type(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _collateralAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _recipient(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollateralManager__checkBalancesResult {
  value0: boolean;
  value1: Array<boolean>;

  constructor(value0: boolean, value1: Array<boolean>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBooleanArray(this.value1));
    return map;
  }

  getValidated_(): boolean {
    return this.value0;
  }

  getChecks_(): Array<boolean> {
    return this.value1;
  }
}

export class CollateralManager__checkBalancesInput_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CollateralManager__commitCollateralInput_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CollateralManager__commitCollateral1Input_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CollateralManager__getCollateralInfoResultInfos_Struct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CollateralManager extends ethereum.SmartContract {
  static bind(address: Address): CollateralManager {
    return new CollateralManager("CollateralManager", address);
  }

  _escrows(param0: BigInt): Address {
    let result = super.call("_escrows", "_escrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try__escrows(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("_escrows", "_escrows(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkBalances(
    _borrowerAddress: Address,
    _collateralInfo: Array<
      CollateralManager__checkBalancesInput_collateralInfoStruct
    >
  ): CollateralManager__checkBalancesResult {
    let result = super.call(
      "checkBalances",
      "checkBalances(address,(uint8,uint256,uint256,address)[]):(bool,bool[])",
      [
        ethereum.Value.fromAddress(_borrowerAddress),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );

    return new CollateralManager__checkBalancesResult(
      result[0].toBoolean(),
      result[1].toBooleanArray()
    );
  }

  try_checkBalances(
    _borrowerAddress: Address,
    _collateralInfo: Array<
      CollateralManager__checkBalancesInput_collateralInfoStruct
    >
  ): ethereum.CallResult<CollateralManager__checkBalancesResult> {
    let result = super.tryCall(
      "checkBalances",
      "checkBalances(address,(uint8,uint256,uint256,address)[]):(bool,bool[])",
      [
        ethereum.Value.fromAddress(_borrowerAddress),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollateralManager__checkBalancesResult(
        value[0].toBoolean(),
        value[1].toBooleanArray()
      )
    );
  }

  commitCollateral(
    _bidId: BigInt,
    _collateralInfo: Array<
      CollateralManager__commitCollateralInput_collateralInfoStruct
    >
  ): boolean {
    let result = super.call(
      "commitCollateral",
      "commitCollateral(uint256,(uint8,uint256,uint256,address)[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );

    return result[0].toBoolean();
  }

  try_commitCollateral(
    _bidId: BigInt,
    _collateralInfo: Array<
      CollateralManager__commitCollateralInput_collateralInfoStruct
    >
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "commitCollateral",
      "commitCollateral(uint256,(uint8,uint256,uint256,address)[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromTupleArray(_collateralInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  commitCollateral1(
    _bidId: BigInt,
    _collateralInfo: CollateralManager__commitCollateral1Input_collateralInfoStruct
  ): boolean {
    let result = super.call(
      "commitCollateral",
      "commitCollateral(uint256,(uint8,uint256,uint256,address)):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromTuple(_collateralInfo)
      ]
    );

    return result[0].toBoolean();
  }

  try_commitCollateral1(
    _bidId: BigInt,
    _collateralInfo: CollateralManager__commitCollateral1Input_collateralInfoStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "commitCollateral",
      "commitCollateral(uint256,(uint8,uint256,uint256,address)):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromTuple(_collateralInfo)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCollateralAmount(_bidId: BigInt, _collateralAddress: Address): BigInt {
    let result = super.call(
      "getCollateralAmount",
      "getCollateralAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromAddress(_collateralAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getCollateralAmount(
    _bidId: BigInt,
    _collateralAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralAmount",
      "getCollateralAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_bidId),
        ethereum.Value.fromAddress(_collateralAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralInfo(
    _bidId: BigInt
  ): Array<CollateralManager__getCollateralInfoResultInfos_Struct> {
    let result = super.call(
      "getCollateralInfo",
      "getCollateralInfo(uint256):((uint8,uint256,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toTupleArray<
      CollateralManager__getCollateralInfoResultInfos_Struct
    >();
  }

  try_getCollateralInfo(
    _bidId: BigInt
  ): ethereum.CallResult<
    Array<CollateralManager__getCollateralInfoResultInfos_Struct>
  > {
    let result = super.tryCall(
      "getCollateralInfo",
      "getCollateralInfo(uint256):((uint8,uint256,uint256,address)[])",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        CollateralManager__getCollateralInfoResultInfos_Struct
      >()
    );
  }

  getEscrow(_bidId: BigInt): Address {
    let result = super.call("getEscrow", "getEscrow(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);

    return result[0].toAddress();
  }

  try_getEscrow(_bidId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getEscrow", "getEscrow(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_bidId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isBidCollateralBacked(_bidId: BigInt): boolean {
    let result = super.call(
      "isBidCollateralBacked",
      "isBidCollateralBacked(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBoolean();
  }

  try_isBidCollateralBacked(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBidCollateralBacked",
      "isBidCollateralBacked(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    value: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    value: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  revalidateCollateral(_bidId: BigInt): boolean {
    let result = super.call(
      "revalidateCollateral",
      "revalidateCollateral(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );

    return result[0].toBoolean();
  }

  try_revalidateCollateral(_bidId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "revalidateCollateral",
      "revalidateCollateral(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_bidId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tellerV2(): Address {
    let result = super.call("tellerV2", "tellerV2():(address)", []);

    return result[0].toAddress();
  }

  try_tellerV2(): ethereum.CallResult<Address> {
    let result = super.tryCall("tellerV2", "tellerV2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CheckBalancesCall extends ethereum.Call {
  get inputs(): CheckBalancesCall__Inputs {
    return new CheckBalancesCall__Inputs(this);
  }

  get outputs(): CheckBalancesCall__Outputs {
    return new CheckBalancesCall__Outputs(this);
  }
}

export class CheckBalancesCall__Inputs {
  _call: CheckBalancesCall;

  constructor(call: CheckBalancesCall) {
    this._call = call;
  }

  get _borrowerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralInfo(): Array<CheckBalancesCall_collateralInfoStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CheckBalancesCall_collateralInfoStruct
    >();
  }
}

export class CheckBalancesCall__Outputs {
  _call: CheckBalancesCall;

  constructor(call: CheckBalancesCall) {
    this._call = call;
  }

  get validated_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get checks_(): Array<boolean> {
    return this._call.outputValues[1].value.toBooleanArray();
  }
}

export class CheckBalancesCall_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CommitCollateralCall extends ethereum.Call {
  get inputs(): CommitCollateralCall__Inputs {
    return new CommitCollateralCall__Inputs(this);
  }

  get outputs(): CommitCollateralCall__Outputs {
    return new CommitCollateralCall__Outputs(this);
  }
}

export class CommitCollateralCall__Inputs {
  _call: CommitCollateralCall;

  constructor(call: CommitCollateralCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateralInfo(): Array<CommitCollateralCall_collateralInfoStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      CommitCollateralCall_collateralInfoStruct
    >();
  }
}

export class CommitCollateralCall__Outputs {
  _call: CommitCollateralCall;

  constructor(call: CommitCollateralCall) {
    this._call = call;
  }

  get validation_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CommitCollateralCall_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class CommitCollateral1Call extends ethereum.Call {
  get inputs(): CommitCollateral1Call__Inputs {
    return new CommitCollateral1Call__Inputs(this);
  }

  get outputs(): CommitCollateral1Call__Outputs {
    return new CommitCollateral1Call__Outputs(this);
  }
}

export class CommitCollateral1Call__Inputs {
  _call: CommitCollateral1Call;

  constructor(call: CommitCollateral1Call) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateralInfo(): CommitCollateral1Call_collateralInfoStruct {
    return changetype<CommitCollateral1Call_collateralInfoStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class CommitCollateral1Call__Outputs {
  _call: CommitCollateral1Call;

  constructor(call: CommitCollateral1Call) {
    this._call = call;
  }

  get validation_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CommitCollateral1Call_collateralInfoStruct extends ethereum.Tuple {
  get _collateralType(): i32 {
    return this[0].toI32();
  }

  get _amount(): BigInt {
    return this[1].toBigInt();
  }

  get _tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get _collateralAddress(): Address {
    return this[3].toAddress();
  }
}

export class DeployAndDepositCall extends ethereum.Call {
  get inputs(): DeployAndDepositCall__Inputs {
    return new DeployAndDepositCall__Inputs(this);
  }

  get outputs(): DeployAndDepositCall__Outputs {
    return new DeployAndDepositCall__Outputs(this);
  }
}

export class DeployAndDepositCall__Inputs {
  _call: DeployAndDepositCall;

  constructor(call: DeployAndDepositCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DeployAndDepositCall__Outputs {
  _call: DeployAndDepositCall;

  constructor(call: DeployAndDepositCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _collateralEscrowBeacon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tellerV2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class IsBidCollateralBackedCall extends ethereum.Call {
  get inputs(): IsBidCollateralBackedCall__Inputs {
    return new IsBidCollateralBackedCall__Inputs(this);
  }

  get outputs(): IsBidCollateralBackedCall__Outputs {
    return new IsBidCollateralBackedCall__Outputs(this);
  }
}

export class IsBidCollateralBackedCall__Inputs {
  _call: IsBidCollateralBackedCall;

  constructor(call: IsBidCollateralBackedCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IsBidCollateralBackedCall__Outputs {
  _call: IsBidCollateralBackedCall;

  constructor(call: IsBidCollateralBackedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LenderClaimCollateralCall extends ethereum.Call {
  get inputs(): LenderClaimCollateralCall__Inputs {
    return new LenderClaimCollateralCall__Inputs(this);
  }

  get outputs(): LenderClaimCollateralCall__Outputs {
    return new LenderClaimCollateralCall__Outputs(this);
  }
}

export class LenderClaimCollateralCall__Inputs {
  _call: LenderClaimCollateralCall;

  constructor(call: LenderClaimCollateralCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LenderClaimCollateralCall__Outputs {
  _call: LenderClaimCollateralCall;

  constructor(call: LenderClaimCollateralCall) {
    this._call = call;
  }
}

export class LiquidateCollateralCall extends ethereum.Call {
  get inputs(): LiquidateCollateralCall__Inputs {
    return new LiquidateCollateralCall__Inputs(this);
  }

  get outputs(): LiquidateCollateralCall__Outputs {
    return new LiquidateCollateralCall__Outputs(this);
  }
}

export class LiquidateCollateralCall__Inputs {
  _call: LiquidateCollateralCall;

  constructor(call: LiquidateCollateralCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _liquidatorAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LiquidateCollateralCall__Outputs {
  _call: LiquidateCollateralCall;

  constructor(call: LiquidateCollateralCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RevalidateCollateralCall extends ethereum.Call {
  get inputs(): RevalidateCollateralCall__Inputs {
    return new RevalidateCollateralCall__Inputs(this);
  }

  get outputs(): RevalidateCollateralCall__Outputs {
    return new RevalidateCollateralCall__Outputs(this);
  }
}

export class RevalidateCollateralCall__Inputs {
  _call: RevalidateCollateralCall;

  constructor(call: RevalidateCollateralCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevalidateCollateralCall__Outputs {
  _call: RevalidateCollateralCall;

  constructor(call: RevalidateCollateralCall) {
    this._call = call;
  }

  get validation_(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetCollateralEscrowBeaconCall extends ethereum.Call {
  get inputs(): SetCollateralEscrowBeaconCall__Inputs {
    return new SetCollateralEscrowBeaconCall__Inputs(this);
  }

  get outputs(): SetCollateralEscrowBeaconCall__Outputs {
    return new SetCollateralEscrowBeaconCall__Outputs(this);
  }
}

export class SetCollateralEscrowBeaconCall__Inputs {
  _call: SetCollateralEscrowBeaconCall;

  constructor(call: SetCollateralEscrowBeaconCall) {
    this._call = call;
  }

  get _collateralEscrowBeacon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCollateralEscrowBeaconCall__Outputs {
  _call: SetCollateralEscrowBeaconCall;

  constructor(call: SetCollateralEscrowBeaconCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _bidId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
