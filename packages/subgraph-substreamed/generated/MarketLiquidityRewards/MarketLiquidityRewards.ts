// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedRewards extends ethereum.Event {
  get params(): ClaimedRewards__Params {
    return new ClaimedRewards__Params(this);
  }
}

export class ClaimedRewards__Params {
  _event: ClaimedRewards;

  constructor(event: ClaimedRewards) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bidId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CreatedAllocation extends ethereum.Event {
  get params(): CreatedAllocation__Params {
    return new CreatedAllocation__Params(this);
  }
}

export class CreatedAllocation__Params {
  _event: CreatedAllocation;

  constructor(event: CreatedAllocation) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get allocator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DecreasedAllocation extends ethereum.Event {
  get params(): DecreasedAllocation__Params {
    return new DecreasedAllocation__Params(this);
  }
}

export class DecreasedAllocation__Params {
  _event: DecreasedAllocation;

  constructor(event: DecreasedAllocation) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DeletedAllocation extends ethereum.Event {
  get params(): DeletedAllocation__Params {
    return new DeletedAllocation__Params(this);
  }
}

export class DeletedAllocation__Params {
  _event: DeletedAllocation;

  constructor(event: DeletedAllocation) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class IncreasedAllocation extends ethereum.Event {
  get params(): IncreasedAllocation__Params {
    return new IncreasedAllocation__Params(this);
  }
}

export class IncreasedAllocation__Params {
  _event: IncreasedAllocation;

  constructor(event: IncreasedAllocation) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class UpdatedAllocation extends ethereum.Event {
  get params(): UpdatedAllocation__Params {
    return new UpdatedAllocation__Params(this);
  }
}

export class UpdatedAllocation__Params {
  _event: UpdatedAllocation;

  constructor(event: UpdatedAllocation) {
    this._event = event;
  }

  get allocationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketLiquidityRewards__allocateRewardsInput_allocationStruct extends ethereum.Tuple {
  get allocator(): Address {
    return this[0].toAddress();
  }

  get rewardTokenAddress(): Address {
    return this[1].toAddress();
  }

  get rewardTokenAmount(): BigInt {
    return this[2].toBigInt();
  }

  get marketId(): BigInt {
    return this[3].toBigInt();
  }

  get requiredPrincipalTokenAddress(): Address {
    return this[4].toAddress();
  }

  get requiredCollateralTokenAddress(): Address {
    return this[5].toAddress();
  }

  get minimumCollateralPerPrincipalAmount(): BigInt {
    return this[6].toBigInt();
  }

  get rewardPerLoanPrincipalAmount(): BigInt {
    return this[7].toBigInt();
  }

  get bidStartTimeMin(): BigInt {
    return this[8].toBigInt();
  }

  get bidStartTimeMax(): BigInt {
    return this[9].toBigInt();
  }

  get allocationStrategy(): i32 {
    return this[10].toI32();
  }
}

export class MarketLiquidityRewards__allocatedRewardsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set(
      "value10",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value10))
    );
    return map;
  }

  getAllocator(): Address {
    return this.value0;
  }

  getRewardTokenAddress(): Address {
    return this.value1;
  }

  getRewardTokenAmount(): BigInt {
    return this.value2;
  }

  getMarketId(): BigInt {
    return this.value3;
  }

  getRequiredPrincipalTokenAddress(): Address {
    return this.value4;
  }

  getRequiredCollateralTokenAddress(): Address {
    return this.value5;
  }

  getMinimumCollateralPerPrincipalAmount(): BigInt {
    return this.value6;
  }

  getRewardPerLoanPrincipalAmount(): BigInt {
    return this.value7;
  }

  getBidStartTimeMin(): BigInt {
    return this.value8;
  }

  getBidStartTimeMax(): BigInt {
    return this.value9;
  }

  getAllocationStrategy(): i32 {
    return this.value10;
  }
}

export class MarketLiquidityRewards extends ethereum.SmartContract {
  static bind(address: Address): MarketLiquidityRewards {
    return new MarketLiquidityRewards("MarketLiquidityRewards", address);
  }

  allocateRewards(
    _allocation: MarketLiquidityRewards__allocateRewardsInput_allocationStruct
  ): BigInt {
    let result = super.call(
      "allocateRewards",
      "allocateRewards((address,address,uint256,uint256,address,address,uint256,uint256,uint32,uint32,uint8)):(uint256)",
      [ethereum.Value.fromTuple(_allocation)]
    );

    return result[0].toBigInt();
  }

  try_allocateRewards(
    _allocation: MarketLiquidityRewards__allocateRewardsInput_allocationStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allocateRewards",
      "allocateRewards((address,address,uint256,uint256,address,address,uint256,uint256,uint32,uint32,uint8)):(uint256)",
      [ethereum.Value.fromTuple(_allocation)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allocatedRewards(
    param0: BigInt
  ): MarketLiquidityRewards__allocatedRewardsResult {
    let result = super.call(
      "allocatedRewards",
      "allocatedRewards(uint256):(address,address,uint256,uint256,address,address,uint256,uint256,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new MarketLiquidityRewards__allocatedRewardsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toI32()
    );
  }

  try_allocatedRewards(
    param0: BigInt
  ): ethereum.CallResult<MarketLiquidityRewards__allocatedRewardsResult> {
    let result = super.tryCall(
      "allocatedRewards",
      "allocatedRewards(uint256):(address,address,uint256,uint256,address,address,uint256,uint256,uint32,uint32,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketLiquidityRewards__allocatedRewardsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toI32()
      )
    );
  }

  getRewardTokenAmount(_allocationId: BigInt): BigInt {
    let result = super.call(
      "getRewardTokenAmount",
      "getRewardTokenAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_allocationId)]
    );

    return result[0].toBigInt();
  }

  try_getRewardTokenAmount(_allocationId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRewardTokenAmount",
      "getRewardTokenAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_allocationId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardClaimedForBid(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "rewardClaimedForBid",
      "rewardClaimedForBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_rewardClaimedForBid(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rewardClaimedForBid",
      "rewardClaimedForBid(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tellerV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _marketRegistry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _collateralManager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllocateRewardsCall extends ethereum.Call {
  get inputs(): AllocateRewardsCall__Inputs {
    return new AllocateRewardsCall__Inputs(this);
  }

  get outputs(): AllocateRewardsCall__Outputs {
    return new AllocateRewardsCall__Outputs(this);
  }
}

export class AllocateRewardsCall__Inputs {
  _call: AllocateRewardsCall;

  constructor(call: AllocateRewardsCall) {
    this._call = call;
  }

  get _allocation(): AllocateRewardsCall_allocationStruct {
    return changetype<AllocateRewardsCall_allocationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AllocateRewardsCall__Outputs {
  _call: AllocateRewardsCall;

  constructor(call: AllocateRewardsCall) {
    this._call = call;
  }

  get allocationId_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AllocateRewardsCall_allocationStruct extends ethereum.Tuple {
  get allocator(): Address {
    return this[0].toAddress();
  }

  get rewardTokenAddress(): Address {
    return this[1].toAddress();
  }

  get rewardTokenAmount(): BigInt {
    return this[2].toBigInt();
  }

  get marketId(): BigInt {
    return this[3].toBigInt();
  }

  get requiredPrincipalTokenAddress(): Address {
    return this[4].toAddress();
  }

  get requiredCollateralTokenAddress(): Address {
    return this[5].toAddress();
  }

  get minimumCollateralPerPrincipalAmount(): BigInt {
    return this[6].toBigInt();
  }

  get rewardPerLoanPrincipalAmount(): BigInt {
    return this[7].toBigInt();
  }

  get bidStartTimeMin(): BigInt {
    return this[8].toBigInt();
  }

  get bidStartTimeMax(): BigInt {
    return this[9].toBigInt();
  }

  get allocationStrategy(): i32 {
    return this[10].toI32();
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get _allocationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bidId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DeallocateRewardsCall extends ethereum.Call {
  get inputs(): DeallocateRewardsCall__Inputs {
    return new DeallocateRewardsCall__Inputs(this);
  }

  get outputs(): DeallocateRewardsCall__Outputs {
    return new DeallocateRewardsCall__Outputs(this);
  }
}

export class DeallocateRewardsCall__Inputs {
  _call: DeallocateRewardsCall;

  constructor(call: DeallocateRewardsCall) {
    this._call = call;
  }

  get _allocationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeallocateRewardsCall__Outputs {
  _call: DeallocateRewardsCall;

  constructor(call: DeallocateRewardsCall) {
    this._call = call;
  }
}

export class IncreaseAllocationAmountCall extends ethereum.Call {
  get inputs(): IncreaseAllocationAmountCall__Inputs {
    return new IncreaseAllocationAmountCall__Inputs(this);
  }

  get outputs(): IncreaseAllocationAmountCall__Outputs {
    return new IncreaseAllocationAmountCall__Outputs(this);
  }
}

export class IncreaseAllocationAmountCall__Inputs {
  _call: IncreaseAllocationAmountCall;

  constructor(call: IncreaseAllocationAmountCall) {
    this._call = call;
  }

  get _allocationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllocationAmountCall__Outputs {
  _call: IncreaseAllocationAmountCall;

  constructor(call: IncreaseAllocationAmountCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateAllocationCall extends ethereum.Call {
  get inputs(): UpdateAllocationCall__Inputs {
    return new UpdateAllocationCall__Inputs(this);
  }

  get outputs(): UpdateAllocationCall__Outputs {
    return new UpdateAllocationCall__Outputs(this);
  }
}

export class UpdateAllocationCall__Inputs {
  _call: UpdateAllocationCall;

  constructor(call: UpdateAllocationCall) {
    this._call = call;
  }

  get _allocationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minimumCollateralPerPrincipalAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _rewardPerLoanPrincipalAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _bidStartTimeMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _bidStartTimeMax(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateAllocationCall__Outputs {
  _call: UpdateAllocationCall;

  constructor(call: UpdateAllocationCall) {
    this._call = call;
  }
}
