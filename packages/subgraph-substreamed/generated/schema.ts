// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class factory_admin_changed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save factory_admin_changed entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type factory_admin_changed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("factory_admin_changed", id.toString(), this);
    }
  }

  static loadInBlock(id: string): factory_admin_changed | null {
    return changetype<factory_admin_changed | null>(
      store.get_in_block("factory_admin_changed", id),
    );
  }

  static load(id: string): factory_admin_changed | null {
    return changetype<factory_admin_changed | null>(
      store.get("factory_admin_changed", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get new_admin(): Bytes {
    let value = this.get("new_admin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set new_admin(value: Bytes) {
    this.set("new_admin", Value.fromBytes(value));
  }

  get previous_admin(): Bytes {
    let value = this.get("previous_admin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previous_admin(value: Bytes) {
    this.set("previous_admin", Value.fromBytes(value));
  }
}

export class factory_beacon_upgraded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save factory_beacon_upgraded entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type factory_beacon_upgraded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("factory_beacon_upgraded", id.toString(), this);
    }
  }

  static loadInBlock(id: string): factory_beacon_upgraded | null {
    return changetype<factory_beacon_upgraded | null>(
      store.get_in_block("factory_beacon_upgraded", id),
    );
  }

  static load(id: string): factory_beacon_upgraded | null {
    return changetype<factory_beacon_upgraded | null>(
      store.get("factory_beacon_upgraded", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get beacon(): Bytes {
    let value = this.get("beacon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set beacon(value: Bytes) {
    this.set("beacon", Value.fromBytes(value));
  }
}

export class factory_deployed_lender_group_contract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save factory_deployed_lender_group_contract entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type factory_deployed_lender_group_contract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("factory_deployed_lender_group_contract", id.toString(), this);
    }
  }

  static loadInBlock(
    id: string,
  ): factory_deployed_lender_group_contract | null {
    return changetype<factory_deployed_lender_group_contract | null>(
      store.get_in_block("factory_deployed_lender_group_contract", id),
    );
  }

  static load(id: string): factory_deployed_lender_group_contract | null {
    return changetype<factory_deployed_lender_group_contract | null>(
      store.get("factory_deployed_lender_group_contract", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_contract(): Bytes {
    let value = this.get("group_contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_contract(value: Bytes) {
    this.set("group_contract", Value.fromBytes(value));
  }
}

export class factory_upgraded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save factory_upgraded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type factory_upgraded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("factory_upgraded", id.toString(), this);
    }
  }

  static loadInBlock(id: string): factory_upgraded | null {
    return changetype<factory_upgraded | null>(
      store.get_in_block("factory_upgraded", id),
    );
  }

  static load(id: string): factory_upgraded | null {
    return changetype<factory_upgraded | null>(
      store.get("factory_upgraded", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }
}

export class group_borrower_accepted_funds extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_borrower_accepted_funds entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_borrower_accepted_funds must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_borrower_accepted_funds", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_borrower_accepted_funds | null {
    return changetype<group_borrower_accepted_funds | null>(
      store.get_in_block("group_borrower_accepted_funds", id),
    );
  }

  static load(id: string): group_borrower_accepted_funds | null {
    return changetype<group_borrower_accepted_funds | null>(
      store.get("group_borrower_accepted_funds", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get bid_id(): BigDecimal {
    let value = this.get("bid_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bid_id(value: BigDecimal) {
    this.set("bid_id", Value.fromBigDecimal(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get collateral_amount(): BigDecimal {
    let value = this.get("collateral_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral_amount(value: BigDecimal) {
    this.set("collateral_amount", Value.fromBigDecimal(value));
  }

  get interest_rate(): i32 {
    let value = this.get("interest_rate");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set interest_rate(value: i32) {
    this.set("interest_rate", Value.fromI32(value));
  }

  get loan_duration(): i32 {
    let value = this.get("loan_duration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set loan_duration(value: i32) {
    this.set("loan_duration", Value.fromI32(value));
  }

  get principal_amount(): BigDecimal {
    let value = this.get("principal_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principal_amount(value: BigDecimal) {
    this.set("principal_amount", Value.fromBigDecimal(value));
  }
}

export class group_lender_added_principal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_lender_added_principal entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_lender_added_principal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_lender_added_principal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_lender_added_principal | null {
    return changetype<group_lender_added_principal | null>(
      store.get_in_block("group_lender_added_principal", id),
    );
  }

  static load(id: string): group_lender_added_principal | null {
    return changetype<group_lender_added_principal | null>(
      store.get("group_lender_added_principal", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get shares_amount(): BigDecimal {
    let value = this.get("shares_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set shares_amount(value: BigDecimal) {
    this.set("shares_amount", Value.fromBigDecimal(value));
  }

  get shares_recipient(): Bytes {
    let value = this.get("shares_recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set shares_recipient(value: Bytes) {
    this.set("shares_recipient", Value.fromBytes(value));
  }
}

export class group_earnings_withdrawn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_earnings_withdrawn entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_earnings_withdrawn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_earnings_withdrawn", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_earnings_withdrawn | null {
    return changetype<group_earnings_withdrawn | null>(
      store.get_in_block("group_earnings_withdrawn", id),
    );
  }

  static load(id: string): group_earnings_withdrawn | null {
    return changetype<group_earnings_withdrawn | null>(
      store.get("group_earnings_withdrawn", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get amount_pool_shares_tokens(): BigDecimal {
    let value = this.get("amount_pool_shares_tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount_pool_shares_tokens(value: BigDecimal) {
    this.set("amount_pool_shares_tokens", Value.fromBigDecimal(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get principal_tokens_withdrawn(): BigDecimal {
    let value = this.get("principal_tokens_withdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principal_tokens_withdrawn(value: BigDecimal) {
    this.set("principal_tokens_withdrawn", Value.fromBigDecimal(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }
}

export class group_defaulted_loan_liquidated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_defaulted_loan_liquidated entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_defaulted_loan_liquidated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_defaulted_loan_liquidated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_defaulted_loan_liquidated | null {
    return changetype<group_defaulted_loan_liquidated | null>(
      store.get_in_block("group_defaulted_loan_liquidated", id),
    );
  }

  static load(id: string): group_defaulted_loan_liquidated | null {
    return changetype<group_defaulted_loan_liquidated | null>(
      store.get("group_defaulted_loan_liquidated", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get amount_due(): BigDecimal {
    let value = this.get("amount_due");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set amount_due(value: BigDecimal) {
    this.set("amount_due", Value.fromBigDecimal(value));
  }

  get bid_id(): BigDecimal {
    let value = this.get("bid_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bid_id(value: BigDecimal) {
    this.set("bid_id", Value.fromBigDecimal(value));
  }

  get liquidator(): Bytes {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set liquidator(value: Bytes) {
    this.set("liquidator", Value.fromBytes(value));
  }

  get token_amount_difference(): BigDecimal {
    let value = this.get("token_amount_difference");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set token_amount_difference(value: BigDecimal) {
    this.set("token_amount_difference", Value.fromBigDecimal(value));
  }
}

export class group_initialized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_initialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_initialized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_initialized", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_initialized | null {
    return changetype<group_initialized | null>(
      store.get_in_block("group_initialized", id),
    );
  }

  static load(id: string): group_initialized | null {
    return changetype<group_initialized | null>(
      store.get("group_initialized", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }
}

export class group_loan_repaid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_loan_repaid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_loan_repaid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_loan_repaid", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_loan_repaid | null {
    return changetype<group_loan_repaid | null>(
      store.get_in_block("group_loan_repaid", id),
    );
  }

  static load(id: string): group_loan_repaid | null {
    return changetype<group_loan_repaid | null>(
      store.get("group_loan_repaid", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get bid_id(): BigDecimal {
    let value = this.get("bid_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set bid_id(value: BigDecimal) {
    this.set("bid_id", Value.fromBigDecimal(value));
  }

  get interest_amount(): BigDecimal {
    let value = this.get("interest_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interest_amount(value: BigDecimal) {
    this.set("interest_amount", Value.fromBigDecimal(value));
  }

  get principal_amount(): BigDecimal {
    let value = this.get("principal_amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set principal_amount(value: BigDecimal) {
    this.set("principal_amount", Value.fromBigDecimal(value));
  }

  get repayer(): Bytes {
    let value = this.get("repayer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set repayer(value: Bytes) {
    this.set("repayer", Value.fromBytes(value));
  }

  get total_interest_collected(): BigDecimal {
    let value = this.get("total_interest_collected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set total_interest_collected(value: BigDecimal) {
    this.set("total_interest_collected", Value.fromBigDecimal(value));
  }

  get total_principal_repaid(): BigDecimal {
    let value = this.get("total_principal_repaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set total_principal_repaid(value: BigDecimal) {
    this.set("total_principal_repaid", Value.fromBigDecimal(value));
  }
}

export class group_ownership_transferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_ownership_transferred entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_ownership_transferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_ownership_transferred", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_ownership_transferred | null {
    return changetype<group_ownership_transferred | null>(
      store.get_in_block("group_ownership_transferred", id),
    );
  }

  static load(id: string): group_ownership_transferred | null {
    return changetype<group_ownership_transferred | null>(
      store.get("group_ownership_transferred", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get new_owner(): Bytes {
    let value = this.get("new_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set new_owner(value: Bytes) {
    this.set("new_owner", Value.fromBytes(value));
  }

  get previous_owner(): Bytes {
    let value = this.get("previous_owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previous_owner(value: Bytes) {
    this.set("previous_owner", Value.fromBytes(value));
  }
}

export class group_paused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_paused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_paused must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_paused", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_paused | null {
    return changetype<group_paused | null>(
      store.get_in_block("group_paused", id),
    );
  }

  static load(id: string): group_paused | null {
    return changetype<group_paused | null>(store.get("group_paused", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class group_pool_initialized extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save group_pool_initialized entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_pool_initialized must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_pool_initialized", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_pool_initialized | null {
    return changetype<group_pool_initialized | null>(
      store.get_in_block("group_pool_initialized", id),
    );
  }

  static load(id: string): group_pool_initialized | null {
    return changetype<group_pool_initialized | null>(
      store.get("group_pool_initialized", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get collateral_token_address(): Bytes {
    let value = this.get("collateral_token_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral_token_address(value: Bytes) {
    this.set("collateral_token_address", Value.fromBytes(value));
  }

  get interest_rate_lower_bound(): i32 {
    let value = this.get("interest_rate_lower_bound");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set interest_rate_lower_bound(value: i32) {
    this.set("interest_rate_lower_bound", Value.fromI32(value));
  }

  get interest_rate_upper_bound(): i32 {
    let value = this.get("interest_rate_upper_bound");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set interest_rate_upper_bound(value: i32) {
    this.set("interest_rate_upper_bound", Value.fromI32(value));
  }

  get liquidity_threshold_percent(): i32 {
    let value = this.get("liquidity_threshold_percent");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidity_threshold_percent(value: i32) {
    this.set("liquidity_threshold_percent", Value.fromI32(value));
  }

  get loan_to_value_percent(): i32 {
    let value = this.get("loan_to_value_percent");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set loan_to_value_percent(value: i32) {
    this.set("loan_to_value_percent", Value.fromI32(value));
  }

  get market_id(): BigDecimal {
    let value = this.get("market_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set market_id(value: BigDecimal) {
    this.set("market_id", Value.fromBigDecimal(value));
  }

  get max_loan_duration(): i32 {
    let value = this.get("max_loan_duration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set max_loan_duration(value: i32) {
    this.set("max_loan_duration", Value.fromI32(value));
  }

  get pool_shares_token(): Bytes {
    let value = this.get("pool_shares_token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pool_shares_token(value: Bytes) {
    this.set("pool_shares_token", Value.fromBytes(value));
  }

  get principal_token_address(): Bytes {
    let value = this.get("principal_token_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set principal_token_address(value: Bytes) {
    this.set("principal_token_address", Value.fromBytes(value));
  }

  get twap_interval(): i32 {
    let value = this.get("twap_interval");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set twap_interval(value: i32) {
    this.set("twap_interval", Value.fromI32(value));
  }

  get uniswap_pool_fee(): i32 {
    let value = this.get("uniswap_pool_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniswap_pool_fee(value: i32) {
    this.set("uniswap_pool_fee", Value.fromI32(value));
  }
}

export class group_unpaused extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_unpaused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_unpaused must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_unpaused", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_unpaused | null {
    return changetype<group_unpaused | null>(
      store.get_in_block("group_unpaused", id),
    );
  }

  static load(id: string): group_unpaused | null {
    return changetype<group_unpaused | null>(store.get("group_unpaused", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evt_tx_hash(): Bytes {
    let value = this.get("evt_tx_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set evt_tx_hash(value: Bytes) {
    this.set("evt_tx_hash", Value.fromBytes(value));
  }

  get evt_index(): BigInt {
    let value = this.get("evt_index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_index(value: BigInt) {
    this.set("evt_index", Value.fromBigInt(value));
  }

  get evt_block_number(): BigInt {
    let value = this.get("evt_block_number");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set evt_block_number(value: BigInt) {
    this.set("evt_block_number", Value.fromBigInt(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }
}

export class group_pool_metrics extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_pool_metrics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_pool_metrics must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_pool_metrics", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_pool_metrics | null {
    return changetype<group_pool_metrics | null>(
      store.get_in_block("group_pool_metrics", id),
    );
  }

  static load(id: string): group_pool_metrics | null {
    return changetype<group_pool_metrics | null>(
      store.get("group_pool_metrics", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get principal_token_address(): Bytes {
    let value = this.get("principal_token_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set principal_token_address(value: Bytes) {
    this.set("principal_token_address", Value.fromBytes(value));
  }

  get collateral_token_address(): Bytes {
    let value = this.get("collateral_token_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateral_token_address(value: Bytes) {
    this.set("collateral_token_address", Value.fromBytes(value));
  }

  get shares_token_address(): Bytes {
    let value = this.get("shares_token_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set shares_token_address(value: Bytes) {
    this.set("shares_token_address", Value.fromBytes(value));
  }

  get uniswap_v3_pool_address(): Bytes {
    let value = this.get("uniswap_v3_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set uniswap_v3_pool_address(value: Bytes) {
    this.set("uniswap_v3_pool_address", Value.fromBytes(value));
  }

  get teller_v2_address(): Bytes {
    let value = this.get("teller_v2_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set teller_v2_address(value: Bytes) {
    this.set("teller_v2_address", Value.fromBytes(value));
  }

  get smart_commitment_forwarder_address(): Bytes {
    let value = this.get("smart_commitment_forwarder_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set smart_commitment_forwarder_address(value: Bytes) {
    this.set("smart_commitment_forwarder_address", Value.fromBytes(value));
  }

  get market_id(): BigInt {
    let value = this.get("market_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set market_id(value: BigInt) {
    this.set("market_id", Value.fromBigInt(value));
  }

  get uniswap_pool_fee(): i32 {
    let value = this.get("uniswap_pool_fee");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniswap_pool_fee(value: i32) {
    this.set("uniswap_pool_fee", Value.fromI32(value));
  }

  get max_loan_duration(): i32 {
    let value = this.get("max_loan_duration");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set max_loan_duration(value: i32) {
    this.set("max_loan_duration", Value.fromI32(value));
  }

  get twap_interval(): i32 {
    let value = this.get("twap_interval");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set twap_interval(value: i32) {
    this.set("twap_interval", Value.fromI32(value));
  }

  get interest_rate_upper_bound(): i32 {
    let value = this.get("interest_rate_upper_bound");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set interest_rate_upper_bound(value: i32) {
    this.set("interest_rate_upper_bound", Value.fromI32(value));
  }

  get interest_rate_lower_bound(): i32 {
    let value = this.get("interest_rate_lower_bound");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set interest_rate_lower_bound(value: i32) {
    this.set("interest_rate_lower_bound", Value.fromI32(value));
  }

  get liquidity_threshold_percent(): i32 {
    let value = this.get("liquidity_threshold_percent");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set liquidity_threshold_percent(value: i32) {
    this.set("liquidity_threshold_percent", Value.fromI32(value));
  }

  get collateral_ratio(): i32 {
    let value = this.get("collateral_ratio");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set collateral_ratio(value: i32) {
    this.set("collateral_ratio", Value.fromI32(value));
  }

  get total_principal_tokens_committed(): i32 {
    let value = this.get("total_principal_tokens_committed");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_committed(value: i32) {
    this.set("total_principal_tokens_committed", Value.fromI32(value));
  }

  get total_principal_tokens_withdrawn(): i32 {
    let value = this.get("total_principal_tokens_withdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_withdrawn(value: i32) {
    this.set("total_principal_tokens_withdrawn", Value.fromI32(value));
  }

  get total_principal_tokens_lended(): i32 {
    let value = this.get("total_principal_tokens_lended");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_lended(value: i32) {
    this.set("total_principal_tokens_lended", Value.fromI32(value));
  }

  get total_principal_tokens_repaid(): i32 {
    let value = this.get("total_principal_tokens_repaid");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_repaid(value: i32) {
    this.set("total_principal_tokens_repaid", Value.fromI32(value));
  }

  get total_interest_collected(): i32 {
    let value = this.get("total_interest_collected");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_interest_collected(value: i32) {
    this.set("total_interest_collected", Value.fromI32(value));
  }

  get token_difference_from_liquidations(): i32 {
    let value = this.get("token_difference_from_liquidations");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set token_difference_from_liquidations(value: i32) {
    this.set("token_difference_from_liquidations", Value.fromI32(value));
  }
}

export class group_lender_metrics extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save group_lender_metrics entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type group_lender_metrics must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("group_lender_metrics", id.toString(), this);
    }
  }

  static loadInBlock(id: string): group_lender_metrics | null {
    return changetype<group_lender_metrics | null>(
      store.get_in_block("group_lender_metrics", id),
    );
  }

  static load(id: string): group_lender_metrics | null {
    return changetype<group_lender_metrics | null>(
      store.get("group_lender_metrics", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user_lender_address(): Bytes {
    let value = this.get("user_lender_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user_lender_address(value: Bytes) {
    this.set("user_lender_address", Value.fromBytes(value));
  }

  get group_pool_address(): Bytes {
    let value = this.get("group_pool_address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set group_pool_address(value: Bytes) {
    this.set("group_pool_address", Value.fromBytes(value));
  }

  get total_principal_tokens_committed(): i32 {
    let value = this.get("total_principal_tokens_committed");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_committed(value: i32) {
    this.set("total_principal_tokens_committed", Value.fromI32(value));
  }

  get total_principal_tokens_withdrawn(): i32 {
    let value = this.get("total_principal_tokens_withdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set total_principal_tokens_withdrawn(value: i32) {
    this.set("total_principal_tokens_withdrawn", Value.fromI32(value));
  }

  get shares_tokens_net(): i32 {
    let value = this.get("shares_tokens_net");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set shares_tokens_net(value: i32) {
    this.set("shares_tokens_net", Value.fromI32(value));
  }
}
