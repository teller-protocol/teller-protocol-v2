// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get_in_block("Protocol", id));
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loans(): LoanStatusCountLoader {
    return new LoanStatusCountLoader(
      "Protocol",
      this.get("id")!.toString(),
      "loans"
    );
  }

  get tokenVolumes(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "Protocol",
      this.get("id")!.toString(),
      "tokenVolumes"
    );
  }

  get rolloverableLCF(): Bytes | null {
    let value = this.get("rolloverableLCF");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set rolloverableLCF(value: Bytes | null) {
    if (!value) {
      this.unset("rolloverableLCF");
    } else {
      this.set("rolloverableLCF", Value.fromBytes(<Bytes>value));
    }
  }

  get activeCommitments(): Array<string> {
    let value = this.get("activeCommitments");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set activeCommitments(value: Array<string>) {
    this.set("activeCommitments", Value.fromStringArray(value));
  }

  get inactiveCommitments(): Array<string> | null {
    let value = this.get("inactiveCommitments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set inactiveCommitments(value: Array<string> | null) {
    if (!value) {
      this.unset("inactiveCommitments");
    } else {
      this.set(
        "inactiveCommitments",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get activeRewards(): Array<string> {
    let value = this.get("activeRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set activeRewards(value: Array<string>) {
    this.set("activeRewards", Value.fromStringArray(value));
  }

  get _durationTotal(): BigInt {
    let value = this.get("_durationTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _durationTotal(value: BigInt) {
    this.set("_durationTotal", Value.fromBigInt(value));
  }

  get durationAverage(): BigInt {
    let value = this.get("durationAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationAverage(value: BigInt) {
    this.set("durationAverage", Value.fromBigInt(value));
  }
}

export class ProtocolCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProtocolCollateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolCollateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProtocolCollateral | null {
    return changetype<ProtocolCollateral | null>(
      store.get_in_block("ProtocolCollateral", id)
    );
  }

  static load(id: string): ProtocolCollateral | null {
    return changetype<ProtocolCollateral | null>(
      store.get("ProtocolCollateral", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateralToken(): string | null {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string | null) {
    if (!value) {
      this.unset("collateralToken");
    } else {
      this.set("collateralToken", Value.fromString(<string>value));
    }
  }

  get tokenVolumesByLendingToken(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "ProtocolCollateral",
      this.get("id")!.toString(),
      "tokenVolumesByLendingToken"
    );
  }
}

export class MarketPlace extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketPlace entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketPlace must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketPlace", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketPlace | null {
    return changetype<MarketPlace | null>(
      store.get_in_block("MarketPlace", id)
    );
  }

  static load(id: string): MarketPlace | null {
    return changetype<MarketPlace | null>(store.get("MarketPlace", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get feeRecipient(): Bytes | null {
    let value = this.get("feeRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feeRecipient(value: Bytes | null) {
    if (!value) {
      this.unset("feeRecipient");
    } else {
      this.set("feeRecipient", Value.fromBytes(<Bytes>value));
    }
  }

  get metadataURI(): string | null {
    let value = this.get("metadataURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataURI(value: string | null) {
    if (!value) {
      this.unset("metadataURI");
    } else {
      this.set("metadataURI", Value.fromString(<string>value));
    }
  }

  get isMarketOpen(): boolean {
    let value = this.get("isMarketOpen");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isMarketOpen(value: boolean) {
    this.set("isMarketOpen", Value.fromBoolean(value));
  }

  get paymentDefaultDuration(): BigInt {
    let value = this.get("paymentDefaultDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentDefaultDuration(value: BigInt) {
    this.set("paymentDefaultDuration", Value.fromBigInt(value));
  }

  get paymentCycleDuration(): BigInt {
    let value = this.get("paymentCycleDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentCycleDuration(value: BigInt) {
    this.set("paymentCycleDuration", Value.fromBigInt(value));
  }

  get paymentCycleType(): string {
    let value = this.get("paymentCycleType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set paymentCycleType(value: string) {
    this.set("paymentCycleType", Value.fromString(value));
  }

  get paymentType(): string {
    let value = this.get("paymentType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set paymentType(value: string) {
    this.set("paymentType", Value.fromString(value));
  }

  get bidExpirationTime(): BigInt {
    let value = this.get("bidExpirationTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidExpirationTime(value: BigInt) {
    this.set("bidExpirationTime", Value.fromBigInt(value));
  }

  get borrowerAttestationRequired(): boolean {
    let value = this.get("borrowerAttestationRequired");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set borrowerAttestationRequired(value: boolean) {
    this.set("borrowerAttestationRequired", Value.fromBoolean(value));
  }

  get lenderAttestationRequired(): boolean {
    let value = this.get("lenderAttestationRequired");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set lenderAttestationRequired(value: boolean) {
    this.set("lenderAttestationRequired", Value.fromBoolean(value));
  }

  get marketplaceFeePercent(): BigInt {
    let value = this.get("marketplaceFeePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceFeePercent(value: BigInt) {
    this.set("marketplaceFeePercent", Value.fromBigInt(value));
  }

  get loans(): LoanStatusCountLoader {
    return new LoanStatusCountLoader(
      "MarketPlace",
      this.get("id")!.toString(),
      "loans"
    );
  }

  get tokenVolumes(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "MarketPlace",
      this.get("id")!.toString(),
      "tokenVolumes"
    );
  }

  get _durationTotal(): BigInt {
    let value = this.get("_durationTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _durationTotal(value: BigInt) {
    this.set("_durationTotal", Value.fromBigInt(value));
  }

  get durationAverage(): BigInt {
    let value = this.get("durationAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationAverage(value: BigInt) {
    this.set("durationAverage", Value.fromBigInt(value));
  }

  get totalNumberOfLenders(): BigInt {
    let value = this.get("totalNumberOfLenders");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalNumberOfLenders(value: BigInt) {
    this.set("totalNumberOfLenders", Value.fromBigInt(value));
  }

  get lenders(): LenderLoader {
    return new LenderLoader(
      "MarketPlace",
      this.get("id")!.toString(),
      "lenders"
    );
  }

  get borrowers(): BorrowerLoader {
    return new BorrowerLoader(
      "MarketPlace",
      this.get("id")!.toString(),
      "borrowers"
    );
  }

  get commitments(): CommitmentLoader {
    return new CommitmentLoader(
      "MarketPlace",
      this.get("id")!.toString(),
      "commitments"
    );
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bid | null {
    return changetype<Bid | null>(store.get_in_block("Bid", id));
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidId(): BigInt {
    let value = this.get("bidId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidId(value: BigInt) {
    this.set("bidId", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get fundedTx(): FundedTxLoader {
    return new FundedTxLoader("Bid", this.get("id")!.toString(), "fundedTx");
  }

  get borrowerAddress(): Bytes {
    let value = this.get("borrowerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowerAddress(value: Bytes) {
    this.set("borrowerAddress", Value.fromBytes(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get receiverAddress(): Bytes {
    let value = this.get("receiverAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set receiverAddress(value: Bytes) {
    this.set("receiverAddress", Value.fromBytes(value));
  }

  get liquidatorAddress(): Bytes | null {
    let value = this.get("liquidatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set liquidatorAddress(value: Bytes | null) {
    if (!value) {
      this.unset("liquidatorAddress");
    } else {
      this.set("liquidatorAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get lenderAddress(): Bytes | null {
    let value = this.get("lenderAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lenderAddress(value: Bytes | null) {
    if (!value) {
      this.unset("lenderAddress");
    } else {
      this.set("lenderAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get lender(): string | null {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lender(value: string | null) {
    if (!value) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromString(<string>value));
    }
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get lendingTokenAddress(): Bytes {
    let value = this.get("lendingTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lendingTokenAddress(value: Bytes) {
    this.set("lendingTokenAddress", Value.fromBytes(value));
  }

  get bidRewards(): BidRewardLoader {
    return new BidRewardLoader("Bid", this.get("id")!.toString(), "bidRewards");
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get metadataURI(): string {
    let value = this.get("metadataURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metadataURI(value: string) {
    this.set("metadataURI", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get principal(): BigInt {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt) {
    this.set("principal", Value.fromBigInt(value));
  }

  get acceptedTimestamp(): BigInt {
    let value = this.get("acceptedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set acceptedTimestamp(value: BigInt) {
    this.set("acceptedTimestamp", Value.fromBigInt(value));
  }

  get lastRepaidTimestamp(): BigInt {
    let value = this.get("lastRepaidTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastRepaidTimestamp(value: BigInt) {
    this.set("lastRepaidTimestamp", Value.fromBigInt(value));
  }

  get loanDuration(): BigInt {
    let value = this.get("loanDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set loanDuration(value: BigInt) {
    this.set("loanDuration", Value.fromBigInt(value));
  }

  get paymentCycle(): BigInt {
    let value = this.get("paymentCycle");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentCycle(value: BigInt) {
    this.set("paymentCycle", Value.fromBigInt(value));
  }

  get paymentCycleAmount(): BigInt {
    let value = this.get("paymentCycleAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentCycleAmount(value: BigInt) {
    this.set("paymentCycleAmount", Value.fromBigInt(value));
  }

  get apr(): BigInt {
    let value = this.get("apr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set apr(value: BigInt) {
    this.set("apr", Value.fromBigInt(value));
  }

  get endDate(): BigInt | null {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset("endDate");
    } else {
      this.set("endDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get nextDueDate(): BigInt | null {
    let value = this.get("nextDueDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nextDueDate(value: BigInt | null) {
    if (!value) {
      this.unset("nextDueDate");
    } else {
      this.set("nextDueDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get commitment(): string | null {
    let value = this.get("commitment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commitment(value: string | null) {
    if (!value) {
      this.unset("commitment");
    } else {
      this.set("commitment", Value.fromString(<string>value));
    }
  }

  get commitmentId(): string | null {
    let value = this.get("commitmentId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commitmentId(value: string | null) {
    if (!value) {
      this.unset("commitmentId");
    } else {
      this.set("commitmentId", Value.fromString(<string>value));
    }
  }

  get payments(): PaymentLoader {
    return new PaymentLoader("Bid", this.get("id")!.toString(), "payments");
  }

  get totalRepaidPrincipal(): BigInt {
    let value = this.get("totalRepaidPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRepaidPrincipal(value: BigInt) {
    this.set("totalRepaidPrincipal", Value.fromBigInt(value));
  }

  get totalRepaidInterest(): BigInt {
    let value = this.get("totalRepaidInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRepaidInterest(value: BigInt) {
    this.set("totalRepaidInterest", Value.fromBigInt(value));
  }

  get _lastTotalRepaidAmount(): BigInt {
    let value = this.get("_lastTotalRepaidAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _lastTotalRepaidAmount(value: BigInt) {
    this.set("_lastTotalRepaidAmount", Value.fromBigInt(value));
  }

  get _lastTotalRepaidInterestAmount(): BigInt {
    let value = this.get("_lastTotalRepaidInterestAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _lastTotalRepaidInterestAmount(value: BigInt) {
    this.set("_lastTotalRepaidInterestAmount", Value.fromBigInt(value));
  }

  get paymentDefaultDuration(): BigInt {
    let value = this.get("paymentDefaultDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentDefaultDuration(value: BigInt) {
    this.set("paymentDefaultDuration", Value.fromBigInt(value));
  }

  get collateralEscrow(): Bytes | null {
    let value = this.get("collateralEscrow");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateralEscrow(value: Bytes | null) {
    if (!value) {
      this.unset("collateralEscrow");
    } else {
      this.set("collateralEscrow", Value.fromBytes(<Bytes>value));
    }
  }

  get collateral(): Array<string> | null {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set collateral(value: Array<string> | null) {
    if (!value) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class BidCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BidCollateral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BidCollateral must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BidCollateral", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BidCollateral | null {
    return changetype<BidCollateral | null>(
      store.get_in_block("BidCollateral", id)
    );
  }

  static load(id: string): BidCollateral | null {
    return changetype<BidCollateral | null>(store.get("BidCollateral", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get collateralAddress(): Bytes {
    let value = this.get("collateralAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collateralAddress(value: Bytes) {
    this.set("collateralAddress", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get receiver(): Bytes | null {
    let value = this.get("receiver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set receiver(value: Bytes | null) {
    if (!value) {
      this.unset("receiver");
    } else {
      this.set("receiver", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get nftId(): BigInt | null {
    let value = this.get("nftId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftId(value: BigInt | null) {
    if (!value) {
      this.unset("nftId");
    } else {
      this.set("nftId", Value.fromBigInt(<BigInt>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): BigInt | null {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt | null) {
    if (!value) {
      this.unset("decimals");
    } else {
      this.set("decimals", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FundedTx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FundedTx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FundedTx must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FundedTx", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FundedTx | null {
    return changetype<FundedTx | null>(store.get_in_block("FundedTx", id));
  }

  static load(id: string): FundedTx | null {
    return changetype<FundedTx | null>(store.get("FundedTx", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Payment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Payment | null {
    return changetype<Payment | null>(store.get_in_block("Payment", id));
  }

  static load(id: string): Payment | null {
    return changetype<Payment | null>(store.get("Payment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get principal(): BigInt {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt) {
    this.set("principal", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }

  get paymentDate(): BigInt {
    let value = this.get("paymentDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set paymentDate(value: BigInt) {
    this.set("paymentDate", Value.fromBigInt(value));
  }

  get outstandingCapital(): BigInt {
    let value = this.get("outstandingCapital");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outstandingCapital(value: BigInt) {
    this.set("outstandingCapital", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get firstInteractionDate(): BigInt {
    let value = this.get("firstInteractionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInteractionDate(value: BigInt) {
    this.set("firstInteractionDate", Value.fromBigInt(value));
  }

  get lenders(): LenderLoader {
    return new LenderLoader("User", this.get("id")!.toString(), "lenders");
  }

  get borrowers(): BorrowerLoader {
    return new BorrowerLoader("User", this.get("id")!.toString(), "borrowers");
  }

  get bidRewards(): BidRewardLoader {
    return new BidRewardLoader(
      "User",
      this.get("id")!.toString(),
      "bidRewards"
    );
  }
}

export class Lender extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lender entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lender must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Lender", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Lender | null {
    return changetype<Lender | null>(store.get_in_block("Lender", id));
  }

  static load(id: string): Lender | null {
    return changetype<Lender | null>(store.get("Lender", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get lenderAddress(): Bytes {
    let value = this.get("lenderAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lenderAddress(value: Bytes) {
    this.set("lenderAddress", Value.fromBytes(value));
  }

  get firstInteractionDate(): BigInt {
    let value = this.get("firstInteractionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInteractionDate(value: BigInt) {
    this.set("firstInteractionDate", Value.fromBigInt(value));
  }

  get attestedTimestamp(): BigInt | null {
    let value = this.get("attestedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set attestedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("attestedTimestamp");
    } else {
      this.set("attestedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get isAttested(): boolean {
    let value = this.get("isAttested");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAttested(value: boolean) {
    this.set("isAttested", Value.fromBoolean(value));
  }

  get loans(): LoanStatusCountLoader {
    return new LoanStatusCountLoader(
      "Lender",
      this.get("id")!.toString(),
      "loans"
    );
  }

  get tokenVolumes(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "Lender",
      this.get("id")!.toString(),
      "tokenVolumes"
    );
  }

  get _durationTotal(): BigInt {
    let value = this.get("_durationTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _durationTotal(value: BigInt) {
    this.set("_durationTotal", Value.fromBigInt(value));
  }

  get durationAverage(): BigInt {
    let value = this.get("durationAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationAverage(value: BigInt) {
    this.set("durationAverage", Value.fromBigInt(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get commitments(): CommitmentLoader {
    return new CommitmentLoader(
      "Lender",
      this.get("id")!.toString(),
      "commitments"
    );
  }
}

export class Borrower extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrower entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrower must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Borrower", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Borrower | null {
    return changetype<Borrower | null>(store.get_in_block("Borrower", id));
  }

  static load(id: string): Borrower | null {
    return changetype<Borrower | null>(store.get("Borrower", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get borrowerAddress(): Bytes {
    let value = this.get("borrowerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set borrowerAddress(value: Bytes) {
    this.set("borrowerAddress", Value.fromBytes(value));
  }

  get firstInteractionDate(): BigInt {
    let value = this.get("firstInteractionDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstInteractionDate(value: BigInt) {
    this.set("firstInteractionDate", Value.fromBigInt(value));
  }

  get attestedTimestamp(): BigInt | null {
    let value = this.get("attestedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set attestedTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("attestedTimestamp");
    } else {
      this.set("attestedTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get isAttested(): boolean {
    let value = this.get("isAttested");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAttested(value: boolean) {
    this.set("isAttested", Value.fromBoolean(value));
  }

  get loans(): LoanStatusCountLoader {
    return new LoanStatusCountLoader(
      "Borrower",
      this.get("id")!.toString(),
      "loans"
    );
  }

  get tokenVolumes(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "Borrower",
      this.get("id")!.toString(),
      "tokenVolumes"
    );
  }

  get _durationTotal(): BigInt {
    let value = this.get("_durationTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _durationTotal(value: BigInt) {
    this.set("_durationTotal", Value.fromBigInt(value));
  }

  get durationAverage(): BigInt {
    let value = this.get("durationAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationAverage(value: BigInt) {
    this.set("durationAverage", Value.fromBigInt(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class LoanStatusCount extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LoanStatusCount entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LoanStatusCount must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LoanStatusCount", id.toString(), this);
    }
  }

  static loadInBlock(id: string): LoanStatusCount | null {
    return changetype<LoanStatusCount | null>(
      store.get_in_block("LoanStatusCount", id)
    );
  }

  static load(id: string): LoanStatusCount | null {
    return changetype<LoanStatusCount | null>(store.get("LoanStatusCount", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get all(): Array<string> {
    let value = this.get("all");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set all(value: Array<string>) {
    this.set("all", Value.fromStringArray(value));
  }

  get totalCount(): BigInt {
    let value = this.get("totalCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCount(value: BigInt) {
    this.set("totalCount", Value.fromBigInt(value));
  }

  get submitted(): Array<string> {
    let value = this.get("submitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set submitted(value: Array<string>) {
    this.set("submitted", Value.fromStringArray(value));
  }

  get submittedCount(): BigInt {
    let value = this.get("submittedCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set submittedCount(value: BigInt) {
    this.set("submittedCount", Value.fromBigInt(value));
  }

  get expired(): Array<string> {
    let value = this.get("expired");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set expired(value: Array<string>) {
    this.set("expired", Value.fromStringArray(value));
  }

  get expiredCount(): BigInt {
    let value = this.get("expiredCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiredCount(value: BigInt) {
    this.set("expiredCount", Value.fromBigInt(value));
  }

  get cancelled(): Array<string> {
    let value = this.get("cancelled");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set cancelled(value: Array<string>) {
    this.set("cancelled", Value.fromStringArray(value));
  }

  get cancelledCount(): BigInt {
    let value = this.get("cancelledCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cancelledCount(value: BigInt) {
    this.set("cancelledCount", Value.fromBigInt(value));
  }

  get accepted(): Array<string> {
    let value = this.get("accepted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set accepted(value: Array<string>) {
    this.set("accepted", Value.fromStringArray(value));
  }

  get acceptedCount(): BigInt {
    let value = this.get("acceptedCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set acceptedCount(value: BigInt) {
    this.set("acceptedCount", Value.fromBigInt(value));
  }

  get dueSoon(): Array<string> {
    let value = this.get("dueSoon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set dueSoon(value: Array<string>) {
    this.set("dueSoon", Value.fromStringArray(value));
  }

  get dueSoonCount(): BigInt {
    let value = this.get("dueSoonCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dueSoonCount(value: BigInt) {
    this.set("dueSoonCount", Value.fromBigInt(value));
  }

  get late(): Array<string> {
    let value = this.get("late");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set late(value: Array<string>) {
    this.set("late", Value.fromStringArray(value));
  }

  get lateCount(): BigInt {
    let value = this.get("lateCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lateCount(value: BigInt) {
    this.set("lateCount", Value.fromBigInt(value));
  }

  get defaulted(): Array<string> {
    let value = this.get("defaulted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set defaulted(value: Array<string>) {
    this.set("defaulted", Value.fromStringArray(value));
  }

  get defaultedCount(): BigInt {
    let value = this.get("defaultedCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set defaultedCount(value: BigInt) {
    this.set("defaultedCount", Value.fromBigInt(value));
  }

  get repaid(): Array<string> {
    let value = this.get("repaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set repaid(value: Array<string>) {
    this.set("repaid", Value.fromStringArray(value));
  }

  get repaidCount(): BigInt {
    let value = this.get("repaidCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set repaidCount(value: BigInt) {
    this.set("repaidCount", Value.fromBigInt(value));
  }

  get liquidated(): Array<string> {
    let value = this.get("liquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set liquidated(value: Array<string>) {
    this.set("liquidated", Value.fromStringArray(value));
  }

  get liquidatedCount(): BigInt {
    let value = this.get("liquidatedCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set liquidatedCount(value: BigInt) {
    this.set("liquidatedCount", Value.fromBigInt(value));
  }

  get _protocol(): string | null {
    let value = this.get("_protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _protocol(value: string | null) {
    if (!value) {
      this.unset("_protocol");
    } else {
      this.set("_protocol", Value.fromString(<string>value));
    }
  }

  get _market(): string | null {
    let value = this.get("_market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _market(value: string | null) {
    if (!value) {
      this.unset("_market");
    } else {
      this.set("_market", Value.fromString(<string>value));
    }
  }

  get _lender(): string | null {
    let value = this.get("_lender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _lender(value: string | null) {
    if (!value) {
      this.unset("_lender");
    } else {
      this.set("_lender", Value.fromString(<string>value));
    }
  }

  get _borrower(): string | null {
    let value = this.get("_borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _borrower(value: string | null) {
    if (!value) {
      this.unset("_borrower");
    } else {
      this.set("_borrower", Value.fromString(<string>value));
    }
  }

  get _tokenVolume(): string | null {
    let value = this.get("_tokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _tokenVolume(value: string | null) {
    if (!value) {
      this.unset("_tokenVolume");
    } else {
      this.set("_tokenVolume", Value.fromString(<string>value));
    }
  }
}

export class TokenVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenVolume entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenVolume must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenVolume", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenVolume | null {
    return changetype<TokenVolume | null>(
      store.get_in_block("TokenVolume", id)
    );
  }

  static load(id: string): TokenVolume | null {
    return changetype<TokenVolume | null>(store.get("TokenVolume", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(<string>value));
    }
  }

  get lender(): string | null {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lender(value: string | null) {
    if (!value) {
      this.unset("lender");
    } else {
      this.set("lender", Value.fromString(<string>value));
    }
  }

  get borrower(): string | null {
    let value = this.get("borrower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrower(value: string | null) {
    if (!value) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromString(<string>value));
    }
  }

  get allocatedRewards(): RewardAllocationLoader {
    return new RewardAllocationLoader(
      "TokenVolume",
      this.get("id")!.toString(),
      "allocatedRewards"
    );
  }

  get _protocolCollateral(): string | null {
    let value = this.get("_protocolCollateral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _protocolCollateral(value: string | null) {
    if (!value) {
      this.unset("_protocolCollateral");
    } else {
      this.set("_protocolCollateral", Value.fromString(<string>value));
    }
  }

  get _linkedParentTokenVolume(): string | null {
    let value = this.get("_linkedParentTokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _linkedParentTokenVolume(value: string | null) {
    if (!value) {
      this.unset("_linkedParentTokenVolume");
    } else {
      this.set("_linkedParentTokenVolume", Value.fromString(<string>value));
    }
  }

  get tokenVolumeByCollateral(): TokenVolumeLoader {
    return new TokenVolumeLoader(
      "TokenVolume",
      this.get("id")!.toString(),
      "tokenVolumeByCollateral"
    );
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get collateralToken(): string | null {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string | null) {
    if (!value) {
      this.unset("collateralToken");
    } else {
      this.set("collateralToken", Value.fromString(<string>value));
    }
  }

  get lendingTokenAddress(): Bytes {
    let value = this.get("lendingTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lendingTokenAddress(value: Bytes) {
    this.set("lendingTokenAddress", Value.fromBytes(value));
  }

  get loans(): LoanStatusCountLoader {
    return new LoanStatusCountLoader(
      "TokenVolume",
      this.get("id")!.toString(),
      "loans"
    );
  }

  get outstandingCapital(): BigInt {
    let value = this.get("outstandingCapital");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set outstandingCapital(value: BigInt) {
    this.set("outstandingCapital", Value.fromBigInt(value));
  }

  get totalAvailable(): BigInt {
    let value = this.get("totalAvailable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAvailable(value: BigInt) {
    this.set("totalAvailable", Value.fromBigInt(value));
  }

  get totalLoaned(): BigInt {
    let value = this.get("totalLoaned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLoaned(value: BigInt) {
    this.set("totalLoaned", Value.fromBigInt(value));
  }

  get totalActive(): BigInt {
    let value = this.get("totalActive");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalActive(value: BigInt) {
    this.set("totalActive", Value.fromBigInt(value));
  }

  get totalAccepted(): BigInt {
    let value = this.get("totalAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAccepted(value: BigInt) {
    this.set("totalAccepted", Value.fromBigInt(value));
  }

  get totalDueSoon(): BigInt {
    let value = this.get("totalDueSoon");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDueSoon(value: BigInt) {
    this.set("totalDueSoon", Value.fromBigInt(value));
  }

  get totalLate(): BigInt {
    let value = this.get("totalLate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLate(value: BigInt) {
    this.set("totalLate", Value.fromBigInt(value));
  }

  get totalDefaulted(): BigInt {
    let value = this.get("totalDefaulted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDefaulted(value: BigInt) {
    this.set("totalDefaulted", Value.fromBigInt(value));
  }

  get totalRepaid(): BigInt {
    let value = this.get("totalRepaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRepaid(value: BigInt) {
    this.set("totalRepaid", Value.fromBigInt(value));
  }

  get totalLiquidated(): BigInt {
    let value = this.get("totalLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidated(value: BigInt) {
    this.set("totalLiquidated", Value.fromBigInt(value));
  }

  get _loanAcceptedCount(): BigInt {
    let value = this.get("_loanAcceptedCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _loanAcceptedCount(value: BigInt) {
    this.set("_loanAcceptedCount", Value.fromBigInt(value));
  }

  get loanAverage(): BigInt {
    let value = this.get("loanAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set loanAverage(value: BigInt) {
    this.set("loanAverage", Value.fromBigInt(value));
  }

  get commissionEarned(): BigInt {
    let value = this.get("commissionEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set commissionEarned(value: BigInt) {
    this.set("commissionEarned", Value.fromBigInt(value));
  }

  get totalRepaidInterest(): BigInt {
    let value = this.get("totalRepaidInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRepaidInterest(value: BigInt) {
    this.set("totalRepaidInterest", Value.fromBigInt(value));
  }

  get _aprWeightedTotal(): BigInt {
    let value = this.get("_aprWeightedTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _aprWeightedTotal(value: BigInt) {
    this.set("_aprWeightedTotal", Value.fromBigInt(value));
  }

  get aprAverage(): BigInt {
    let value = this.get("aprAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set aprAverage(value: BigInt) {
    this.set("aprAverage", Value.fromBigInt(value));
  }

  get _aprActiveWeightedTotal(): BigInt {
    let value = this.get("_aprActiveWeightedTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _aprActiveWeightedTotal(value: BigInt) {
    this.set("_aprActiveWeightedTotal", Value.fromBigInt(value));
  }

  get aprActiveAverage(): BigInt {
    let value = this.get("aprActiveAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set aprActiveAverage(value: BigInt) {
    this.set("aprActiveAverage", Value.fromBigInt(value));
  }

  get _durationTotal(): BigInt {
    let value = this.get("_durationTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _durationTotal(value: BigInt) {
    this.set("_durationTotal", Value.fromBigInt(value));
  }

  get durationAverage(): BigInt {
    let value = this.get("durationAverage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set durationAverage(value: BigInt) {
    this.set("durationAverage", Value.fromBigInt(value));
  }
}

export class MarketCommitmentStdDev extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MarketCommitmentStdDev entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketCommitmentStdDev must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketCommitmentStdDev", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketCommitmentStdDev | null {
    return changetype<MarketCommitmentStdDev | null>(
      store.get_in_block("MarketCommitmentStdDev", id)
    );
  }

  static load(id: string): MarketCommitmentStdDev | null {
    return changetype<MarketCommitmentStdDev | null>(
      store.get("MarketCommitmentStdDev", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get lendingToken(): string {
    let value = this.get("lendingToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lendingToken(value: string) {
    this.set("lendingToken", Value.fromString(value));
  }

  get collateralToken(): string | null {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string | null) {
    if (!value) {
      this.unset("collateralToken");
    } else {
      this.set("collateralToken", Value.fromString(<string>value));
    }
  }

  get commitmentZScores(): Array<string> {
    let value = this.get("commitmentZScores");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set commitmentZScores(value: Array<string>) {
    this.set("commitmentZScores", Value.fromStringArray(value));
  }

  get maxPrincipalPerCollateralStdDev(): BigDecimal {
    let value = this.get("maxPrincipalPerCollateralStdDev");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxPrincipalPerCollateralStdDev(value: BigDecimal) {
    this.set("maxPrincipalPerCollateralStdDev", Value.fromBigDecimal(value));
  }

  get maxPrincipalPerCollateralMean(): BigDecimal {
    let value = this.get("maxPrincipalPerCollateralMean");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxPrincipalPerCollateralMean(value: BigDecimal) {
    this.set("maxPrincipalPerCollateralMean", Value.fromBigDecimal(value));
  }

  get minApyStdDev(): BigDecimal {
    let value = this.get("minApyStdDev");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set minApyStdDev(value: BigDecimal) {
    this.set("minApyStdDev", Value.fromBigDecimal(value));
  }

  get minApyMean(): BigDecimal {
    let value = this.get("minApyMean");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set minApyMean(value: BigDecimal) {
    this.set("minApyMean", Value.fromBigDecimal(value));
  }

  get maxDurationStdDev(): BigDecimal {
    let value = this.get("maxDurationStdDev");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxDurationStdDev(value: BigDecimal) {
    this.set("maxDurationStdDev", Value.fromBigDecimal(value));
  }

  get maxDurationMean(): BigDecimal {
    let value = this.get("maxDurationMean");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set maxDurationMean(value: BigDecimal) {
    this.set("maxDurationMean", Value.fromBigDecimal(value));
  }
}

export class CommitmentZScore extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommitmentZScore entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommitmentZScore must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommitmentZScore", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CommitmentZScore | null {
    return changetype<CommitmentZScore | null>(
      store.get_in_block("CommitmentZScore", id)
    );
  }

  static load(id: string): CommitmentZScore | null {
    return changetype<CommitmentZScore | null>(
      store.get("CommitmentZScore", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get zScore(): BigDecimal {
    let value = this.get("zScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set zScore(value: BigDecimal) {
    this.set("zScore", Value.fromBigDecimal(value));
  }
}

export class Commitment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Commitment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Commitment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Commitment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Commitment | null {
    return changetype<Commitment | null>(store.get_in_block("Commitment", id));
  }

  static load(id: string): Commitment | null {
    return changetype<Commitment | null>(store.get("Commitment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commitmentId(): BigInt {
    let value = this.get("commitmentId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set commitmentId(value: BigInt) {
    this.set("commitmentId", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get forwarderAddress(): Bytes {
    let value = this.get("forwarderAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set forwarderAddress(value: Bytes) {
    this.set("forwarderAddress", Value.fromBytes(value));
  }

  get rolloverable(): boolean {
    let value = this.get("rolloverable");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set rolloverable(value: boolean) {
    this.set("rolloverable", Value.fromBoolean(value));
  }

  get committedAmount(): BigInt {
    let value = this.get("committedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set committedAmount(value: BigInt) {
    this.set("committedAmount", Value.fromBigInt(value));
  }

  get expirationTimestamp(): BigInt {
    let value = this.get("expirationTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expirationTimestamp(value: BigInt) {
    this.set("expirationTimestamp", Value.fromBigInt(value));
  }

  get maxDuration(): BigInt {
    let value = this.get("maxDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxDuration(value: BigInt) {
    this.set("maxDuration", Value.fromBigInt(value));
  }

  get minAPY(): BigInt {
    let value = this.get("minAPY");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minAPY(value: BigInt) {
    this.set("minAPY", Value.fromBigInt(value));
  }

  get principalToken(): string {
    let value = this.get("principalToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set principalToken(value: string) {
    this.set("principalToken", Value.fromString(value));
  }

  get principalTokenAddress(): Bytes {
    let value = this.get("principalTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set principalTokenAddress(value: Bytes) {
    this.set("principalTokenAddress", Value.fromBytes(value));
  }

  get collateralToken(): string | null {
    let value = this.get("collateralToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralToken(value: string | null) {
    if (!value) {
      this.unset("collateralToken");
    } else {
      this.set("collateralToken", Value.fromString(<string>value));
    }
  }

  get collateralTokenAddress(): Bytes | null {
    let value = this.get("collateralTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateralTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("collateralTokenAddress");
    } else {
      this.set("collateralTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get collateralTokenType(): BigInt {
    let value = this.get("collateralTokenType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set collateralTokenType(value: BigInt) {
    this.set("collateralTokenType", Value.fromBigInt(value));
  }

  get maxPrincipalPerCollateralAmount(): BigInt | null {
    let value = this.get("maxPrincipalPerCollateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxPrincipalPerCollateralAmount(value: BigInt | null) {
    if (!value) {
      this.unset("maxPrincipalPerCollateralAmount");
    } else {
      this.set(
        "maxPrincipalPerCollateralAmount",
        Value.fromBigInt(<BigInt>value)
      );
    }
  }

  get commitmentBorrowers(): Array<Bytes> {
    let value = this.get("commitmentBorrowers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set commitmentBorrowers(value: Array<Bytes>) {
    this.set("commitmentBorrowers", Value.fromBytesArray(value));
  }

  get lender(): string {
    let value = this.get("lender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set lender(value: string) {
    this.set("lender", Value.fromString(value));
  }

  get lenderAddress(): Bytes {
    let value = this.get("lenderAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lenderAddress(value: Bytes) {
    this.set("lenderAddress", Value.fromBytes(value));
  }

  get lenderPrincipalBalance(): BigInt {
    let value = this.get("lenderPrincipalBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lenderPrincipalBalance(value: BigInt) {
    this.set("lenderPrincipalBalance", Value.fromBigInt(value));
  }

  get lenderPrincipalAllowance(): BigInt {
    let value = this.get("lenderPrincipalAllowance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lenderPrincipalAllowance(value: BigInt) {
    this.set("lenderPrincipalAllowance", Value.fromBigInt(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get tokenVolume(): string {
    let value = this.get("tokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenVolume(value: string) {
    this.set("tokenVolume", Value.fromString(value));
  }

  get maxPrincipal(): BigInt {
    let value = this.get("maxPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxPrincipal(value: BigInt) {
    this.set("maxPrincipal", Value.fromBigInt(value));
  }

  get acceptedPrincipal(): BigInt {
    let value = this.get("acceptedPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set acceptedPrincipal(value: BigInt) {
    this.set("acceptedPrincipal", Value.fromBigInt(value));
  }

  get _oldAcceptedPrincipal(): BigInt {
    let value = this.get("_oldAcceptedPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _oldAcceptedPrincipal(value: BigInt) {
    this.set("_oldAcceptedPrincipal", Value.fromBigInt(value));
  }

  get _newAcceptedPrincipal(): BigInt {
    let value = this.get("_newAcceptedPrincipal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set _newAcceptedPrincipal(value: BigInt) {
    this.set("_newAcceptedPrincipal", Value.fromBigInt(value));
  }

  get commitmentRewards(): CommitmentRewardLoader {
    return new CommitmentRewardLoader(
      "Commitment",
      this.get("id")!.toString(),
      "commitmentRewards"
    );
  }
}

export class CommitmentReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommitmentReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommitmentReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommitmentReward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CommitmentReward | null {
    return changetype<CommitmentReward | null>(
      store.get_in_block("CommitmentReward", id)
    );
  }

  static load(id: string): CommitmentReward | null {
    return changetype<CommitmentReward | null>(
      store.get("CommitmentReward", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get reward(): string {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get commitment(): string {
    let value = this.get("commitment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set commitment(value: string) {
    this.set("commitment", Value.fromString(value));
  }

  get roi(): BigInt {
    let value = this.get("roi");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set roi(value: BigInt) {
    this.set("roi", Value.fromBigInt(value));
  }

  get apy(): BigInt {
    let value = this.get("apy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set apy(value: BigInt) {
    this.set("apy", Value.fromBigInt(value));
  }
}

export class RewardAllocation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RewardAllocation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardAllocation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RewardAllocation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardAllocation | null {
    return changetype<RewardAllocation | null>(
      store.get_in_block("RewardAllocation", id)
    );
  }

  static load(id: string): RewardAllocation | null {
    return changetype<RewardAllocation | null>(
      store.get("RewardAllocation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get allocator(): string {
    let value = this.get("allocator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set allocator(value: string) {
    this.set("allocator", Value.fromString(value));
  }

  get allocatorAddress(): Bytes {
    let value = this.get("allocatorAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set allocatorAddress(value: Bytes) {
    this.set("allocatorAddress", Value.fromBytes(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get marketplaceId(): BigInt {
    let value = this.get("marketplaceId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set marketplaceId(value: BigInt) {
    this.set("marketplaceId", Value.fromBigInt(value));
  }

  get tokenVolume(): string | null {
    let value = this.get("tokenVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenVolume(value: string | null) {
    if (!value) {
      this.unset("tokenVolume");
    } else {
      this.set("tokenVolume", Value.fromString(<string>value));
    }
  }

  get rewardToken(): string {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rewardToken(value: string) {
    this.set("rewardToken", Value.fromString(value));
  }

  get rewardTokenAddress(): Bytes {
    let value = this.get("rewardTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardTokenAddress(value: Bytes) {
    this.set("rewardTokenAddress", Value.fromBytes(value));
  }

  get rewardTokenAmountInitial(): BigInt {
    let value = this.get("rewardTokenAmountInitial");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardTokenAmountInitial(value: BigInt) {
    this.set("rewardTokenAmountInitial", Value.fromBigInt(value));
  }

  get rewardTokenAmountRemaining(): BigInt {
    let value = this.get("rewardTokenAmountRemaining");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardTokenAmountRemaining(value: BigInt) {
    this.set("rewardTokenAmountRemaining", Value.fromBigInt(value));
  }

  get requiredPrincipalTokenAddress(): Bytes {
    let value = this.get("requiredPrincipalTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set requiredPrincipalTokenAddress(value: Bytes) {
    this.set("requiredPrincipalTokenAddress", Value.fromBytes(value));
  }

  get requiredCollateralTokenAddress(): Bytes {
    let value = this.get("requiredCollateralTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set requiredCollateralTokenAddress(value: Bytes) {
    this.set("requiredCollateralTokenAddress", Value.fromBytes(value));
  }

  get minimumCollateralPerPrincipalAmount(): BigInt {
    let value = this.get("minimumCollateralPerPrincipalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minimumCollateralPerPrincipalAmount(value: BigInt) {
    this.set("minimumCollateralPerPrincipalAmount", Value.fromBigInt(value));
  }

  get rewardPerLoanPrincipalAmount(): BigInt {
    let value = this.get("rewardPerLoanPrincipalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardPerLoanPrincipalAmount(value: BigInt) {
    this.set("rewardPerLoanPrincipalAmount", Value.fromBigInt(value));
  }

  get bidStartTimeMin(): BigInt {
    let value = this.get("bidStartTimeMin");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidStartTimeMin(value: BigInt) {
    this.set("bidStartTimeMin", Value.fromBigInt(value));
  }

  get bidStartTimeMax(): BigInt {
    let value = this.get("bidStartTimeMax");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidStartTimeMax(value: BigInt) {
    this.set("bidStartTimeMax", Value.fromBigInt(value));
  }

  get allocationStrategy(): string {
    let value = this.get("allocationStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set allocationStrategy(value: string) {
    this.set("allocationStrategy", Value.fromString(value));
  }

  get bidRewards(): Array<string> {
    let value = this.get("bidRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set bidRewards(value: Array<string>) {
    this.set("bidRewards", Value.fromStringArray(value));
  }

  get commitmentRewards(): CommitmentRewardLoader {
    return new CommitmentRewardLoader(
      "RewardAllocation",
      this.get("id")!.toString(),
      "commitmentRewards"
    );
  }
}

export class BidReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BidReward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BidReward must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BidReward", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BidReward | null {
    return changetype<BidReward | null>(store.get_in_block("BidReward", id));
  }

  static load(id: string): BidReward | null {
    return changetype<BidReward | null>(store.get("BidReward", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get reward(): string {
    let value = this.get("reward");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reward(value: string) {
    this.set("reward", Value.fromString(value));
  }

  get bid(): string {
    let value = this.get("bid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set bid(value: string) {
    this.set("bid", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get claimed(): boolean {
    let value = this.get("claimed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set claimed(value: boolean) {
    this.set("claimed", Value.fromBoolean(value));
  }
}

export class LoanStatusCountLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): LoanStatusCount[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<LoanStatusCount[]>(value);
  }
}

export class TokenVolumeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenVolume[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenVolume[]>(value);
  }
}

export class LenderLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Lender[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Lender[]>(value);
  }
}

export class BorrowerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Borrower[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Borrower[]>(value);
  }
}

export class CommitmentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Commitment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Commitment[]>(value);
  }
}

export class FundedTxLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): FundedTx[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<FundedTx[]>(value);
  }
}

export class BidRewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BidReward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BidReward[]>(value);
  }
}

export class PaymentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Payment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Payment[]>(value);
  }
}

export class RewardAllocationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RewardAllocation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RewardAllocation[]>(value);
  }
}

export class CommitmentRewardLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CommitmentReward[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CommitmentReward[]>(value);
  }
}
