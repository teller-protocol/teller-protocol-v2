// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { fac_AdminChanged } from "./fac_AdminChanged";
import { fac_BeaconUpgraded } from "./fac_BeaconUpgraded";
import { fac_DeployedLenderGroupContract } from "./fac_DeployedLenderGroupContract";
import { fac_Upgraded } from "./fac_Upgraded";
import { groupp_BorrowerAcceptedFunds } from "./groupp_BorrowerAcceptedFunds";
import { groupp_DefaultedLoanLiquidated } from "./groupp_DefaultedLoanLiquidated";
import { groupp_EarningsWithdrawn } from "./groupp_EarningsWithdrawn";
import { groupp_Initialized } from "./groupp_Initialized";
import { groupp_LenderAddedPrincipal } from "./groupp_LenderAddedPrincipal";
import { groupp_LoanRepaid } from "./groupp_LoanRepaid";
import { groupp_OwnershipTransferred } from "./groupp_OwnershipTransferred";
import { groupp_Paused } from "./groupp_Paused";
import { groupp_PoolInitialized } from "./groupp_PoolInitialized";
import { groupp_Unpaused } from "./groupp_Unpaused";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const facAdminChangeds = message.facAdminChangeds;
    for (let i: i32 = 0; i < facAdminChangeds.length; ++i) {
      writer.uint32(10);
      writer.fork();
      fac_AdminChanged.encode(facAdminChangeds[i], writer);
      writer.ldelim();
    }

    const facBeaconUpgradeds = message.facBeaconUpgradeds;
    for (let i: i32 = 0; i < facBeaconUpgradeds.length; ++i) {
      writer.uint32(18);
      writer.fork();
      fac_BeaconUpgraded.encode(facBeaconUpgradeds[i], writer);
      writer.ldelim();
    }

    const facDeployedLenderGroupContracts =
      message.facDeployedLenderGroupContracts;
    for (let i: i32 = 0; i < facDeployedLenderGroupContracts.length; ++i) {
      writer.uint32(26);
      writer.fork();
      fac_DeployedLenderGroupContract.encode(
        facDeployedLenderGroupContracts[i],
        writer
      );
      writer.ldelim();
    }

    const facUpgradeds = message.facUpgradeds;
    for (let i: i32 = 0; i < facUpgradeds.length; ++i) {
      writer.uint32(34);
      writer.fork();
      fac_Upgraded.encode(facUpgradeds[i], writer);
      writer.ldelim();
    }

    const grouppBorrowerAcceptedFunds = message.grouppBorrowerAcceptedFunds;
    for (let i: i32 = 0; i < grouppBorrowerAcceptedFunds.length; ++i) {
      writer.uint32(42);
      writer.fork();
      groupp_BorrowerAcceptedFunds.encode(
        grouppBorrowerAcceptedFunds[i],
        writer
      );
      writer.ldelim();
    }

    const grouppDefaultedLoanLiquidateds =
      message.grouppDefaultedLoanLiquidateds;
    for (let i: i32 = 0; i < grouppDefaultedLoanLiquidateds.length; ++i) {
      writer.uint32(50);
      writer.fork();
      groupp_DefaultedLoanLiquidated.encode(
        grouppDefaultedLoanLiquidateds[i],
        writer
      );
      writer.ldelim();
    }

    const grouppEarningsWithdrawns = message.grouppEarningsWithdrawns;
    for (let i: i32 = 0; i < grouppEarningsWithdrawns.length; ++i) {
      writer.uint32(58);
      writer.fork();
      groupp_EarningsWithdrawn.encode(grouppEarningsWithdrawns[i], writer);
      writer.ldelim();
    }

    const grouppInitializeds = message.grouppInitializeds;
    for (let i: i32 = 0; i < grouppInitializeds.length; ++i) {
      writer.uint32(66);
      writer.fork();
      groupp_Initialized.encode(grouppInitializeds[i], writer);
      writer.ldelim();
    }

    const grouppLenderAddedPrincipals = message.grouppLenderAddedPrincipals;
    for (let i: i32 = 0; i < grouppLenderAddedPrincipals.length; ++i) {
      writer.uint32(74);
      writer.fork();
      groupp_LenderAddedPrincipal.encode(
        grouppLenderAddedPrincipals[i],
        writer
      );
      writer.ldelim();
    }

    const grouppLoanRepaids = message.grouppLoanRepaids;
    for (let i: i32 = 0; i < grouppLoanRepaids.length; ++i) {
      writer.uint32(82);
      writer.fork();
      groupp_LoanRepaid.encode(grouppLoanRepaids[i], writer);
      writer.ldelim();
    }

    const grouppOwnershipTransferreds = message.grouppOwnershipTransferreds;
    for (let i: i32 = 0; i < grouppOwnershipTransferreds.length; ++i) {
      writer.uint32(90);
      writer.fork();
      groupp_OwnershipTransferred.encode(
        grouppOwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const grouppPauseds = message.grouppPauseds;
    for (let i: i32 = 0; i < grouppPauseds.length; ++i) {
      writer.uint32(98);
      writer.fork();
      groupp_Paused.encode(grouppPauseds[i], writer);
      writer.ldelim();
    }

    const grouppPoolInitializeds = message.grouppPoolInitializeds;
    for (let i: i32 = 0; i < grouppPoolInitializeds.length; ++i) {
      writer.uint32(106);
      writer.fork();
      groupp_PoolInitialized.encode(grouppPoolInitializeds[i], writer);
      writer.ldelim();
    }

    const grouppUnpauseds = message.grouppUnpauseds;
    for (let i: i32 = 0; i < grouppUnpauseds.length; ++i) {
      writer.uint32(114);
      writer.fork();
      groupp_Unpaused.encode(grouppUnpauseds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.facAdminChangeds.push(
            fac_AdminChanged.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.facBeaconUpgradeds.push(
            fac_BeaconUpgraded.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.facDeployedLenderGroupContracts.push(
            fac_DeployedLenderGroupContract.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.facUpgradeds.push(
            fac_Upgraded.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.grouppBorrowerAcceptedFunds.push(
            groupp_BorrowerAcceptedFunds.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.grouppDefaultedLoanLiquidateds.push(
            groupp_DefaultedLoanLiquidated.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.grouppEarningsWithdrawns.push(
            groupp_EarningsWithdrawn.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.grouppInitializeds.push(
            groupp_Initialized.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.grouppLenderAddedPrincipals.push(
            groupp_LenderAddedPrincipal.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.grouppLoanRepaids.push(
            groupp_LoanRepaid.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.grouppOwnershipTransferreds.push(
            groupp_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.grouppPauseds.push(
            groupp_Paused.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.grouppPoolInitializeds.push(
            groupp_PoolInitialized.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.grouppUnpauseds.push(
            groupp_Unpaused.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  facAdminChangeds: Array<fac_AdminChanged>;
  facBeaconUpgradeds: Array<fac_BeaconUpgraded>;
  facDeployedLenderGroupContracts: Array<fac_DeployedLenderGroupContract>;
  facUpgradeds: Array<fac_Upgraded>;
  grouppBorrowerAcceptedFunds: Array<groupp_BorrowerAcceptedFunds>;
  grouppDefaultedLoanLiquidateds: Array<groupp_DefaultedLoanLiquidated>;
  grouppEarningsWithdrawns: Array<groupp_EarningsWithdrawn>;
  grouppInitializeds: Array<groupp_Initialized>;
  grouppLenderAddedPrincipals: Array<groupp_LenderAddedPrincipal>;
  grouppLoanRepaids: Array<groupp_LoanRepaid>;
  grouppOwnershipTransferreds: Array<groupp_OwnershipTransferred>;
  grouppPauseds: Array<groupp_Paused>;
  grouppPoolInitializeds: Array<groupp_PoolInitialized>;
  grouppUnpauseds: Array<groupp_Unpaused>;

  constructor(
    facAdminChangeds: Array<fac_AdminChanged> = [],
    facBeaconUpgradeds: Array<fac_BeaconUpgraded> = [],
    facDeployedLenderGroupContracts: Array<fac_DeployedLenderGroupContract> = [],
    facUpgradeds: Array<fac_Upgraded> = [],
    grouppBorrowerAcceptedFunds: Array<groupp_BorrowerAcceptedFunds> = [],
    grouppDefaultedLoanLiquidateds: Array<groupp_DefaultedLoanLiquidated> = [],
    grouppEarningsWithdrawns: Array<groupp_EarningsWithdrawn> = [],
    grouppInitializeds: Array<groupp_Initialized> = [],
    grouppLenderAddedPrincipals: Array<groupp_LenderAddedPrincipal> = [],
    grouppLoanRepaids: Array<groupp_LoanRepaid> = [],
    grouppOwnershipTransferreds: Array<groupp_OwnershipTransferred> = [],
    grouppPauseds: Array<groupp_Paused> = [],
    grouppPoolInitializeds: Array<groupp_PoolInitialized> = [],
    grouppUnpauseds: Array<groupp_Unpaused> = []
  ) {
    this.facAdminChangeds = facAdminChangeds;
    this.facBeaconUpgradeds = facBeaconUpgradeds;
    this.facDeployedLenderGroupContracts = facDeployedLenderGroupContracts;
    this.facUpgradeds = facUpgradeds;
    this.grouppBorrowerAcceptedFunds = grouppBorrowerAcceptedFunds;
    this.grouppDefaultedLoanLiquidateds = grouppDefaultedLoanLiquidateds;
    this.grouppEarningsWithdrawns = grouppEarningsWithdrawns;
    this.grouppInitializeds = grouppInitializeds;
    this.grouppLenderAddedPrincipals = grouppLenderAddedPrincipals;
    this.grouppLoanRepaids = grouppLoanRepaids;
    this.grouppOwnershipTransferreds = grouppOwnershipTransferreds;
    this.grouppPauseds = grouppPauseds;
    this.grouppPoolInitializeds = grouppPoolInitializeds;
    this.grouppUnpauseds = grouppUnpauseds;
  }
}
