// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Timestamp } from "../../google/protobuf/Timestamp";

export class lendergroup_BorrowerAcceptedFunds {
  static encode(
    message: lendergroup_BorrowerAcceptedFunds,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.evtTxHash);

    writer.uint32(16);
    writer.uint32(message.evtIndex);

    const evtBlockTime = message.evtBlockTime;
    if (evtBlockTime !== null) {
      writer.uint32(26);
      writer.fork();
      Timestamp.encode(evtBlockTime, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.uint64(message.evtBlockNumber);

    writer.uint32(42);
    writer.string(message.evtAddress);

    writer.uint32(50);
    writer.bytes(message.borrower);

    writer.uint32(58);
    writer.string(message.bidId);

    writer.uint32(66);
    writer.string(message.principalAmount);

    writer.uint32(74);
    writer.string(message.collateralAmount);

    writer.uint32(80);
    writer.uint64(message.loanDuration);

    writer.uint32(88);
    writer.uint64(message.interestRate);
  }

  static decode(
    reader: Reader,
    length: i32
  ): lendergroup_BorrowerAcceptedFunds {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new lendergroup_BorrowerAcceptedFunds();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.evtTxHash = reader.string();
          break;

        case 2:
          message.evtIndex = reader.uint32();
          break;

        case 3:
          message.evtBlockTime = Timestamp.decode(reader, reader.uint32());
          break;

        case 4:
          message.evtBlockNumber = reader.uint64();
          break;

        case 5:
          message.evtAddress = reader.string();
          break;

        case 6:
          message.borrower = reader.bytes();
          break;

        case 7:
          message.bidId = reader.string();
          break;

        case 8:
          message.principalAmount = reader.string();
          break;

        case 9:
          message.collateralAmount = reader.string();
          break;

        case 10:
          message.loanDuration = reader.uint64();
          break;

        case 11:
          message.interestRate = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  evtTxHash: string;
  evtIndex: u32;
  evtBlockTime: Timestamp | null;
  evtBlockNumber: u64;
  evtAddress: string;
  borrower: Uint8Array;
  bidId: string;
  principalAmount: string;
  collateralAmount: string;
  loanDuration: u64;
  interestRate: u64;

  constructor(
    evtTxHash: string = "",
    evtIndex: u32 = 0,
    evtBlockTime: Timestamp | null = null,
    evtBlockNumber: u64 = 0,
    evtAddress: string = "",
    borrower: Uint8Array = new Uint8Array(0),
    bidId: string = "",
    principalAmount: string = "",
    collateralAmount: string = "",
    loanDuration: u64 = 0,
    interestRate: u64 = 0
  ) {
    this.evtTxHash = evtTxHash;
    this.evtIndex = evtIndex;
    this.evtBlockTime = evtBlockTime;
    this.evtBlockNumber = evtBlockNumber;
    this.evtAddress = evtAddress;
    this.borrower = borrower;
    this.bidId = bidId;
    this.principalAmount = principalAmount;
    this.collateralAmount = collateralAmount;
    this.loanDuration = loanDuration;
    this.interestRate = interestRate;
  }
}
