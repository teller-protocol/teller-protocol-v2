// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Timestamp } from "../../google/protobuf/Timestamp";

export class lendergroup_PoolInitialized {
  static encode(message: lendergroup_PoolInitialized, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.evtTxHash);

    writer.uint32(16);
    writer.uint32(message.evtIndex);

    const evtBlockTime = message.evtBlockTime;
    if (evtBlockTime !== null) {
      writer.uint32(26);
      writer.fork();
      Timestamp.encode(evtBlockTime, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.uint64(message.evtBlockNumber);

    writer.uint32(42);
    writer.string(message.evtAddress);

    writer.uint32(50);
    writer.bytes(message.principalTokenAddress);

    writer.uint32(58);
    writer.bytes(message.collateralTokenAddress);

    writer.uint32(66);
    writer.string(message.marketId);

    writer.uint32(72);
    writer.uint64(message.maxLoanDuration);

    writer.uint32(80);
    writer.uint64(message.interestRateLowerBound);

    writer.uint32(88);
    writer.uint64(message.interestRateUpperBound);

    writer.uint32(96);
    writer.uint64(message.liquidityThresholdPercent);

    writer.uint32(104);
    writer.uint64(message.loanToValuePercent);

    writer.uint32(112);
    writer.uint64(message.uniswapPoolFee);

    writer.uint32(120);
    writer.uint64(message.twapInterval);

    writer.uint32(130);
    writer.bytes(message.poolSharesToken);
  }

  static decode(reader: Reader, length: i32): lendergroup_PoolInitialized {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new lendergroup_PoolInitialized();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.evtTxHash = reader.string();
          break;

        case 2:
          message.evtIndex = reader.uint32();
          break;

        case 3:
          message.evtBlockTime = Timestamp.decode(reader, reader.uint32());
          break;

        case 4:
          message.evtBlockNumber = reader.uint64();
          break;

        case 5:
          message.evtAddress = reader.string();
          break;

        case 6:
          message.principalTokenAddress = reader.bytes();
          break;

        case 7:
          message.collateralTokenAddress = reader.bytes();
          break;

        case 8:
          message.marketId = reader.string();
          break;

        case 9:
          message.maxLoanDuration = reader.uint64();
          break;

        case 10:
          message.interestRateLowerBound = reader.uint64();
          break;

        case 11:
          message.interestRateUpperBound = reader.uint64();
          break;

        case 12:
          message.liquidityThresholdPercent = reader.uint64();
          break;

        case 13:
          message.loanToValuePercent = reader.uint64();
          break;

        case 14:
          message.uniswapPoolFee = reader.uint64();
          break;

        case 15:
          message.twapInterval = reader.uint64();
          break;

        case 16:
          message.poolSharesToken = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  evtTxHash: string;
  evtIndex: u32;
  evtBlockTime: Timestamp | null;
  evtBlockNumber: u64;
  evtAddress: string;
  principalTokenAddress: Uint8Array;
  collateralTokenAddress: Uint8Array;
  marketId: string;
  maxLoanDuration: u64;
  interestRateLowerBound: u64;
  interestRateUpperBound: u64;
  liquidityThresholdPercent: u64;
  loanToValuePercent: u64;
  uniswapPoolFee: u64;
  twapInterval: u64;
  poolSharesToken: Uint8Array;

  constructor(
    evtTxHash: string = "",
    evtIndex: u32 = 0,
    evtBlockTime: Timestamp | null = null,
    evtBlockNumber: u64 = 0,
    evtAddress: string = "",
    principalTokenAddress: Uint8Array = new Uint8Array(0),
    collateralTokenAddress: Uint8Array = new Uint8Array(0),
    marketId: string = "",
    maxLoanDuration: u64 = 0,
    interestRateLowerBound: u64 = 0,
    interestRateUpperBound: u64 = 0,
    liquidityThresholdPercent: u64 = 0,
    loanToValuePercent: u64 = 0,
    uniswapPoolFee: u64 = 0,
    twapInterval: u64 = 0,
    poolSharesToken: Uint8Array = new Uint8Array(0)
  ) {
    this.evtTxHash = evtTxHash;
    this.evtIndex = evtIndex;
    this.evtBlockTime = evtBlockTime;
    this.evtBlockNumber = evtBlockNumber;
    this.evtAddress = evtAddress;
    this.principalTokenAddress = principalTokenAddress;
    this.collateralTokenAddress = collateralTokenAddress;
    this.marketId = marketId;
    this.maxLoanDuration = maxLoanDuration;
    this.interestRateLowerBound = interestRateLowerBound;
    this.interestRateUpperBound = interestRateUpperBound;
    this.liquidityThresholdPercent = liquidityThresholdPercent;
    this.loanToValuePercent = loanToValuePercent;
    this.uniswapPoolFee = uniswapPoolFee;
    this.twapInterval = twapInterval;
    this.poolSharesToken = poolSharesToken;
  }
}
