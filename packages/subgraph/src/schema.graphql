type Protocol implements IHasLoans @entity {
  id: ID!

  loans: LoanStatusCount! @derivedFrom(field: "_protocol")
  tokenVolumes: [TokenVolume!]! @derivedFrom(field: "protocol")

  rolloverableLCF: Bytes
  activeCommitments: [Commitment!]!
  inactiveCommitments: [Commitment!]

  activeRewards: [RewardAllocation!]!

  _durationTotal: BigInt!
  durationAverage: BigInt!
}

type ProtocolCollateral @entity {
  id: ID!
  collateralToken: Token
  tokenVolumesByLendingToken: [TokenVolume!]! @derivedFrom(field: "_protocolCollateral")
}

type MarketPlace implements IHasLoans @entity {
  id: ID!
  marketplaceId: BigInt!

  owner: Bytes
  feeRecipient: Bytes
  metadataURI: String
  isMarketOpen: Boolean!
  paymentDefaultDuration: BigInt!
  paymentCycleDuration: BigInt!
  paymentCycleType: String!
  paymentType: String!
  bidExpirationTime: BigInt!
  borrowerAttestationRequired: Boolean!
  lenderAttestationRequired: Boolean!
  marketplaceFeePercent: BigInt!

  loans: LoanStatusCount! @derivedFrom(field: "_market")
  tokenVolumes: [TokenVolume!]! @derivedFrom(field: "market")

  _durationTotal: BigInt!
  durationAverage: BigInt!

  totalNumberOfLenders: BigInt!
  lenders: [Lender!]! @derivedFrom(field: "marketplace")

  borrowers: [Borrower!]! @derivedFrom(field: "marketplace")

  commitments: [Commitment!]! @derivedFrom(field: "marketplace")
}

type Bid @entity {
  id: ID!
  bidId: BigInt!
  createdAt: BigInt!
  expiresAt: BigInt!
  updatedAt: BigInt
  transactionHash: String!
  fundedTx: FundedTx @derivedFrom(field: "bid")

  borrowerAddress: Bytes!
  borrower: Borrower!

  receiverAddress: Bytes!

  liquidatorAddress: Bytes

  lenderAddress: Bytes
  lender: Lender

  lendingToken: Token!
  lendingTokenAddress: Bytes!

  bidRewards: [BidReward!]! @derivedFrom(field: "bid")

  marketplaceId: BigInt!
  metadataURI: String!
  status: String!
  principal: BigInt!
  acceptedTimestamp: BigInt!
  lastRepaidTimestamp: BigInt!
  loanDuration: BigInt!
  paymentCycle: BigInt!
  paymentCycleAmount: BigInt!
  apr: BigInt!
  endDate: BigInt
  nextDueDate: BigInt
  marketplace: MarketPlace!
  commitment: Commitment
  commitmentId: String

  payments: [Payment!]! @derivedFrom(field: "bid")
  totalRepaidPrincipal: BigInt!
  totalRepaidInterest: BigInt!
  _lastTotalRepaidAmount: BigInt!
  _lastTotalRepaidInterestAmount: BigInt!
  paymentDefaultDuration: BigInt!
  collateralEscrow: Bytes
  collateral: [BidCollateral!]
}

type BidCollateral @entity {
  id: ID!
  amount: BigInt!
  tokenId: BigInt
  type: String
  collateralAddress: Bytes!
  token: Token!
  bid: Bid!
  status: String
  receiver: Bytes
  cmV2: Boolean
}

type Token @entity {
  id: ID!
  address: Bytes!
  type: String
  nftId: BigInt
  name: String
  symbol: String
  decimals: BigInt
}

type FundedTx @entity {
  id: ID!
  bid: Bid!
  timestamp: BigInt!
}

type Payment @entity {
  id: ID!
  bid: Bid!
  principal: BigInt!
  interest: BigInt!
  paymentDate: BigInt!
  outstandingCapital: BigInt!
  status: String!
}

type User @entity {
  id: ID!
  firstInteractionDate: BigInt!
  lenders: [Lender!]! @derivedFrom(field: "user")
  borrowers: [Borrower!]! @derivedFrom(field: "user")
  bidRewards: [BidReward!]! @derivedFrom(field: "user")
}

type Lender implements IHasLoans @entity {
  id: ID!
  marketplaceId: BigInt!
  lenderAddress: Bytes!
  firstInteractionDate: BigInt!
  attestedTimestamp: BigInt
  isAttested: Boolean!

  loans: LoanStatusCount! @derivedFrom(field: "_lender")
  tokenVolumes: [TokenVolume!]! @derivedFrom(field: "lender")

  _durationTotal: BigInt!
  durationAverage: BigInt!

  marketplace: MarketPlace!
  user: User!
  commitments: [Commitment!]! @derivedFrom(field: "lender")
}

type Borrower implements IHasLoans @entity {
  id: ID!
  marketplaceId: BigInt!
  borrowerAddress: Bytes!
  firstInteractionDate: BigInt!
  attestedTimestamp: BigInt
  isAttested: Boolean!

  loans: LoanStatusCount! @derivedFrom(field: "_borrower")
  tokenVolumes: [TokenVolume!]! @derivedFrom(field: "borrower")

  _durationTotal: BigInt!
  durationAverage: BigInt!

  marketplace: MarketPlace!
  user: User!
}

interface IHasLoans implements IDurationAverage {
  loans: LoanStatusCount!
  tokenVolumes: [TokenVolume!]!

  _durationTotal: BigInt!
  durationAverage: BigInt!
}

interface IDurationAverage {
  _durationTotal: BigInt!
  durationAverage: BigInt!
}

interface ILoanStatusCount {
  all: [Bid!]!
  totalCount: BigInt!

  submitted: [Bid!]!
  submittedCount: BigInt!

  expired: [Bid!]!
  expiredCount: BigInt!

  cancelled: [Bid!]!
  cancelledCount: BigInt!

  accepted: [Bid!]!
  acceptedCount: BigInt!

  dueSoon: [Bid!]!
  dueSoonCount: BigInt!

  late: [Bid!]!
  lateCount: BigInt!

  defaulted: [Bid!]!
  defaultedCount: BigInt!

  repaid: [Bid!]!
  repaidCount: BigInt!

  liquidated: [Bid!]!
  liquidatedCount: BigInt!
}

type LoanStatusCount implements ILoanStatusCount @entity {
  id: ID!

  all: [Bid!]!
  totalCount: BigInt!

  submitted: [Bid!]!
  submittedCount: BigInt!

  expired: [Bid!]!
  expiredCount: BigInt!

  cancelled: [Bid!]!
  cancelledCount: BigInt!

  accepted: [Bid!]!
  acceptedCount: BigInt!

  dueSoon: [Bid!]!
  dueSoonCount: BigInt!

  late: [Bid!]!
  lateCount: BigInt!

  defaulted: [Bid!]!
  defaultedCount: BigInt!

  repaid: [Bid!]!
  repaidCount: BigInt!

  liquidated: [Bid!]!
  liquidatedCount: BigInt!

  ## Entity Relationships ##
  _protocol: Protocol
  _market: MarketPlace
  _lender: Lender
  _borrower: Borrower
  _tokenVolume: TokenVolume
  ## end Entity Relationships ##
}

type TokenVolume implements IDurationAverage @entity {
  id: ID!

  ## Entity Relationships ##
  protocol: Protocol
  market: MarketPlace
  lender: Lender
  borrower: Borrower

  allocatedRewards: [RewardAllocation!]! @derivedFrom(field: "tokenVolume")

  # used to group token volumes with collateral by lending token
  _protocolCollateral: ProtocolCollateral

  _linkedParentTokenVolume: TokenVolume
  tokenVolumeByCollateral: [TokenVolume!]! @derivedFrom(field: "_linkedParentTokenVolume")
  ## end Entity Relationships ##

  ## TokenStats ##
  token: Token!
  collateralToken: Token # if null, then theres no collateral
  lendingTokenAddress: Bytes!

  loans: LoanStatusCount! @derivedFrom(field: "_tokenVolume")

  outstandingCapital: BigInt!
  totalAvailable: BigInt! # available for lending via commitments
  totalLoaned: BigInt!
  totalActive: BigInt!
  totalAccepted: BigInt!
  totalDueSoon: BigInt!
  totalLate: BigInt!
  totalDefaulted: BigInt!
  totalRepaid: BigInt!
  totalLiquidated: BigInt!

  _loanAcceptedCount: BigInt!
  loanAverage: BigInt!

  commissionEarned: BigInt!
  totalRepaidInterest: BigInt!

  _aprWeightedTotal: BigInt!
  aprAverage: BigInt!
  _aprActiveWeightedTotal: BigInt!
  aprActiveAverage: BigInt!

  _durationTotal: BigInt!
  durationAverage: BigInt!

  ## end TokenStats ##
}

type MarketCommitmentStdDev @entity {
  id: ID!

  market: MarketPlace!

  lendingToken: Token!
  collateralToken: Token

  commitmentZScores: [CommitmentZScore!]!

  maxPrincipalPerCollateralStdDev: BigDecimal!
  maxPrincipalPerCollateralMean: BigDecimal!

  minApyStdDev: BigDecimal!
  minApyMean: BigDecimal!

  maxDurationStdDev: BigDecimal!
  maxDurationMean: BigDecimal!
}

type CommitmentZScore @entity {
  id: ID!
  commitment: Commitment!
  zScore: BigDecimal!
}

type Commitment @entity {
  id: ID!
  commitmentId: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
  status: String!
  forwarderAddress: Bytes! # address of the LenderCommitmentForwarder contract
  rolloverable: Boolean!

  # Offer
  committedAmount: BigInt! # Current committed amount
  expirationTimestamp: BigInt!
  maxDuration: BigInt!
  minAPY: BigInt!
  principalToken: Token!
  principalTokenAddress: Bytes!

  # Required Collateral
  collateralToken: Token
  collateralTokenAddress: Bytes
  collateralTokenType: BigInt!
  maxPrincipalPerCollateralAmount: BigInt

  commitmentBorrowers: [Bytes!]!

  # Lender
  lender: Lender!
  lenderAddress: Bytes!
  lenderPrincipalBalance: BigInt!
  lenderPrincipalAllowance: BigInt!

  # Market
  marketplace: MarketPlace!
  marketplaceId: BigInt!

  # TokenStats
  tokenVolume: TokenVolume!

  # Extra
  maxPrincipal: BigInt!
  acceptedPrincipal: BigInt! # funds that were accepted (only tracking _newAcceptedPrincipal value for now)
  _oldAcceptedPrincipal: BigInt! # funds that were accepted that was not previously tracked on-chain
  _newAcceptedPrincipal: BigInt! # funds that were accepted AFTER commitmentPrincipalAccepted function was added on-chain

  commitmentRewards: [CommitmentReward!]! @derivedFrom(field: "commitment")
}


# Association between RewardAllocations and Commitments
type CommitmentReward @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!

  reward: RewardAllocation!
  commitment: Commitment!

  roi: BigInt!
  apy: BigInt!
}




type RewardAllocation @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!

  status: String!

  allocator: User!
  allocatorAddress: Bytes!

  # Market
  marketplace: MarketPlace!
  marketplaceId: BigInt!

  # TokenStats
  tokenVolume: TokenVolume

  rewardToken: Token!
  rewardTokenAddress: Bytes!
  rewardTokenAmountInitial: BigInt!
  rewardTokenAmountRemaining: BigInt!

  requiredPrincipalTokenAddress: Bytes!
  requiredCollateralTokenAddress: Bytes!

  minimumCollateralPerPrincipalAmount: BigInt!
  rewardPerLoanPrincipalAmount: BigInt!

  bidStartTimeMin: BigInt!
  bidStartTimeMax: BigInt!

  allocationStrategy: String!

  bidRewards: [BidReward!]!

  commitmentRewards: [CommitmentReward!]! @derivedFrom(field: "reward")

}


type BidReward @entity {
  id: ID!
  createdAt: BigInt!
  updatedAt: BigInt!

  reward: RewardAllocation!
  bid: Bid!
  user: User!

  claimed: Boolean!
}



